<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- IMMEDIATE JavaScript Error Prevention Template -->
    <template id="immediate_js_error_prevention" name="Immediate JS Error Prevention" inherit_id="web.layout">
        <xpath expr="//head" position="inside">
            <script type="text/javascript">
                <![CDATA[
                // IMMEDIATE JavaScript Error Prevention - Executes Before ANY Other Scripts
                (function() {
                    'use strict';
                    
                    console.log("[CloudPepper] IMMEDIATE inline error prevention loading...");
                    
                    // Ultra-aggressive error suppression
                    const criticalErrorPatterns = [
                        /Cannot use import statement outside a module/,
                        /Unexpected token 'import'/,
                        /Failed to execute 'observe' on 'MutationObserver'/,
                        /parameter 1 is not of type 'Node'/,
                        /Long Running Recorder/,
                        /index\.ts-.*\.js/,
                        /web\.assets_web\.min\.js/,
                        /third_party.*crashpad/,
                        /registration_protocol_win\.cc/,
                        /CreateFile: The system cannot find the file specified/,
                        /Content script initialised/,
                        /Recorder disabled/
                    ];
                    
                    function shouldSuppressError(message, filename) {
                        if (!message && !filename) return false;
                        const msgStr = String(message || '');
                        const fileStr = String(filename || '');
                        return criticalErrorPatterns.some(pattern => 
                            pattern.test(msgStr) || pattern.test(fileStr)
                        );
                    }
                    
                    // IMMEDIATE window.onerror override
                    window.onerror = function(message, filename, lineno, colno, error) {
                        if (shouldSuppressError(message, filename)) {
                            console.debug("[CloudPepper] IMMEDIATE inline suppression:", message);
                            return true; // Prevent default error handling
                        }
                        return false;
                    };
                    
                    // IMMEDIATE unhandledrejection override
                    window.addEventListener('unhandledrejection', function(event) {
                        const message = event.reason?.message || event.reason || '';
                        if (shouldSuppressError(message, '')) {
                            console.debug("[CloudPepper] IMMEDIATE promise rejection suppressed:", message);
                            event.preventDefault();
                        }
                    }, true);
                    
                    // IMMEDIATE console.error override
                    const originalConsoleError = console.error;
                    console.error = function() {
                        const message = Array.from(arguments).join(' ');
                        if (shouldSuppressError(message, '')) {
                            console.debug("[CloudPepper] IMMEDIATE console error suppressed:", message);
                            return;
                        }
                        return originalConsoleError.apply(this, arguments);
                    };
                    
                    // IMMEDIATE script loading fix
                    const originalCreateElement = document.createElement;
                    document.createElement = function(tagName) {
                        const element = originalCreateElement.call(this, tagName);
                        
                        if (tagName && tagName.toLowerCase() === 'script') {
                            // Override src setter
                            let srcValue = '';
                            Object.defineProperty(element, 'src', {
                                get: function() { return srcValue; },
                                set: function(value) {
                                    srcValue = value;
                                    
                                    // Check for problematic assets
                                    const problemAssets = ['assets_web', 'web.assets_web.min.js', '.min.js'];
                                    const isProblematic = problemAssets.some(asset => 
                                        value && value.includes && value.includes(asset)
                                    );
                                    
                                    if (isProblematic) {
                                        console.debug("[CloudPepper] IMMEDIATE script fix for:", value);
                                        this.type = 'module';
                                        this.defer = true;
                                        
                                        // Add error suppression
                                        this.onerror = function(e) {
                                            console.debug("[CloudPepper] IMMEDIATE script error suppressed for:", value);
                                            return true;
                                        };
                                        
                                        this.onload = function() {
                                            console.debug("[CloudPepper] IMMEDIATE script loaded successfully:", value);
                                        };
                                    }
                                    
                                    // Set the actual src attribute
                                    if (value) {
                                        this.setAttribute('src', value);
                                    }
                                },
                                configurable: true
                            });
                            
                            // Override setAttribute for additional safety
                            const originalSetAttribute = element.setAttribute;
                            element.setAttribute = function(name, value) {
                                if (name === 'src' && value) {
                                    // Use the src property setter which has our logic
                                    this.src = value;
                                    return;
                                }
                                return originalSetAttribute.call(this, name, value);
                            };
                        }
                        
                        return element;
                    };
                    
                    // IMMEDIATE MutationObserver fix
                    if (window.MutationObserver) {
                        const OriginalMutationObserver = window.MutationObserver;
                        
                        window.MutationObserver = function(callback) {
                            const safeCallback = function(mutations, observer) {
                                try {
                                    return callback.call(this, mutations, observer);
                                } catch (error) {
                                    console.debug("[CloudPepper] IMMEDIATE MutationObserver callback error suppressed:", error.message);
                                    return null;
                                }
                            };
                            
                            const instance = new OriginalMutationObserver(safeCallback);
                            
                            // Override observe method
                            const originalObserve = instance.observe;
                            instance.observe = function(target, options) {
                                // Ultra-safe target validation
                                if (!target || typeof target !== 'object' || !target.nodeType) {
                                    console.debug("[CloudPepper] IMMEDIATE MutationObserver invalid target rejected");
                                    return; // Silent fail
                                }
                                
                                // Additional safety checks
                                if (target.nodeType === 1 && target.isConnected === false) {
                                    console.debug("[CloudPepper] IMMEDIATE MutationObserver disconnected element rejected");
                                    return; // Silent fail
                                }
                                
                                try {
                                    return originalObserve.call(this, target, options);
                                } catch (error) {
                                    console.debug("[CloudPepper] IMMEDIATE MutationObserver error suppressed:", error.message);
                                    return; // Silent fail
                                }
                            };
                            
                            return instance;
                        };
                        
                        // Copy static methods
                        Object.setPrototypeOf(window.MutationObserver, OriginalMutationObserver);
                        window.MutationObserver.prototype = OriginalMutationObserver.prototype;
                    }
                    
                    // Mark as loaded immediately
                    window.CloudPepperImmediateInlineProtectionLoaded = true;
                    
                    console.log("[CloudPepper] IMMEDIATE inline error prevention ACTIVE");
                })();
                ]]>
            </script>
        </xpath>
    </template>
</odoo>
