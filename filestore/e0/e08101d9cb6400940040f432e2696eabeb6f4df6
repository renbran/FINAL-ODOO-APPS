)]}'
{"version": 3, "sources": ["/mass_mailing/static/src/js/mass_mailing_snippets.js", "/mass_mailing/static/src/snippets/s_masonry_block/options.js", "/mass_mailing/static/src/snippets/s_media_list/options.js", "/mass_mailing/static/src/snippets/s_showcase/options.js", "/mass_mailing/static/src/snippets/s_rating/options.js"], "mappingspUA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACdA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AChDA;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjsourcesContent": ["/** @odoo-module **/\n\nimport options from \"@web_editor/js/editor/snippets.options\";\nimport { loadImage } from \"@web_editor/js/editor/image_processing\";\nconst SelectUserValueWidget = options.userValueWidgetsRegistry['we-select'];\nimport weUtils from \"@web_editor/js/common/utils\";\nimport {\n    CSS_PREFIX, BTN_SIZE_STYLES,\n    DEFAULT_BUTTON_SIZE, PRIORITY_STYLES, FONT_FAMILIES,\n    getFontName, normalizeFontFamily, initializeDesignTabCss,\n    transformFontFamilySelector,\n} from \"@mass_mailing/js/mass_mailing_design_constants\";\nimport { isCSSColor, normalizeCSSColor } from \"@web/core/utils/colors\";\n\n\n//--------------------------------------------------------------------------\n// Options\n//--------------------------------------------------------------------------\n\n// Adding compatibility for the outlook compliance of mailings.\n// Commit of such compatibility : a14f89c8663c9cafecb1cc26918055e023ecbe42\noptions.registry.MassMailingBackgroundImage = options.registry.BackgroundImage.extend({\n    start: function () {\n        this._super();\n        const $table_target = this.$target.find('table:first');\n        if ($table_target.length) {\n            this.$target = $table_target;\n        }\n    }\n});\n\noptions.registry.MassMailingImageTools = options.registry.ImageTools.extend({\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _getCSSColorValue(color) {\n        if (!color || isCSSColor(color)) {\n            return color;\n        }\n        const doc = this.options.document;\n        const tempEl = doc.body.appendChild(doc.createElement('div'));\n        tempEl.className = `bg-${color}`;\n        const colorValue = window.getComputedStyle(tempEl).getPropertyValue(\"background-color\").trim();\n        tempEl.parentNode.removeChild(tempEl);\n        return normalizeCSSColor(colorValue).replace(/\"/g, \"'\");\n    },\n\n    /**\n     * @override\n     */\n    async computeShape(svgText, img) {\n        const dataURL = await this._super(...arguments);\n        const image = await loadImage(dataURL);\n        const canvas = document.createElement(\"canvas\");\n        const imgFilename = (img.dataset.originalSrc.split(\"/\").pop()).split(\".\")[0];\n        img.dataset.fileName = `${imgFilename}.png`;\n        img.dataset.mimetype = \"image/png\";\n        canvas.width = image.width;\n        canvas.height = image.height;\n        canvas.getContext(\"2d\").drawImage(image, 0, 0, image.width, image.height);\n        return canvas.toDataURL(`image/png`, 1.0);\n    }\n});\n\noptions.userValueWidgetsRegistry['we-fontfamilypicker'] = SelectUserValueWidget.extend({\n    /**\n     * @override\n     * @see FONT_FAMILIES\n     */\n    start: async function () {\n        const res = await this._super(...arguments);\n        // Populate the `we-select` with the font family buttons\n        for (const fontFamily of FONT_FAMILIES) {\n            const button = document.createElement('we-button');\n            button.style.setProperty('font-family', fontFamily);\n            button.dataset.customizeCssProperty = fontFamily;\n            button.dataset.cssProperty = 'font-family';\n            button.dataset.selectorText = this.el.dataset.selectorText;\n            button.textContent = getFontName(fontFamily);\n            this.menuEl.appendChild(button);\n        };\n        return res;\n    },\n});\n\noptions.registry.DesignTab = options.Class.extend({\n    /**\n     * @override\n     */\n    init() {\n        this._super(...arguments);\n        // Set the target on the whole editable so apply-to looks within it.\n        this.setTarget(this.options.wysiwyg.getEditable());\n    },\n    /**\n     * @override\n     */\n    async start() {\n        const res = await this._super(...arguments);\n        const $editable = this.options.wysiwyg.getEditable();\n        this.document = $editable[0].ownerDocument;\n        this.$layout = $editable.find('.o_layout');\n        initializeDesignTabCss($editable);\n        this.styleElement = this.document.querySelector('#design-element');\n        // When editing a stylesheet, its content is not updated so it won't be\n        // saved along with the mailing. Therefore we need to write its cssText\n        // into it. However, when doing that we lose its reference. So we need\n        // two separate style elements: one that will be saved and one to hold\n        // the stylesheet. Both need to be synchronized, which will be done via\n        // `_commitCss`.\n        let sheetOwner = this.document.querySelector('#sheet-owner');\n        if (!sheetOwner) {\n            sheetOwner = document.createElement('style');\n            sheetOwner.setAttribute('id', 'sheet-owner');\n            this.document.head.appendChild(sheetOwner);\n        }\n        sheetOwner.disabled = true;\n        sheetOwner.textContent = this.styleElement.textContent;\n        this.styleSheet = sheetOwner.sheet;\n        return res;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Option method to set a css property in the mailing's custom stylesheet.\n     * Note: marks all the styles as important to make sure they take precedence\n     * on other stylesheets.\n     *\n     * @param {boolean|string} previewMode\n     * @param {string} widgetValue\n     * @param {Object} params\n     * @param {string} params.selectorText the css selector for which to apply\n     *                                     the css\n     * @param {string} params.cssProperty the name of the property to edit\n     *                                    (camel cased)\n     * @param {string} [params.toggle] if 'true', will remove the property if\n     *                                 its value is already the one it's being\n     *                                 set to\n     * @param {string} [params.activeValue] the value to set, if `widgetValue`\n     *                                      is not defined.\n     * @returns {Promise|undefined}\n     */\n    customizeCssProperty(previewMode, widgetValue, params) {\n        if (!params.selectorText || !params.cssProperty) {\n            return;\n        }\n        let value = widgetValue || params.activeValue;\n        if (params.cssProperty.includes('color')) {\n            value = weUtils.normalizeColor(value);\n        }\n        let selectors = this._getSelectors(params.selectorText);\n        const firstSelector = selectors[0].replace(CSS_PREFIX, '').trim();\n        if (params.cssProperty === 'font-family') {\n            // Ensure font-family gets passed to all descendants and never\n            // overwrite font awesome.\n            const newSelectors = [];\n            for (const selector of selectors) {\n                newSelectors.push(...transformFontFamilySelector(selector));\n            }\n            selectors = [...new Set(newSelectors)];\n        }\n        for (const selector of selectors) {\n            const priority = PRIORITY_STYLES[firstSelector].includes(params.cssProperty) ? ' !important' : '';\n            const rule = this._getRule(selector);\n            if (rule) {\n                // The rule exists: update it.\n                if (params.toggle === 'true' && rule.style.getPropertyValue(params.cssProperty) === value) {\n                    rule.style.removeProperty(params.cssProperty);\n                } else {\n                    // Convert the style to css text and add the new style (the\n                    // `style` property is readonly, we can only edit\n                    // `cssText`).\n                    const cssTexts = [];\n                    for (const style of rule.style) {\n                        const ownPriority = rule.style.getPropertyPriority(style) ? ' !important' : '';\n                        if (style !== params.cssProperty) {\n                            cssTexts.push(`${style}: ${rule.style[style]}${ownPriority};`);\n                        }\n                    }\n                    cssTexts.push(`${params.cssProperty}: ${value}${priority};`);\n                    rule.style.cssText = cssTexts.join('\\n'); // Apply the new css text.\n                }\n            } else {\n                // The rule doesn't exist: create it.\n                this.styleSheet.insertRule(`${selector} {\n                    ${params.cssProperty}: ${value}${priority};\n                }`);\n            }\n        }\n        this._commitCss();\n    },\n    /**\n     * Option method to change the size of buttons.\n     *\n     * @see BTN_SIZE_STYLES\n     * @param {boolean|string} previewMode\n     * @param {string} widgetValue ('btn-sm'|'btn-md'|'btn-lg'|''|undefined)\n     * @param {Object} params\n     * @returns {Promise|undefined}\n     */\n     applyButtonSize(previewMode, widgetValue, params) {\n        for (const [styleName, styleValue] of Object.entries(BTN_SIZE_STYLES[widgetValue || params.activeValue || DEFAULT_BUTTON_SIZE])) {\n            if (styleValue) {\n                this.customizeCssProperty(previewMode, styleValue, Object.assign({}, params, { cssProperty: styleName }));\n            } else {\n                // If the value is falsy, remove the property.\n                for (const selector of this._getSelectors(params.selectorText)) {\n                    const rule = this._getRule(selector);\n                    if (rule) {\n                        rule.style.removeProperty(styleName);\n                    }\n                }\n            }\n        }\n        this._commitCss();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Apply the stylesheet's css text to the style element that will be saved.\n     */\n    _commitCss() {\n        const cssTexts = [];\n        for (const rule of this.styleSheet.cssRules || this.styleSheet.rules) {\n            cssTexts.push(rule.cssText);\n        }\n        this.styleElement.textContent = cssTexts.join('\\n');\n        // Flush the rules cache for convert_inline, to make sure they are\n        // recomputed to account for the change.\n        this.options.wysiwyg._rulesCache = undefined;\n    },\n    /**\n     * @override\n     */\n    async _computeWidgetState(methodName, params) {\n        const res = await this._super(...arguments);\n        if (res === undefined) {\n            switch (methodName) {\n                case 'applyButtonSize':\n                case 'customizeCssProperty': {\n                    if (!params.selectorText) {\n                        return;\n                    }\n                    // Here we parse the selector in order to create a matching\n                    // element that we inject into the DOM so we can retrieve\n                    // its computed style. We then remove the element from the\n                    // DOM, no harm, no foul.\n                    const firstSelector = params.selectorText.split(',')[0].replace(CSS_PREFIX, '').trim();\n                    const classes = firstSelector.replace(/:not\\([^\\)]*\\)/g, '').match(/\\.([\\w\\d-_]+)/g) || [];\n                    const fakeElement = document.createElement(firstSelector.split(/[\\.:, ]/)[0]);\n                    for (const className of classes) {\n                        fakeElement.classList.toggle(className.replace('.', ''), true);\n                    }\n                    this.$layout.find(CSS_PREFIX).prepend(fakeElement);\n                    let res;\n                    if (methodName === 'applyButtonSize') {\n                        // Match a button size by its padding value.\n                        const padding = getComputedStyle(fakeElement).padding;\n                        const classIndex = Object.values(BTN_SIZE_STYLES).findIndex(style => style.padding === padding);\n                        res = classIndex >= 0 ? Object.keys(BTN_SIZE_STYLES)[classIndex] : DEFAULT_BUTTON_SIZE;\n                    } else {\n                        fakeElement.style.display = 'none'; // Needed to get width in %.\n                        res = getComputedStyle(fakeElement)[params.cssProperty || 'font-family'];\n                        if (params.possibleValues && params.possibleValues[1] === FONT_FAMILIES[0]) {\n                            // For font-family, we need to normalize it so it\n                            // matches an option value.\n                            res = normalizeFontFamily(res);\n                        }\n                        if (params.cssProperty === 'font-weight') {\n                            res = parseInt(res) >= 600 ? 'bolder' : '';\n                        } else if (res === 'auto') {\n                            res = '100%';\n                        }\n                    }\n                    fakeElement.remove();\n                    return res;\n                }\n                case 'applyButtonSize':\n                    // Match a button size by its padding value.\n                    const rule = this._getRule(this._getSelectors(params.selectorText)[0]);\n                    if (rule) {\n                        const classIndex = Object.values(BTN_SIZE_STYLES).findIndex(style => style.padding === rule.style.padding);\n                        return classIndex >= 0 ? Object.keys(BTN_SIZE_STYLES)[classIndex] : DEFAULT_BUTTON_SIZE;\n                    } else {\n                        return DEFAULT_BUTTON_SIZE;\n                    }\n            }\n        } else {\n            return res;\n        }\n    },\n    /**\n     * Take a CSS selector and split it into separate selectors, all prefixed\n     * with the `CSS_PREFIX`. Return them as an array.\n     *\n     * @see CSS_PREFIX\n     * @param {string} selectorText\n     * @returns {string[]}\n     */\n    _getSelectors(selectorText) {\n        return selectorText.split(',').map(t => `${t.startsWith(CSS_PREFIX) ? '' : CSS_PREFIX + ' '}${t.trim()}`.trim());;\n    },\n    /**\n     * Take a CSS selector and find its matching rule in the mailing's custom\n     * stylesheet, if it exists.\n     *\n     * @param {string} selectorText\n     * @returns {CSSStyleRule|undefined}\n     */\n    _getRule(selectorText) {\n        return [...(this.styleSheet.cssRules || this.styleSheet.rules)].find(rule => rule.selectorText === selectorText);\n    },\n});\n", "/** @odoo-module **/\n\nimport options from \"@web_editor/js/editor/snippets.options\";\n\noptions.registry.MasonryLayout = options.registry.SelectTemplate.extend({\n    /**\n     * @constructor\n     */\n    init() {\n        this._super(...arguments);\n        this.containerSelector = '> .container, > .container-fluid, > .o_container_small';\n        this.selectTemplateWidgetName = 'masonry_template_opt';\n    },\n});\n", "/** @odoo-module **/\n\nimport options from \"@web_editor/js/editor/snippets.options\";\n\noptions.registry.MediaItemLayout = options.Class.extend({\n\n    //--------------------------------------------------------------------------\n    // Options\n    //--------------------------------------------------------------------------\n\n    /**\n     * Change the media item layout.\n     *\n     * @see this.selectClass for parameters\n     */\n    layout: function (previewMode, widgetValue, params) {\n        const $image = this.$target.find('.s_media_list_img_wrapper');\n        const $content = this.$target.find('.s_media_list_body');\n\n        for (const possibleValue of params.possibleValues) {\n            $image.removeClass(`col-lg-${possibleValue}`);\n            $content.removeClass(`col-lg-${12 - possibleValue}`);\n        }\n        $image.addClass(`col-lg-${widgetValue}`);\n        $content.addClass(`col-lg-${12 - widgetValue}`);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _computeWidgetState(methodName, params) {\n        switch (methodName) {\n            case 'layout': {\n                const $image = this.$target.find('.s_media_list_img_wrapper');\n                for (const possibleValue of params.possibleValues) {\n                    if ($image.hasClass(`col-lg-${possibleValue}`)) {\n                        return possibleValue;\n                    }\n                }\n            }\n        }\n        return this._super(...arguments);\n    },\n});\n", "/** @odoo-module **/\n\nimport options from \"@web_editor/js/editor/snippets.options\";\n\noptions.registry.Showcase = options.Class.extend({\n    /**\n     * @override\n     */\n    onMove: function () {\n        const $showcaseCol = this.$target.parent().closest('.row > div');\n        const isLeftCol = $showcaseCol.index() <= 0;\n        const $title = this.$target.children('.s_showcase_title');\n        $title.toggleClass('flex-lg-row-reverse', isLeftCol);\n        $showcaseCol.find('.s_showcase_icon.ms-3').removeClass('ms-3').addClass('ms-lg-3'); // For compatibility with old version\n        $title.find('.s_showcase_icon').toggleClass('me-lg-0 ms-lg-3', isLeftCol);\n    },\n});\n", "/** @odoo-module **/\n\nimport { MediaDialog } from \"@web_editor/components/media_dialog/media_dialog\";\nimport options from \"@web_editor/js/editor/snippets.options\";\n\noptions.registry.Rating = options.Class.extend({\n    /**\n     * @override\n     */\n    start: function () {\n        this.iconType = this.$target[0].dataset.icon;\n        this.faClassActiveCustomIcons = this.$target[0].dataset.activeCustomIcon || '';\n        this.faClassInactiveCustomIcons = this.$target[0].dataset.inactiveCustomIcon || '';\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Options\n    //--------------------------------------------------------------------------\n\n    /**\n     * Displays the selected icon type.\n     *\n     * @see this.selectClass for parameters\n     */\n    setIcons: function (previewMode, widgetValue, params) {\n        this.iconType = widgetValue;\n        this._renderIcons();\n        this.$target[0].dataset.icon = widgetValue;\n        delete this.$target[0].dataset.activeCustomIcon;\n        delete this.$target[0].dataset.inactiveCustomIcon;\n    },\n    /**\n     * Allows to select a font awesome icon with media dialog.\n     *\n     * @see this.selectClass for parameters\n     */\n    customIcon: async function (previewMode, widgetValue, params) {\n        const media = document.createElement('i');\n        media.className = params.customActiveIcon === 'true' ? this.faClassActiveCustomIcons : this.faClassInactiveCustomIcons;\n        this.call(\"dialog\", \"add\", MediaDialog, {\n            noImages: true,\n            noDocuments: true,\n            noVideos: true,\n            media,\n            save: icon => {\n                const customClass = icon.className;\n                const $activeIcons = this.$target.find('.s_rating_active_icons > i');\n                const $inactiveIcons = this.$target.find('.s_rating_inactive_icons > i');\n                const $icons = params.customActiveIcon === 'true' ? $activeIcons : $inactiveIcons;\n                $icons.removeClass().addClass(customClass);\n                this.faClassActiveCustomIcons = $activeIcons.length > 0 ? $activeIcons.attr('class') : customClass;\n                this.faClassInactiveCustomIcons = $inactiveIcons.length > 0 ? $inactiveIcons.attr('class') : customClass;\n                this.$target[0].dataset.activeCustomIcon = this.faClassActiveCustomIcons;\n                this.$target[0].dataset.inactiveCustomIcon = this.faClassInactiveCustomIcons;\n                this.$target[0].dataset.icon = 'custom';\n                this.iconType = 'custom';\n            }\n        });\n    },\n    /**\n     * Sets the number of active icons.\n     *\n     * @see this.selectClass for parameters\n     */\n    activeIconsNumber: function (previewMode, widgetValue, params) {\n        this.nbActiveIcons = parseInt(widgetValue);\n        this._createIcons();\n    },\n    /**\n     * Sets the total number of icons.\n     *\n     * @see this.selectClass for parameters\n     */\n    totalIconsNumber: function (previewMode, widgetValue, params) {\n        this.nbTotalIcons = Math.max(parseInt(widgetValue), 1);\n        this._createIcons();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _computeWidgetState: function (methodName, params) {\n        switch (methodName) {\n            case 'setIcons': {\n                return this.$target[0].dataset.icon;\n            }\n            case 'activeIconsNumber': {\n                this.nbActiveIcons = this.$target.find('.s_rating_active_icons > i').length;\n                return this.nbActiveIcons;\n            }\n            case 'totalIconsNumber': {\n                this.nbTotalIcons = this.$target.find('.s_rating_icons i').length;\n                return this.nbTotalIcons;\n            }\n        }\n        return this._super(...arguments);\n    },\n    /**\n     * Creates the icons.\n     *\n     * @private\n     */\n    _createIcons: function () {\n        const $activeIcons = this.$target.find('.s_rating_active_icons');\n        const $inactiveIcons = this.$target.find('.s_rating_inactive_icons');\n        this.$target.find('.s_rating_icons i').remove();\n        for (let i = 0; i < this.nbTotalIcons; i++) {\n            if (i < this.nbActiveIcons) {\n                $activeIcons.append('<i></i> ');\n            } else {\n                $inactiveIcons.append('<i></i> ');\n            }\n        }\n        this._renderIcons();\n    },\n    /**\n     * Renders icons with selected fonts.\n     *\n     * @private\n     */\n    _renderIcons: function () {\n        const icons = {\n            'fa-star': 'fa-star-o',\n            'fa-thumbs-up': 'fa-thumbs-o-up',\n            'fa-circle': 'fa-circle-o',\n            'fa-square': 'fa-square-o',\n            'fa-heart': 'fa-heart-o'\n        };\n        const faClassActiveIcons = (this.iconType === \"custom\") ? this.faClassActiveCustomIcons : 'fa ' + this.iconType;\n        const faClassInactiveIcons = (this.iconType === \"custom\") ? this.faClassInactiveCustomIcons : 'fa ' + icons[this.iconType];\n        const $activeIcons = this.$target.find('.s_rating_active_icons > i');\n        const $inactiveIcons = this.$target.find('.s_rating_inactive_icons > i');\n        $activeIcons.removeClass().addClass(faClassActiveIcons);\n        $inactiveIcons.removeClass().addClass(faClassInactiveIcons);\n    },\n});\n"], "file": "/web/assets/6c504fc/mass_mailing.assets_wysiwyg.js", "sourceRoot": "../../../"}