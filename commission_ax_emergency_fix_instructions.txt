# EMERGENCY FIX: commission_ax/models/purchase_order.py
# Make computed fields stored to fix email template access

# REPLACE the commission field definitions with stored versions:

agent1_partner_id = fields.Many2one(
    'res.partner',
    string="Agent 1",
    compute="_compute_commission_fields",
    store=True,  # CRITICAL: Changed to True
    help="Agent 1 from the origin sale order"
)

agent2_partner_id = fields.Many2one(
    'res.partner',
    string="Agent 2", 
    compute="_compute_commission_fields",
    store=True,  # CRITICAL: Changed to True
    help="Agent 2 from the origin sale order"
)

project_id = fields.Many2one(
    'project.project',
    string="Project",
    compute="_compute_commission_fields",
    store=True,  # CRITICAL: Changed to True
    help="Project from the origin sale order"
)

unit_id = fields.Many2one(
    'product.product',
    string="Unit",
    compute="_compute_commission_fields", 
    store=True,  # CRITICAL: Changed to True
    help="Unit from the origin sale order"
)

# UPDATE the compute method dependencies:
@api.depends('origin_so_id', 'origin_so_id.agent1_partner_id', 'origin_so_id.agent2_partner_id', 'origin_so_id.project_id', 'origin_so_id.unit_id')
def _compute_commission_fields(self):
    """Compute commission-related fields from origin sale order."""
    for po in self:
        if po.origin_so_id:
            po.agent1_partner_id = po.origin_so_id.agent1_partner_id if hasattr(po.origin_so_id, 'agent1_partner_id') else False
            po.agent2_partner_id = po.origin_so_id.agent2_partner_id if hasattr(po.origin_so_id, 'agent2_partner_id') else False
            po.project_id = po.origin_so_id.project_id if hasattr(po.origin_so_id, 'project_id') else False
            po.unit_id = po.origin_so_id.unit_id if hasattr(po.origin_so_id, 'unit_id') else False
        else:
            po.agent1_partner_id = False
            po.agent2_partner_id = False
            po.project_id = False
            po.unit_id = False
