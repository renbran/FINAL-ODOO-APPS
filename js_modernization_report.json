{
  "summary": {
    "total_files_scanned": 32,
    "files_needing_attention": 32,
    "critical_files": 19,
    "high_priority_files": 2,
    "medium_priority_files": 11,
    "low_priority_files": 0
  },
  "files_by_priority": {
    "critical": [
      {
        "file": "comprehensive_greetings\\static\\src\\js\\components\\greeting_card_widget.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "comprehensive_greetings\\static\\src\\js\\components\\greeting_dashboard.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "hrms_dashboard\\static\\src\\js\\hrms_dashboard.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 46,
            "content": "var empDetails = await this.orm.call('hr.employee', 'get_user_employee_details', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 50,
            "content": "var res = await this.orm.call('hr.employee', 'get_upcoming', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 63,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 63,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 73,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 73,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 74,
            "content": "var w = 200;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 75,
            "content": "var h = 200;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 76,
            "content": "var r = h/2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 77,
            "content": "var elem = this.emp_graph.el",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 78,
            "content": "var colors = ['#70cac1', '#659d4e', '#208cc2', '#4d6cb1', '#584999', '#8e559e', '#cf3650', '#f65337', '#fe7139',",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 80,
            "content": "var color = d3.scale.ordinal().range(colors);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 81,
            "content": "var data = await this.orm.call('hr.employee', 'get_dept_employee', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 83,
            "content": "var segColor = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 84,
            "content": "var vis = d3.select(elem).append(\"svg:svg\").data([data]).attr(\"width\", w).attr(\"height\", h).append(\"svg:g\").attr(\"transform\", \"translate(\" + r + \",\" + r + \")\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 85,
            "content": "var pie = d3.layout.pie().value(function(d){return d.value;});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 86,
            "content": "var arc = d3.svg.arc().outerRadius(r);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 87,
            "content": "var arcs = vis.selectAll(\"g.slice\").data(pie).enter().append(\"svg:g\").attr(\"class\", \"slice\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 95,
            "content": "var legend = d3.select(elem).append(\"table\").attr('class','legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 97,
            "content": "var tr = legend.append(\"tbody\").selectAll(\"tr\").data(data).enter().append(\"tr\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 110,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 110,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 112,
            "content": "var colors = ['#70cac1', '#659d4e', '#208cc2', '#4d6cb1', '#584999', '#8e559e', '#cf3650', '#f65337', '#fe7139',",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 114,
            "content": "var color = d3.scale.ordinal().range(colors);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 115,
            "content": "var data = await this.orm.call('hr.employee', 'get_department_leave', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 117,
            "content": "var fData = data[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 118,
            "content": "var dept = data[1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 119,
            "content": "//            var id = self.$('.leave_graph')[0];",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 120,
            "content": "var id = this.leave_graph.el",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 121,
            "content": "var barColor = '#ff618a';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 124,
            "content": "var total = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 132,
            "content": "var hG = {},    hGDim = {t: 60, r: 0, b: 30, l: 0};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 136,
            "content": "var hGsvg = d3.select(id).append(\"svg\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 141,
            "content": "var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 148,
            "content": "var y = d3.scale.linear().range([hGDim.h, 0])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 151,
            "content": "var bars = hGsvg.selectAll(\".bar\").data(fD).enter()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 169,
            "content": "var st = fData.filter(function(s){ return s.l_month == d[0];})[0],",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 185,
            "content": "var bars = hGsvg.selectAll(\".bar\").data(nD);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 200,
            "content": "var pC ={},    pieDim ={w:250, h: 250};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 203,
            "content": "var piesvg = d3.select(id).append(\"svg\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 207,
            "content": "var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 209,
            "content": "var pie = d3.layout.pie().sort(null).value(function(d) { return d.leave; });",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 235,
            "content": "var i = d3.interpolate(this._current, a);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 243,
            "content": "var leg = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 245,
            "content": "var legend = d3.select(id).append(\"table\").attr('class','legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 247,
            "content": "var tr = legend.append(\"tbody\").selectAll(\"tr\").data(lD).enter().append(\"tr\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 263,
            "content": "var l = legend.select(\"tbody\").selectAll(\"tr\").data(nD);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 270,
            "content": "var perc = (d.leave/d3.sum(aD.map(function(v){ return v.leave; })));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 281,
            "content": "var tF = dept.map(function(d){",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 285,
            "content": "var sF = fData.map(function(d){return [d.l_month,d.total];});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 286,
            "content": "var hG = histoGram(sF); // create the histogram.",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 287,
            "content": "var pC = pieChart(tF); // create the pie-chart.",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 288,
            "content": "var leg = legend(tF);  // create the legend.",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 292,
            "content": "//var elem = this.$('.join_resign_trend');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 293,
            "content": "var elem = this.join_resign_trend.el",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 294,
            "content": "var colors = ['#70cac1', '#659d4e', '#208cc2', '#4d6cb1', '#584999', '#8e559e', '#cf3650', '#f65337', '#fe7139',",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 296,
            "content": "var color = d3.scale.ordinal().range(colors);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 297,
            "content": "var data = await this.orm.call('hr.employee', 'join_resign_trends', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 305,
            "content": "var margin = {top: 30, right: 10, bottom: 30, left: 30},",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 309,
            "content": "var x = d3.scale.ordinal()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 311,
            "content": "var y = d3.scale.linear()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 314,
            "content": "var xAxis = d3.svg.axis().scale(x)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 316,
            "content": "var yAxis = d3.svg.axis().scale(y)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 320,
            "content": "var svg = d3.select(elem).append(\"svg\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 334,
            "content": "var line = d3.svg.line()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 358,
            "content": "var legend = d3.select(elem).append(\"div\").attr('class','legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 359,
            "content": "var tr = legend.selectAll(\"div\").data(data).enter().append(\"div\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 367,
            "content": "//var elem = this.$('.attrition_rate');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 368,
            "content": "var elem = this.attrition_rate.el",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 369,
            "content": "var colors = ['#70cac1', '#659d4e', '#208cc2', '#4d6cb1', '#584999', '#8e559e', '#cf3650', '#f65337', '#fe7139',",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 371,
            "content": "var color = d3.scale.ordinal().range(colors);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 372,
            "content": "var data = await this.orm.call('hr.employee', 'get_attrition_rate', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 374,
            "content": "var margin = {top: 30, right: 20, bottom: 30, left: 80},",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 378,
            "content": "var x = d3.scale.ordinal()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 380,
            "content": "var y = d3.scale.linear()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 383,
            "content": "var xAxis = d3.svg.axis().scale(x)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 385,
            "content": "var yAxis = d3.svg.axis().scale(y)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 387,
            "content": "var valueline = d3.svg.line()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 390,
            "content": "var svg = d3.select(elem).append(\"svg\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 423,
            "content": "var xPosition = d3.mouse(this)[0] - 15;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 424,
            "content": "var yPosition = d3.mouse(this)[1] - 25;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 428,
            "content": "var tooltip = svg.append(\"g\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 445,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 445,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 446,
            "content": "var data = await this.orm.call('hr.employee', 'employee_leave_trend', [])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 448,
            "content": "//            var elem = self.$('.leave_trend');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 449,
            "content": "var elem = self.leave_trend.el",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 450,
            "content": "var margin = {top: 30, right: 20, bottom: 30, left: 80},",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 454,
            "content": "var x = d3.scale.ordinal()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 456,
            "content": "var y = d3.scale.linear()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 459,
            "content": "var xAxis = d3.svg.axis().scale(x)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 461,
            "content": "var yAxis = d3.svg.axis().scale(y)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 463,
            "content": "var valueline = d3.svg.line()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 466,
            "content": "var svg = d3.select(elem).append(\"svg\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 499,
            "content": "var xPosition = d3.mouse(this)[0] - 15;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 500,
            "content": "var yPosition = d3.mouse(this)[1] - 25;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 504,
            "content": "var tooltip = svg.append(\"g\")",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 556,
            "content": "var date = new Date();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 568,
            "content": "var date = new Date();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 569,
            "content": "var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 570,
            "content": "var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 571,
            "content": "var fday = firstDay.toJSON().slice(0,10).replace(/-/g,'-');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 572,
            "content": "var lday = lastDay.toJSON().slice(0,10).replace(/-/g,'-');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 624,
            "content": "var today = new Date();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 625,
            "content": "var dd = String(today.getDate()).padStart(2, '0');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 626,
            "content": "var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 627,
            "content": "var yyyy = today.getFullYear();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 651,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 651,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 652,
            "content": "var result = await this.orm.call('hr.employee', 'attendance_manual',[[this.state.login_employee.id]])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 654,
            "content": "var attendance_state = this.state.login_employee.attendance_state;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 655,
            "content": "var message = ''",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 112,
        "severity_counts": {
          "low": 107,
          "high": 5
        }
      },
      {
        "file": "ks_dynamic_financial_report\\static\\src\\js\\ks_dynamic_financial_report.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 130,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 219,
            "content": "var ks_result = this.ks_result",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 224,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 224,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 227,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 239,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 254,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 268,
            "content": "var new_date_format = 'yyyy-M-d';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 306,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 306,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 309,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 330,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 330,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 333,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 347,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 347,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 350,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 374,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 374,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 377,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 391,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 391,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 394,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 424,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 424,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 436,
            "content": "var currency_id = ksFormatConfigurations.currency_id;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 438,
            "content": "var without_sign = formatMonetary(Math.abs(amount), {}, ksFormatConfigurations);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 452,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 452,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 455,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 470,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 470,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 477,
            "content": "var pdf_data = await this.orm.call(\"ks.dynamic.financial.reports\", 'ks_get_dynamic_fin_info', [this.props.action.context.id, this.ks_df_report_opt], {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 480,
            "content": "var report_name = self.ksGetReportName();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 481,
            "content": "var action = self.ksGetReportAction(report_name, data);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 483,
            "content": "var pdf_report = await this.rpc(\"/dfr/pdf/download\", {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 491,
            "content": "var filename = self.props.action.name;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 501,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 501,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 511,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 511,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 534,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 534,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 538,
            "content": "var ks_report_action = self.ksGetReportActionName();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 549,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 549,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 572,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 572,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 574,
            "content": "var new_date_format = 'yyyy-M-d';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 602,
            "content": "var self = this",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 602,
            "content": "var self = this",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 609,
            "content": "var error = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 610,
            "content": "var new_date_format = 'yyyy-M-d';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 613,
            "content": "var ks_start_date = ''",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 614,
            "content": "var ks_end_date = ''",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 661,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 725,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 725,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 726,
            "content": "var lines = await this.orm.call(\"ks.dynamic.financial.reports\", 'ks_process_aging_data', [this.props.action.context.id, self.ks_df_report_opt, offset, partner_id])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 731,
            "content": "var ev = event.currentTarget",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 737,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 737,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 739,
            "content": "var offset = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 748,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 748,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 752,
            "content": "$(event.currentTarget).parent().parent().find(\".ks_new_text\")[0].innerText = offset+1;",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 755,
            "content": "var offset = parseInt($(ev).parent().attr('offset'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 755,
            "content": "var offset = parseInt($(ev).parent().attr('offset'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 757,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 757,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 765,
            "content": "$(event.currentTarget).parent().parent().find(\".ks_new_text\")[0].innerText = offset+1;",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 767,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 767,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 769,
            "content": "self.ksGetAgedReportDetailedInfo(offset, partner_id).then(function (datas) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 770,
            "content": "var count = datas[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 771,
            "content": "var offset = datas[1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 772,
            "content": "var account_data = datas[2];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 773,
            "content": "var period_list = datas[3];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 775,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 789,
            "content": "if ($(event.target).hasClass('ks_pr-py-mline')) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 790,
            "content": "$(ev).next('div').find('td .ks_py-mline-table-div').remove();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 799,
            "content": "$(ev).parent().parent().next('div').replaceWith(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 801,
            "content": "$(ev).next('tr').find('td .ks_py-mline-table-div').remove();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 810,
            "content": "$(ev).next('tr').find('td ul').after(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 814,
            "content": "$(ev).next('tr').find('td ul li:first a').css({",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 834,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 916,
            "content": "var paginationlimit=10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 917,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 917,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 918,
            "content": "var ks_offset =  parseInt(e.target.parentElement.dataset.prevOffset) - (paginationlimit+1) ;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 919,
            "content": "var ks_intial_count = e.target.parentElement.dataset.next_offset;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 923,
            "content": "this.ks_df_report_opt,{ks_intial_count: ks_intial_count,offset: ks_offset}],{context:this.props.action.context}).then(function (result) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "jquery_usage",
            "line": 930,
            "content": "$(e.target).addClass('ks_event_offer_list');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 944,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 944,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 945,
            "content": "var ev = e.target;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 946,
            "content": "var ks_intial_count = e.target.parentElement.parentElement.prevOffset;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 947,
            "content": "var ks_offset = e.target.parentElement.dataset.next_offset;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 950,
            "content": "this.ks_df_report_opt,{ks_intial_count: ks_intial_count,offset: ks_offset}],{context:this.props.action.context}).then(function (result) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "jquery_usage",
            "line": 956,
            "content": "$(e.target).addClass('ks_event_offer_list')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 967,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 967,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 968,
            "content": "var lines = await this.orm.call(\"ks.dynamic.financial.reports\", 'ks_consolidate_journals_details', [this.props.action.context.id, offset, ks_journal_id, self.ks_df_report_opt])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 975,
            "content": "var ev = event.currentTarget",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 979,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 979,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 980,
            "content": "var ks_journal_id = $(ev).data('bsJournalId');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 980,
            "content": "var ks_journal_id = $(ev).data('bsJournalId');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 981,
            "content": "var offset = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 982,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 982,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 984,
            "content": "self.ksGetConsolidateLinesByPage(offset, ks_journal_id).then(function (datas) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 985,
            "content": "var offset = datas[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 986,
            "content": "var account_data = datas[1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 988,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 997,
            "content": "$(ev).next('tr').find('td .ks_py-mline-table-div').remove();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1004,
            "content": "$(ev).next('tr').find('td ul').after(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1005,
            "content": "$(ev).next('tr').find('td ul li:first a').css({",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1017,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1017,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1018,
            "content": "var lines = await this.orm.call(\"ks.dynamic.financial.reports\", 'ks_build_detailed_gen_move_lines', [this.props.action.context.id, offset, account_id, self.ks_df_report_opt])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1025,
            "content": "var ev = event.currentTarget",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1028,
            "content": "var offset = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1037,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1037,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1041,
            "content": "$(event.currentTarget).parent().parent().find(\".ks_new_text\")[0].innerText = offset+1;",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1046,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1046,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1054,
            "content": "$(event.currentTarget).parent().parent().find(\".ks_new_text\")[0].innerText = offset+1;",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1060,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1060,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1061,
            "content": "var account_id = $(ev).data('bsAccountId');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1061,
            "content": "var account_id = $(ev).data('bsAccountId');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1063,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1063,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1064,
            "content": "if (td.length == 1 || $(event.target).hasClass('ks_py-mline-page')) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "function_callbacks",
            "line": 1065,
            "content": "self.ksGetGlLineByPage(offset, account_id).then(function (datas) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 1067,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1080,
            "content": "if ($(event.target).hasClass('ks_py-mline-page')) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1089,
            "content": "$(event.target).parent().parent().next('div').replaceWith(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1090,
            "content": "$(event.target).addClass('ks_high_light_page')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1092,
            "content": "$(ev).next('tr').find('td .ks_py-mline-table-div').remove();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1100,
            "content": "$(ev).next('tr').find('td ul').after(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1101,
            "content": "$(event.currentTarget).next('tr').find('td ul li:first a').addClass(\"ks_high_light_page\")",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1105,
            "content": "$(ev).next('tr').find('td ul li:first a').css({",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1117,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1117,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1118,
            "content": "var lines = await this.orm.call(\"ks.dynamic.financial.reports\", 'ks_build_detailed_move_lines', [this.props.action.context.id, offset, account_id, self.ks_df_report_opt, self.$ks_searchview_buttons.find('.ks_search_account_filter').length])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1126,
            "content": "var ev = event.currentTarget",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1130,
            "content": "var offset = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1131,
            "content": "if ($(event.target).hasClass('ks_load_previous_new')){",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1137,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1137,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1141,
            "content": "$(event.currentTarget).parent().parent().find(\".ks_new_text\")[0].innerText = offset+1;",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1143,
            "content": "else if ($(event.target).hasClass('ks_load_next_new')){",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1146,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1146,
            "content": "var total_pages = parseInt($(event.currentTarget).parent().attr('total_pages'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1153,
            "content": "$(event.currentTarget).parent().parent().find(\".ks_new_text\")[0].innerText = offset+1;",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1157,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1157,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1158,
            "content": "var account_id = $(ev).data('bsAccountId');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1158,
            "content": "var account_id = $(ev).data('bsAccountId');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1159,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1159,
            "content": "var td = $(ev).next('tr').find('td');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1160,
            "content": "if (td.length == 1 || $(event.target).hasClass('ks_py-plline-page')) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "function_callbacks",
            "line": 1161,
            "content": "self.ksGetPlLinesByPage(offset, account_id).then(function (datas) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 1163,
            "content": "var ksFormatConfigurations = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1177,
            "content": "if ($(event.target).hasClass('ks_py-plline-page')) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1178,
            "content": "$(event.target).next('tr').find('td .ks_py-mline-table-div').remove();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1187,
            "content": "$(event.target).parent().parent().next('div').replaceWith(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1189,
            "content": "$(event.currentTarget).next('tr').find('td .ks_py-mline-table-div').remove();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1199,
            "content": "$(ev).next('tr').find('td ul').after(content)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1202,
            "content": "$(ev).next('tr').find('td ul li:first a').css({",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1212,
            "content": "var self=this",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1212,
            "content": "var self=this",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1213,
            "content": "var option_value = bsFilter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1219,
            "content": "var ks_options_enable = false",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1221,
            "content": "var ks_options_enable = true",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1226,
            "content": "var ks_temp_arr = []",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1227,
            "content": "var ks_options = $(event.currentTarget)",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1227,
            "content": "var ks_options = $(event.currentTarget)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1230,
            "content": "ks_temp_arr.push($(ks_options[i]).hasClass('selected'))",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1240,
            "content": "var ks_date_range_change = {}",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 1266,
            "content": "var self = this",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1266,
            "content": "var self = this",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1281,
            "content": "var error = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1282,
            "content": "var number_period = $(event.currentTarget).parent().parent().find('input[name=\"periods_number\"]')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1282,
            "content": "var number_period = $(event.currentTarget).parent().parent().find('input[name=\"periods_number\"]')",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1288,
            "content": "var ks_start_date = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1289,
            "content": "var ks_end_date = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1328,
            "content": "var option_value = bsFilter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1329,
            "content": "var option_member_ids = bsMemberIds || [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1330,
            "content": "var is_selected = $(this).hasClass('selected');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1330,
            "content": "var is_selected = $(this).hasClass('selected');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1340,
            "content": "var ks_input = event.currentTarget.value;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1341,
            "content": "var ks_filter = ks_input.toUpperCase();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1342,
            "content": "var ks_accounts = $(event.currentTarget.parentElement).find('.js_account_report_choice_filter');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1342,
            "content": "var ks_accounts = $(event.currentTarget.parentElement).find('.js_account_report_choice_filter');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1344,
            "content": "var txtValue = ks_accounts[i].textContent || ks_accounts[i].innerText;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1346,
            "content": "$($(event.currentTarget.parentElement).find('.js_account_report_choice_filter')[i]).removeClass('ks_d_none')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1348,
            "content": "$($(event.currentTarget.parentElement).find('.js_account_report_choice_filter')[i]).addClass('ks_d_none')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1354,
            "content": "var self = this",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1354,
            "content": "var self = this",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1361,
            "content": "var option_value = bsFilter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1362,
            "content": "var option_id = bsId;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1365,
            "content": "var ks_options_enable = true",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1367,
            "content": "var ks_temp_arr = []",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1368,
            "content": "var ks_options = $(event.currentTarget).find('a')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1368,
            "content": "var ks_options = $(event.currentTarget).find('a')",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1371,
            "content": "ks_temp_arr.push($(ks_options[i]).hasClass('selected'))",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_self_this",
            "line": 1411,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1411,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1412,
            "content": "var action = $(event.target).attr('action');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1412,
            "content": "var action = $(event.target).attr('action');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1413,
            "content": "var id = $(event.target).parents('td').data('bsAccountId') || $(event.target).parents('td').data('bsMoveId');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1413,
            "content": "var id = $(event.target).parents('td').data('bsAccountId') || $(event.target).parents('td').data('bsMoveId');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1414,
            "content": "var params = $(event.target).data();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 1414,
            "content": "var params = $(event.target).data();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 1457,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1457,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 1470,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 1470,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 1495,
            "content": "$(document).ready(function() {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 1496,
            "content": "$(document).on('click', 'header .o_main_navbar', function(evt) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 224,
        "severity_counts": {
          "low": 187,
          "high": 31,
          "medium": 6
        }
      },
      {
        "file": "odoo_accounting_dashboard\\static\\src\\js\\accounting_dashboard.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\Animated.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\apexcharts.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          },
          {
            "type": "var_declarations",
            "line": 36,
            "content": "var descriptor = props[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 66,
            "content": "var keys = Object.keys(object);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 69,
            "content": "var symbols = Object.getOwnPropertySymbols(object);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 81,
            "content": "var source = arguments[i] != null ? arguments[i] : {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 160,
            "content": "var hasNativeReflectConstruct = _isNativeReflectConstruct();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 163,
            "content": "var Super = _getPrototypeOf(Derived),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 167,
            "content": "var NewTarget = _getPrototypeOf(this).constructor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 193,
            "content": "var n = Object.prototype.toString.call(o).slice(8, -1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 214,
            "content": "var Utils$1 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 222,
            "content": "var f = color.split(','),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 233,
            "content": "var f = parseInt(color.slice(1), 16),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 267,
            "content": "var i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 281,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 292,
            "content": "var output = Object(target);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 295,
            "content": "var _source = arguments[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 311,
            "content": "var output = Object.assign({}, target);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 332,
            "content": "var extendedArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 349,
            "content": "var cloneResult = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 362,
            "content": "var _cloneResult = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 404,
            "content": "var data = String(val).split(/[eE]/);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 406,
            "content": "var z = '',",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 432,
            "content": "var computedStyle = getComputedStyle(el, null);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 433,
            "content": "var elementHeight = el.clientHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 434,
            "content": "var elementWidth = el.clientWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 442,
            "content": "var rect = element.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 471,
            "content": "var hex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '#999999';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 472,
            "content": "var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.6;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 478,
            "content": "var h = hex.replace('#', '');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 507,
            "content": "var dotsArray = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 508,
            "content": "var angle = Math.PI * 2 / dataPointsLen;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 511,
            "content": "var curPos = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 522,
            "content": "var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 531,
            "content": "var escapeWith = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 532,
            "content": "var newStr = str.toString().slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 545,
            "content": "var k = new_index - arr.length + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 607,
            "content": "var ua = window.navigator.userAgent;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 608,
            "content": "var msie = ua.indexOf('MSIE ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 615,
            "content": "var trident = ua.indexOf('Trident/');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 619,
            "content": "var rv = ua.indexOf('rv:');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 623,
            "content": "var edge = ua.indexOf('Edge/');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 644,
            "content": "var Animations = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 656,
            "content": "var easing;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 658,
            "content": "var userDefinedEasing = this.w.config.chart.animations.easing;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 688,
            "content": "var s = 1.70158;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 689,
            "content": "var ret = (pos -= 1) * pos * ((s + 1) * pos + s) + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 699,
            "content": "var ret = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 791,
            "content": "var el = params.el,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 799,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 800,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 801,
            "content": "var delayFactor = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 818,
            "content": "var ele = d.el;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 825,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 841,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 843,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 853,
            "content": "var disableAnimationForCorrupPath = function disableAnimationForCorrupPath(path) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 901,
            "content": "var Filters = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 913,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 915,
            "content": "var filter = new window.SVG.Filter();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 929,
            "content": "var w = this.w; // revert shadow if it was there",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 940,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 942,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 943,
            "content": "var intensity = attrs.intensity;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 945,
            "content": "var filter = new window.SVG.Filter();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 947,
            "content": "var shadowAttr = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 971,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 973,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 974,
            "content": "var intensity = attrs.intensity;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 976,
            "content": "var filter = new window.SVG.Filter();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 978,
            "content": "var shadowAttr = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1000,
            "content": "var intensity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1030,
            "content": "var blur = attrs.blur,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1035,
            "content": "var shadowBlur = add.flood(Array.isArray(color) ? color[i] : color, opacity).composite(add.sourceAlpha, 'in').offset(left, top).gaussianBlur(blur).merge(add.source);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1043,
            "content": "var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1044,
            "content": "var top = attrs.top,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1050,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1060,
            "content": "var shadowBlur = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1083,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1088,
            "content": "var activeFilter = w.config.states.active.filter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1099,
            "content": "var setAttributes = function setAttributes(attrs) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1125,
            "content": "var Graphics = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1136,
            "content": "var lineColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '#a8a8a8';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1137,
            "content": "var dashArray = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1138,
            "content": "var strokeWidth = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1139,
            "content": "var strokeLineCap = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'butt';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1140,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1141,
            "content": "var line = w.globals.dom.Paper.line().attr({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1156,
            "content": "var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1157,
            "content": "var y1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1158,
            "content": "var x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1159,
            "content": "var y2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1160,
            "content": "var radius = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1161,
            "content": "var color = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '#fefefe';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1162,
            "content": "var opacity = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1163,
            "content": "var strokeWidth = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1164,
            "content": "var strokeColor = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1165,
            "content": "var strokeDashArray = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1166,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1167,
            "content": "var rect = w.globals.dom.Paper.rect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1187,
            "content": "var stroke = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#e1e1e1';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1188,
            "content": "var strokeWidth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1189,
            "content": "var fill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1190,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1191,
            "content": "var polygon = w.globals.dom.Paper.polygon(polygonString).attr({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1201,
            "content": "var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1202,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1204,
            "content": "var c = w.globals.dom.Paper.circle(radius * 2);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1215,
            "content": "var _ref$d = _ref.d,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1231,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1241,
            "content": "var p = w.globals.dom.Paper.path(d).attr({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1256,
            "content": "var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1257,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1258,
            "content": "var g = w.globals.dom.Paper.group();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1269,
            "content": "var move = ['M', x, y].join(' ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1275,
            "content": "var hORv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1276,
            "content": "var line = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1291,
            "content": "var curve = ['C', x1, y1, x2, y2, x, y].join(' ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1297,
            "content": "var curve = ['Q', x1, y1, x, y].join(' ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1303,
            "content": "var relative = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1304,
            "content": "var coord = 'A';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1306,
            "content": "var arc = [coord, rx, ry, axisRotation, largeArcFlag, sweepFlag, x, y].join(' ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1328,
            "content": "var j = _ref2.j,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1346,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1347,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1348,
            "content": "var anim = new Animations(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1349,
            "content": "var initialAnim = this.w.config.chart.animations.enabled;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1350,
            "content": "var dynamicAnim = initialAnim && this.w.config.chart.animations.dynamicAnimation.enabled;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1351,
            "content": "var d;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1352,
            "content": "var shouldAnimate = !!(initialAnim && !w.globals.resized || dynamicAnim && w.globals.dataChanged && w.globals.shouldAnimate);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1361,
            "content": "var strokeDashArrayOpt = w.config.stroke.dashArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1362,
            "content": "var strokeDashArray = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1370,
            "content": "var el = this.drawPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1394,
            "content": "var shadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1410,
            "content": "var defaultAnimateOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1442,
            "content": "var stroke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#a8a8a8';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1443,
            "content": "var strokeWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1444,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1445,
            "content": "var p = w.globals.dom.Paper.pattern(width, height, function (add) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1478,
            "content": "var size = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1479,
            "content": "var stops = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1480,
            "content": "var colorStops = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1481,
            "content": "var i = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1482,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1483,
            "content": "var g;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1494,
            "content": "var stop1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1495,
            "content": "var stop2 = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1496,
            "content": "var stop3 = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1497,
            "content": "var stop4 = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1506,
            "content": "var radial = !!(w.config.chart.type === 'donut' || w.config.chart.type === 'pie' || w.config.chart.type === 'polarArea' || w.config.chart.type === 'bubble');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1520,
            "content": "var gradientStops = Array.isArray(colorStops[i]) ? colorStops[i] : colorStops;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1538,
            "content": "var offx = w.globals.gridWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1539,
            "content": "var offy = w.globals.gridHeight / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1564,
            "content": "var x = _ref3.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1577,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1590,
            "content": "var elText;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1623,
            "content": "var size = opts.pSize || 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1624,
            "content": "var elPoint = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1627,
            "content": "var radius = opts.pRadius === undefined ? size / 2 : opts.pRadius;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1634,
            "content": "var nSize = size * 1.2 + radius;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1635,
            "content": "var p = this.drawRect(nSize, nSize, nSize, nSize, radius);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1673,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1674,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1675,
            "content": "var i = parseInt(path.node.getAttribute('index'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1676,
            "content": "var j = parseInt(path.node.getAttribute('j'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1700,
            "content": "var hoverFilter = w.config.states.hover.filter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1708,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1709,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1710,
            "content": "var i = parseInt(path.node.getAttribute('index'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1711,
            "content": "var j = parseInt(path.node.getAttribute('j'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1740,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1741,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1742,
            "content": "var i = parseInt(path.node.getAttribute('index'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1743,
            "content": "var j = parseInt(path.node.getAttribute('j'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1744,
            "content": "var selected = 'false';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1750,
            "content": "var index = w.globals.selectedDataPoints[i].indexOf(j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1756,
            "content": "var elPaths = w.globals.dom.Paper.select('.apexcharts-series path').members;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1757,
            "content": "var elCircles = w.globals.dom.Paper.select('.apexcharts-series circle, .apexcharts-series rect').members;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1759,
            "content": "var deSelect = function deSelect(els) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1781,
            "content": "var activeFilter = w.config.states.active.filter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1813,
            "content": "var coord = el.getBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1814,
            "content": "var x = coord.x + coord.width / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1815,
            "content": "var y = coord.y + coord.height / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1824,
            "content": "var useBBox = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1825,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1826,
            "content": "var virtualText = this.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1842,
            "content": "var rect = virtualText.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1894,
            "content": "var Helpers$4 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1905,
            "content": "var annoIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1906,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1909,
            "content": "var i = annoIndex !== null ? annoIndex : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1910,
            "content": "var xAnno = w.globals.dom.baseEl.querySelector(\".apexcharts-xaxis-annotations .apexcharts-xaxis-annotation-label[rel='\".concat(i, \"']\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1913,
            "content": "var xAnnoCoord = xAnno.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1922,
            "content": "var annoRotatingCenter = this.annoCtx.graphics.rotateAroundCenter(xAnno);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1923,
            "content": "var x = annoRotatingCenter.x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1924,
            "content": "var y = annoRotatingCenter.y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1932,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1934,
            "content": "var elGridRect = w.globals.dom.baseEl.querySelector('.apexcharts-grid').getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1935,
            "content": "var coords = annoEl.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1936,
            "content": "var pleft = anno.label.style.padding.left;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1937,
            "content": "var pright = anno.label.style.padding.right;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1938,
            "content": "var ptop = anno.label.style.padding.top;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1939,
            "content": "var pbottom = anno.label.style.padding.bottom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1948,
            "content": "var x1 = coords.left - elGridRect.left - pleft;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1949,
            "content": "var y1 = coords.top - elGridRect.top - ptop;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1950,
            "content": "var elRect = this.annoCtx.graphics.drawRect(x1 - w.globals.barPadForNumericAxis, y1, coords.width + pleft + pright, coords.height + ptop + pbottom, anno.label.borderRadius, anno.label.style.background, 1, anno.label.borderWidth, anno.label.borderColor, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1961,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1963,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1965,
            "content": "var add = function add(anno, i, type) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1966,
            "content": "var annoLabel = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-annotations .apexcharts-\").concat(type, \"-annotation-label[rel='\").concat(i, \"']\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1969,
            "content": "var parent = annoLabel.parentNode;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1971,
            "content": "var elRect = _this.addBackgroundToAnno(annoLabel, anno);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1992,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1993,
            "content": "var rX = x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 1999,
            "content": "var catIndex = w.globals.labels.indexOf(x);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2000,
            "content": "var xLabel = w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g text:nth-child(' + (catIndex + 1) + ')');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2013,
            "content": "var XAnnotations = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2025,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2026,
            "content": "var min = this.invertAxis ? w.globals.minY : w.globals.minX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2027,
            "content": "var max = this.invertAxis ? w.globals.maxY : w.globals.maxX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2028,
            "content": "var range = this.invertAxis ? w.globals.yRange[0] : w.globals.xRange;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2029,
            "content": "var x1 = (anno.x - min) / (range / w.globals.gridWidth);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2035,
            "content": "var text = anno.label.text;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2041,
            "content": "var strokeDashArray = anno.strokeDashArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2045,
            "content": "var line = this.annoCtx.graphics.drawLine(x1 + anno.offsetX, // x1",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2058,
            "content": "var x2 = (anno.x2 - min) / (range / w.globals.gridWidth);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2069,
            "content": "var temp = x1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2074,
            "content": "var rect = this.annoCtx.graphics.drawRect(x1 + anno.offsetX, // x1",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2094,
            "content": "var textY = anno.label.position === 'top' ? 4 : w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2095,
            "content": "var textRects = this.annoCtx.graphics.getTextRects(text, parseFloat(anno.label.style.fontSize));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2096,
            "content": "var elText = this.annoCtx.graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2117,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2119,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2120,
            "content": "var elg = this.annoCtx.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2136,
            "content": "var CoreUtils = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2154,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2155,
            "content": "var total = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2159,
            "content": "var t = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2177,
            "content": "var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2194,
            "content": "var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2195,
            "content": "var r = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2221,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2222,
            "content": "var catLabels = labels.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2236,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2246,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2247,
            "content": "var size = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2264,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2266,
            "content": "var total = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2283,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2284,
            "content": "var seriesTotalsXRange = w.globals.series.map(function (ser, index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2285,
            "content": "var total = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2307,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2309,
            "content": "var seriesPercent = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2313,
            "content": "var total = w.globals.stackedSeriesTotals[j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2314,
            "content": "var percent = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2323,
            "content": "var _total = w.globals.seriesTotals.reduce(function (acc, val) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2327,
            "content": "var _percent = 100 * ser / _total;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2338,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2339,
            "content": "var yRatio = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2340,
            "content": "var invertedYRatio = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2341,
            "content": "var xRatio = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2342,
            "content": "var initialXRatio = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2343,
            "content": "var invertedXRatio = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2344,
            "content": "var zRatio = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2345,
            "content": "var baseLineY = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2346,
            "content": "var baseLineInvertedY = 0.1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2347,
            "content": "var baseLineX = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2412,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2414,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2430,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2436,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2438,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2439,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2443,
            "content": "var maxY = -Number.MAX_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2444,
            "content": "var minY = Number.MIN_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2445,
            "content": "var range = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2465,
            "content": "var comboCharts = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2466,
            "content": "var comboBarCount = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2467,
            "content": "var comboCount = 0; // if user specified a type in series too, turn on comboCharts flag",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2518,
            "content": "var YAnnotations = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2529,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2530,
            "content": "var strokeDashArray = anno.strokeDashArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2532,
            "content": "var y1 = this._getY1Y2('y1', anno);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2534,
            "content": "var y2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2535,
            "content": "var text = anno.label.text;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2538,
            "content": "var line = this.annoCtx.graphics.drawLine(0 + anno.offsetX, // x1",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2554,
            "content": "var temp = y1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2559,
            "content": "var rect = this.annoCtx.graphics.drawRect(0 + anno.offsetX, // x1",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2579,
            "content": "var textX = anno.label.position === 'right' ? w.globals.gridWidth : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2580,
            "content": "var elText = this.annoCtx.graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2599,
            "content": "var y = type === 'y1' ? anno.y : anno.y2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2600,
            "content": "var yP;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2601,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2604,
            "content": "var catIndex = w.globals.labels.indexOf(y);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2610,
            "content": "var xLabel = w.globals.dom.baseEl.querySelector('.apexcharts-yaxis-texts-g text:nth-child(' + (catIndex + 1) + ')');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2616,
            "content": "var yPos;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2619,
            "content": "var coreUtils = new CoreUtils(this.annoCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2639,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2640,
            "content": "var width = w.globals.gridWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2653,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2655,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2656,
            "content": "var elg = this.annoCtx.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2669,
            "content": "var PointAnnotations = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2680,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2681,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2682,
            "content": "var y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2683,
            "content": "var pointY = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2689,
            "content": "var annoY = parseFloat(anno.y);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2692,
            "content": "var catIndex = w.globals.labels.indexOf(anno.x);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2708,
            "content": "var duplicateSeriesName = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2709,
            "content": "var countDuplicateSeriesName = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2712,
            "content": "var serieName = w.config.yaxis[i].seriesName;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2721,
            "content": "var yPos;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2724,
            "content": "var coreUtils = new CoreUtils(this.annoCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2729,
            "content": "var actualSerieIndex = anno.yAxisIndex + countDuplicateSeriesName;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2742,
            "content": "var optsPoints = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2751,
            "content": "var point = this.annoCtx.graphics.drawMarker(x + anno.marker.offsetX, pointY + anno.marker.offsetY, optsPoints);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2753,
            "content": "var text = anno.label.text ? anno.label.text : '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2754,
            "content": "var elText = this.annoCtx.graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2771,
            "content": "var g = this.annoCtx.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2782,
            "content": "var imgWidth = anno.image.width ? anno.image.width : 20;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2783,
            "content": "var imgHeight = anno.image.height ? anno.image.height : 20;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2797,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2799,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2800,
            "content": "var elg = this.annoCtx.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2874,
            "content": "var en = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 2879,
            "content": "var Options = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3961,
            "content": "var Annotations = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3988,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3991,
            "content": "var yAnnotations = this.yAxisAnnotations.drawYAxisAnnotations();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3992,
            "content": "var xAnnotations = this.xAxisAnnotations.drawXAxisAnnotations();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3993,
            "content": "var pointAnnotations = this.pointsAnnotations.drawPointAnnotations();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3994,
            "content": "var initialAnim = w.config.chart.animations.enabled;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3995,
            "content": "var annoArray = [yAnnotations, xAnnotations, pointAnnotations];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 3996,
            "content": "var annoElArray = [xAnnotations.node, yAnnotations.node, pointAnnotations.node];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4021,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4023,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4031,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4033,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4056,
            "content": "var x = params.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4080,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4081,
            "content": "var elText = this.graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4092,
            "content": "var parent = w.globals.dom.baseEl.querySelector(appendTo);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4098,
            "content": "var textRect = elText.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4101,
            "content": "var elRect = this.graphics.drawRect(textRect.x - paddingLeft, textRect.y - paddingTop, textRect.width + paddingLeft + paddingRight, textRect.height + paddingBottom + paddingTop, borderRadius, backgroundColor ? backgroundColor : 'transparent', 1, borderWidth, borderColor, strokeDashArray);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4108,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4109,
            "content": "var path = params.path,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4120,
            "content": "var img = w.globals.dom.Paper.image(path);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4122,
            "content": "var parent = w.globals.dom.baseEl.querySelector(appendTo);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4172,
            "content": "var params = _ref.params,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4177,
            "content": "var me = context;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4178,
            "content": "var w = me.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4179,
            "content": "var parent = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-annotations\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4180,
            "content": "var index = parent.childNodes.length + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4181,
            "content": "var options = new Options();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4182,
            "content": "var axesAnno = Object.assign({}, type === 'xaxis' ? options.xAxisAnnotation : type === 'yaxis' ? options.yAxisAnnotation : options.pointAnnotation);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4183,
            "content": "var anno = Utils$1.extend(axesAnno, params);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4200,
            "content": "var axesAnnoLabel = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-annotations .apexcharts-\").concat(type, \"-annotation-label[rel='\").concat(index, \"']\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4201,
            "content": "var elRect = this.helpers.addBackgroundToAnno(axesAnnoLabel, anno);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4222,
            "content": "var w = ctx.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4223,
            "content": "var annos = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxis-annotations, .apexcharts-xaxis-annotations, .apexcharts-point-annotations'); // annotations added externally should be cleared out too",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4241,
            "content": "var w = ctx.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4242,
            "content": "var annos = w.globals.dom.baseEl.querySelectorAll(\".\".concat(id));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4266,
            "content": "var Fill = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4279,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4280,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4281,
            "content": "var svgW = parseInt(w.globals.gridWidth, 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4282,
            "content": "var svgH = parseInt(w.globals.gridHeight, 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4283,
            "content": "var size = svgW > svgH ? svgW : svgH;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4284,
            "content": "var fillImg = params.image;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4285,
            "content": "var imgWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4286,
            "content": "var imgHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4301,
            "content": "var elPattern = document.createElementNS(w.globals.SVGNS, 'pattern');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4308,
            "content": "var elImage = document.createElementNS(w.globals.SVGNS, 'image');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4324,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4337,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4339,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4340,
            "content": "var pathFill;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4341,
            "content": "var patternFill, gradientFill;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4343,
            "content": "var fillColors = this.getFillColors();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4344,
            "content": "var fillColor = fillColors[this.seriesIndex]; //override fillcolor if user inputted color with data",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4359,
            "content": "var fillType = this.getFillType(this.seriesIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4360,
            "content": "var fillOpacity = Array.isArray(cnf.fill.opacity) ? cnf.fill.opacity[this.seriesIndex] : cnf.fill.opacity;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4366,
            "content": "var defaultColor = fillColor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4390,
            "content": "var imgSrc = cnf.fill.image.src;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4391,
            "content": "var patternID = opts.patternID ? opts.patternID : '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4419,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4430,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4431,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4432,
            "content": "var opts = this.opts;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4433,
            "content": "var fillColors = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4481,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4482,
            "content": "var opts = this.opts;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4483,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4484,
            "content": "var patternStrokeWidth = cnf.fill.pattern.strokeWidth === undefined ? Array.isArray(cnf.stroke.width) ? cnf.stroke.width[this.seriesIndex] : cnf.stroke.width : Array.isArray(cnf.fill.pattern.strokeWidth) ? cnf.fill.pattern.strokeWidth[this.seriesIndex] : cnf.fill.pattern.strokeWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4485,
            "content": "var patternLineColor = fillColor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4489,
            "content": "var pf = graphics.drawPattern(cnf.fill.pattern.style[opts.seriesNumber], cnf.fill.pattern.width, cnf.fill.pattern.height, patternLineColor, patternStrokeWidth, fillOpacity);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4503,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4504,
            "content": "var opts = this.opts;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4505,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4506,
            "content": "var utils = new Utils$1();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4507,
            "content": "var type = cnf.fill.gradient.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4508,
            "content": "var gradientFrom = fillColor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4509,
            "content": "var gradientTo;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4510,
            "content": "var opacityFrom = cnf.fill.gradient.opacityFrom === undefined ? fillOpacity : Array.isArray(cnf.fill.gradient.opacityFrom) ? cnf.fill.gradient.opacityFrom[i] : cnf.fill.gradient.opacityFrom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4516,
            "content": "var opacityTo = cnf.fill.gradient.opacityTo === undefined ? fillOpacity : Array.isArray(cnf.fill.gradient.opacityTo) ? cnf.fill.gradient.opacityTo[i] : cnf.fill.gradient.opacityTo;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4526,
            "content": "var gToColor = cnf.fill.gradient.gradientToColors[opts.seriesNumber];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4538,
            "content": "var t = gradientFrom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4564,
            "content": "var Markers = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4575,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4595,
            "content": "var alwaysDrawMarker = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4596,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4597,
            "content": "var i = seriesIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4598,
            "content": "var p = pointsPos;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4599,
            "content": "var elPointsWrap = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4600,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4601,
            "content": "var point;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4612,
            "content": "var dataPointIndex = j; // a small hack as we have 2 points for the first val to connect it",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4616,
            "content": "var PointClasses = 'apexcharts-marker';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4622,
            "content": "var shouldMarkerDraw = Array.isArray(w.config.markers.size) ? w.globals.markers.size[seriesIndex] > 0 : w.config.markers.size > 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4631,
            "content": "var opts = this.getMarkerConfig({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4656,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4676,
            "content": "var cssClass = _ref.cssClass,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4682,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4683,
            "content": "var pStyle = this.getMarkerStyle(seriesIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4684,
            "content": "var pSize = w.globals.markers.size[seriesIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4685,
            "content": "var m = w.config.markers; // discrete markers is an option where user can specify a particular marker with different shape, size and color",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4717,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4718,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4731,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4732,
            "content": "var colors = w.globals.markers.colors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4733,
            "content": "var strokeColors = w.config.markers.strokeColor || w.config.markers.strokeColors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4734,
            "content": "var pointStrokeColor = Array.isArray(strokeColors) ? strokeColors[seriesIndex] : strokeColors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4735,
            "content": "var pointFillColor = Array.isArray(colors) ? colors[seriesIndex] : colors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4752,
            "content": "var Scatter = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4765,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4766,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4767,
            "content": "var realIndex = opts.realIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4768,
            "content": "var pointsPos = opts.pointsPos;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4769,
            "content": "var zRatio = opts.zRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4770,
            "content": "var elPointsMain = opts.elParent;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4771,
            "content": "var elPointsWrap = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4778,
            "content": "var dataPointIndex = j + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4779,
            "content": "var shouldDraw = true; // a small hack as we have 2 points for the first val to connect it",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4783,
            "content": "var radius = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4784,
            "content": "var finishRadius = w.globals.markers.size[realIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4789,
            "content": "var bubble = w.config.plotOptions.bubble;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4804,
            "content": "var x = pointsPos.x[q];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4805,
            "content": "var y = pointsPos.y[q];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4813,
            "content": "var point = this.drawPoint(x, y, radius, finishRadius, realIndex, dataPointIndex, j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4824,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4825,
            "content": "var i = realIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4826,
            "content": "var anim = new Animations(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4827,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4828,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4829,
            "content": "var markers = new Markers(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4830,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4831,
            "content": "var markerConfig = markers.getMarkerConfig({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4838,
            "content": "var pathFillCircle = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4845,
            "content": "var el;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4874,
            "content": "var dropShadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4879,
            "content": "var speed = w.config.chart.animations.speed;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4894,
            "content": "var _speed = w.config.chart.animations.dynamicAnimation.speed;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4895,
            "content": "var prevX, prevY, prevR;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4896,
            "content": "var prevPathJ = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4944,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4961,
            "content": "var DataLabels = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4974,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4975,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4976,
            "content": "var drawnextLabel = false; //",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4978,
            "content": "var textRects = graphics.getTextRects(val, fontSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4979,
            "content": "var width = textRects.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4980,
            "content": "var height = textRects.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4992,
            "content": "var len = w.globals.dataLabelsRects[i].length - 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4993,
            "content": "var lastDrawnIndex = typeof w.globals.lastDrawnDataLabelsIndexes[i] !== 'undefined' ? w.globals.lastDrawnDataLabelsIndexes[i][w.globals.lastDrawnDataLabelsIndexes[i].length - 1] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 4996,
            "content": "var lastDataLabelRect = w.globals.dataLabelsRects[i][lastDrawnIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5020,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5021,
            "content": "var strokeWidth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5024,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5025,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5026,
            "content": "var dataLabelsConfig = w.config.dataLabels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5027,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5028,
            "content": "var y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5029,
            "content": "var dataPointIndex = j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5030,
            "content": "var elDataLabelsWrap = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5048,
            "content": "var val = w.globals.series[i][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5049,
            "content": "var text = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5051,
            "content": "var getText = function getText(v) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5064,
            "content": "var scatter = new Scatter(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5065,
            "content": "var centerTextInBubbleCoords = scatter.centerTextInBubble(y, i, dataPointIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5091,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5092,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5093,
            "content": "var x = opts.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5112,
            "content": "var correctedLabels = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5137,
            "content": "var dataLabelColor = w.globals.dataLabels.style.colors[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5156,
            "content": "var offX = dataLabelsConfig.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5157,
            "content": "var offY = dataLabelsConfig.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5168,
            "content": "var dataLabelText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5187,
            "content": "var textShadow = dataLabelsConfig.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5188,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5204,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5205,
            "content": "var bCnf = w.config.dataLabels.background;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5206,
            "content": "var paddingH = bCnf.padding;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5207,
            "content": "var paddingV = bCnf.padding / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5208,
            "content": "var width = coords.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5209,
            "content": "var height = coords.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5210,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5211,
            "content": "var elRect = graphics.drawRect(coords.x - paddingH, coords.y - paddingV / 2, width + paddingH * 2, height + paddingV, bCnf.borderRadius, w.config.chart.background === 'transparent' ? '#fff' : w.config.chart.background, bCnf.opacity, bCnf.borderWidth, bCnf.borderColor);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5214,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5223,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5225,
            "content": "var elDataLabels = w.globals.dom.baseEl.querySelectorAll('.apexcharts-datalabels text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5228,
            "content": "var el = elDataLabels[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5229,
            "content": "var coords = el.getBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5230,
            "content": "var elRect = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5238,
            "content": "var background = el.getAttribute('fill');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5239,
            "content": "var shouldAnim = w.config.chart.animations.enabled && !w.globals.resized && !w.globals.dataChanged;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5258,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5259,
            "content": "var elDataLabelsNodes = w.globals.dom.baseEl.querySelectorAll('.apexcharts-datalabels');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5260,
            "content": "var elSeries = w.globals.dom.baseEl.querySelector('.apexcharts-plot-series:last-child');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5273,
            "content": "var BarDataLabels = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5293,
            "content": "var x = opts.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5306,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5307,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5308,
            "content": "var strokeWidth = Array.isArray(this.barCtx.strokeWidth) ? this.barCtx.strokeWidth[realIndex] : this.barCtx.strokeWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5309,
            "content": "var bcx = x + parseFloat(barWidth * visibleSeries);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5310,
            "content": "var bcy = y + parseFloat(barHeight * visibleSeries);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5317,
            "content": "var dataLabels = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5318,
            "content": "var dataLabelsX = x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5319,
            "content": "var dataLabelsY = y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5320,
            "content": "var dataLabelsPos = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5321,
            "content": "var dataLabelsConfig = w.config.dataLabels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5322,
            "content": "var barDataLabelsConfig = this.barCtx.barOptions.dataLabels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5329,
            "content": "var offX = dataLabelsConfig.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5330,
            "content": "var offY = dataLabelsConfig.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5331,
            "content": "var textRects = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5337,
            "content": "var yLabel = this.barCtx.series[i][j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5341,
            "content": "var params = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5390,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5391,
            "content": "var i = opts.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5403,
            "content": "var dataLabelsX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5405,
            "content": "var vertical = w.config.plotOptions.bar.dataLabels.orientation === 'vertical';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5407,
            "content": "var dataPointsDividedWidth = w.globals.gridWidth / w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5416,
            "content": "var offsetDLX = 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5420,
            "content": "var valIsNegative = this.barCtx.series[i][j] < 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5421,
            "content": "var newY = y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5499,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5500,
            "content": "var x = opts.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5512,
            "content": "var dataPointsDividedHeight = w.globals.gridHeight / w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5514,
            "content": "var dataLabelsY = bcy - (this.barCtx.isRangeBar ? 0 : dataPointsDividedHeight) + barHeight / 2 + textRects.height / 2 + offY - 3;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5515,
            "content": "var valIsNegative = this.barCtx.series[i][j] < 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5516,
            "content": "var newX = x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5570,
            "content": "var x = _ref.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5579,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5580,
            "content": "var rotate = 'rotate(0)';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5582,
            "content": "var dataLabels = new DataLabels(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5583,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5584,
            "content": "var formatter = dataLabelsConfig.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5585,
            "content": "var elDataLabelsWrap = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5586,
            "content": "var isSeriesNotCollapsed = w.globals.collapsedSeriesIndices.indexOf(i) > -1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5593,
            "content": "var text = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5603,
            "content": "var valIsNegative = w.globals.series[i][j] < 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5604,
            "content": "var position = w.config.plotOptions.bar.dataLabels.position;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5622,
            "content": "var txRect = graphics.getTextRects(text, parseFloat(dataLabelsConfig.style.fontSize));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5643,
            "content": "var modifiedDataLabelsConfig = _objectSpread2({}, dataLabelsConfig);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5681,
            "content": "var Series = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5703,
            "content": "var targetElement = this.getSeriesByName(seriesName);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5704,
            "content": "var realIndex = parseInt(targetElement.getAttribute('data:realIndex'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5705,
            "content": "var isHidden = targetElement.classList.contains('apexcharts-series-collapsed');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5714,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5730,
            "content": "var isSeriesHidden = this.isSeriesHidden(seriesName);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5737,
            "content": "var isSeriesHidden = this.isSeriesHidden(seriesName);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5746,
            "content": "var isSeriesHidden = this.isSeriesHidden(seriesName);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5755,
            "content": "var shouldUpdateChart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5756,
            "content": "var shouldResetZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5757,
            "content": "var shouldResetCollapsed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5758,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5759,
            "content": "var series = Utils$1.clone(w.globals.initialSeries);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5785,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5798,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5800,
            "content": "var allSeriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-series, .apexcharts-datalabels\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5803,
            "content": "var seriesCnt = parseInt(targetElement.getAttribute('rel'), 10) - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5804,
            "content": "var seriesEl = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5805,
            "content": "var dataLabelEl = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5842,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5844,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5845,
            "content": "var allHeatMapElements = w.globals.dom.baseEl.getElementsByClassName('apexcharts-heatmap-rect');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5847,
            "content": "var activeInactive = function activeInactive(action) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5853,
            "content": "var removeInactiveClassFromHoveredRange = function removeInactiveClassFromHoveredRange(range) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5855,
            "content": "var val = parseInt(allHeatMapElements[i].getAttribute('val'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5864,
            "content": "var seriesCnt = parseInt(targetElement.getAttribute('rel'), 10) - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5866,
            "content": "var range = w.config.plotOptions.heatmap.colorScale.ranges[seriesCnt];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5875,
            "content": "var ignoreBars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5876,
            "content": "var order = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5877,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5878,
            "content": "var activeIndex = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5882,
            "content": "var activeSeriesIndex = w.config.series.map(function (s, index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5883,
            "content": "var hasBars = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5905,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5909,
            "content": "var paths = seriesEls[i].childNodes;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5910,
            "content": "var dArr = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5918,
            "content": "var d = paths[j].getAttribute('pathTo');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5928,
            "content": "var getPaths = function getPaths(chartType) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5932,
            "content": "var chartTypes = ['line', 'area', 'bar', 'rangebar', 'candlestick', 'radar'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5934,
            "content": "var paths = getPaths(type);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5942,
            "content": "var heatTreeSeries = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(w.config.chart.type, \" .apexcharts-series\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5945,
            "content": "var _loop = function _loop(h) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5946,
            "content": "var seriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(w.config.chart.type, \" .apexcharts-series[data\\\\:realIndex='\").concat(h, \"'] rect\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5947,
            "content": "var dArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5949,
            "content": "var _loop2 = function _loop2(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5950,
            "content": "var getAttr = function getAttr(x) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5954,
            "content": "var rect = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5986,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5987,
            "content": "var paths = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(type, \"-series .apexcharts-series\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5991,
            "content": "var seriesEls = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-\".concat(type, \"-series .apexcharts-series[data\\\\:realIndex='\").concat(s, \"'] circle\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 5992,
            "content": "var dArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6009,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6016,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6017,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6018,
            "content": "var noDataOpts = w.config.noData;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6019,
            "content": "var graphics = new Graphics(me.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6020,
            "content": "var x = w.globals.svgWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6021,
            "content": "var y = w.globals.svgHeight / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6022,
            "content": "var textAnchor = 'middle';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6044,
            "content": "var titleText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6063,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6078,
            "content": "var equalLen = true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6079,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6080,
            "content": "var filteredSerX = this.filteredSeriesX();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6095,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6096,
            "content": "var filteredSeriesX = w.globals.seriesX.map(function (ser) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6106,
            "content": "var Helpers$3 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6117,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6160,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6161,
            "content": "var x, y, yDivision, xDivision, barHeight, barWidth, zeroH, zeroW;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6162,
            "content": "var dataPoints = w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6169,
            "content": "var seriesLen = this.barCtx.seriesLen;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6200,
            "content": "var xRatio = this.barCtx.xRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6235,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6236,
            "content": "var fill = new Fill(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6237,
            "content": "var fillColor = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6238,
            "content": "var seriesNumber = this.barCtx.barOptions.distributed ? j : i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6241,
            "content": "var colorRange = this.barCtx.barOptions.colors.ranges;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6253,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6264,
            "content": "var strokeWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6265,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6284,
            "content": "var j = _ref.j,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6291,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6292,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6293,
            "content": "var sr = new Series(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6294,
            "content": "var activeSeriesIndex = sr.getActiveConfigSeriesIndex();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6301,
            "content": "var bcolor = this.barCtx.barOptions.colors.backgroundBarColors[j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6302,
            "content": "var rect = graphics.drawRect(typeof x1 !== 'undefined' ? x1 : 0, typeof y1 !== 'undefined' ? y1 : 0, typeof x2 !== 'undefined' ? x2 : w.globals.gridWidth, typeof y2 !== 'undefined' ? y2 : w.globals.gridHeight, this.barCtx.barOptions.colors.backgroundBarRadius, bcolor, this.barCtx.barOptions.colors.backgroundBarOpacity);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6310,
            "content": "var barWidth = _ref2.barWidth,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6321,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6324,
            "content": "var shapeOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6332,
            "content": "var newPath = this.getRoundedBars(w, shapeOpts, series, i, j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6333,
            "content": "var x1 = barXPosition;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6334,
            "content": "var x2 = barXPosition + barWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6335,
            "content": "var pathTo = graphics.move(x1, y1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6336,
            "content": "var pathFrom = graphics.move(x1, y1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6337,
            "content": "var sl = graphics.line(x2 - strokeWidth, y1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6362,
            "content": "var barYPosition = _ref3.barYPosition,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6372,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6375,
            "content": "var shapeOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6382,
            "content": "var newPath = this.getRoundedBars(w, shapeOpts, series, i, j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6383,
            "content": "var pathTo = graphics.move(x1, barYPosition);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6384,
            "content": "var pathFrom = graphics.move(x1, barYPosition);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6390,
            "content": "var y1 = barYPosition;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6391,
            "content": "var y2 = barYPosition + barHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6392,
            "content": "var sl = graphics.line(x1, y2 - strokeWidth);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6421,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6422,
            "content": "var radius = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6423,
            "content": "var borderRadius = w.config.plotOptions.bar.borderRadius;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6424,
            "content": "var borderRadiusIsArray = Array.isArray(borderRadius);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6427,
            "content": "var radiusIndex = i > borderRadius.length - 1 ? borderRadius.length - 1 : i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6438,
            "content": "var pathWithRadius = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6439,
            "content": "var x2 = opts.x2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6446,
            "content": "var inverse = this.barCtx.isReversed ? series[i][j] > 0 : series[i][j] < 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6457,
            "content": "var _pathWithRadius = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6458,
            "content": "var y2 = opts.y2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6465,
            "content": "var _inverse = series[i][j] < 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6481,
            "content": "var series = _ref4.series;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6482,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6485,
            "content": "var total = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6512,
            "content": "var zeroPositionForNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6513,
            "content": "var xForVal = zeroPositionForNull ? zeroW : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6524,
            "content": "var zeroPositionForNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6525,
            "content": "var yForVal = zeroPositionForNull ? zeroH : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6536,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6538,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6539,
            "content": "var goals = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6543,
            "content": "var _goals$push;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6554,
            "content": "var barXPosition = _ref5.barXPosition,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6560,
            "content": "var graphics = new Graphics(this.barCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6561,
            "content": "var lineGroup = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6564,
            "content": "var line = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6569,
            "content": "var sHeight = typeof goal.attrs.strokeHeight !== 'undefined' ? goal.attrs.strokeHeight : barHeight / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6570,
            "content": "var y = barYPosition + sHeight + barHeight / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6578,
            "content": "var sWidth = typeof goal.attrs.strokeWidth !== 'undefined' ? goal.attrs.strokeWidth : barWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6579,
            "content": "var x = barXPosition + sWidth + barWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6599,
            "content": "var Bar = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6605,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6638,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6639,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6640,
            "content": "var coreUtils = new CoreUtils(this.ctx, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6645,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6656,
            "content": "var x = void 0,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6666,
            "content": "var yArrj = []; // hold y values of current iterating series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6668,
            "content": "var xArrj = []; // hold x values of current iterating series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6670,
            "content": "var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6672,
            "content": "var elSeries = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6684,
            "content": "var barHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6685,
            "content": "var barWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6692,
            "content": "var initPositions = this.barHelpers.initialPositions();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6707,
            "content": "var elDataLabelsWrap = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6711,
            "content": "var elGoalsMarkers = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6717,
            "content": "var strokeWidth = this.barHelpers.getStrokeWidth(i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6718,
            "content": "var paths = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6719,
            "content": "var pathsParams = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6748,
            "content": "var barGoalLine = this.barHelpers.drawGoalLine({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6769,
            "content": "var pathFill = this.barHelpers.getPathFillColor(series, i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6802,
            "content": "var realIndex = _ref.realIndex,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6823,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6824,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6839,
            "content": "var delay = j / w.config.chart.animations.animateGradually.delay * (w.config.chart.animations.speed / w.globals.dataPoints) / 2.4;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6840,
            "content": "var renderedPath = graphics.renderPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6856,
            "content": "var forecast = w.config.forecastDataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6871,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6874,
            "content": "var barDataLabels = new BarDataLabels(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6875,
            "content": "var dataLabels = barDataLabels.handleBarDataLabels({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6906,
            "content": "var indexes = _ref2.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6914,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6915,
            "content": "var i = indexes.i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6916,
            "content": "var j = indexes.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6922,
            "content": "var barYPosition = y + barHeight * this.visibleI;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6924,
            "content": "var paths = this.barHelpers.getBarpaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6960,
            "content": "var indexes = _ref3.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6968,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6969,
            "content": "var realIndex = indexes.realIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6970,
            "content": "var i = indexes.i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6971,
            "content": "var j = indexes.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6972,
            "content": "var bc = indexes.bc;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6975,
            "content": "var sxI = realIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6984,
            "content": "var barXPosition = x + barWidth * this.visibleI;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 6986,
            "content": "var paths = this.barHelpers.getColumnPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7030,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7031,
            "content": "var pathFrom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7034,
            "content": "var gpp = w.globals.previousPaths[pp];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7056,
            "content": "var DateTime = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7079,
            "content": "var utc = this.w.config.xaxis.labels.datetimeUTC;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7085,
            "content": "var utc = this.w.config.xaxis.labels.datetimeUTC;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7091,
            "content": "var parsed = Date.parse(dateStr);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7097,
            "content": "var output = Date.parse(dateStr.replace(/-/g, '/').replace(/[a-z]+/gi, ' '));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7112,
            "content": "var locale = this.w.globals.locale;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7113,
            "content": "var utc = this.w.config.xaxis.labels.datetimeUTC;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7114,
            "content": "var MMMM = ['\\x00'].concat(_toConsumableArray(locale.months));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7115,
            "content": "var MMM = ['\\x01'].concat(_toConsumableArray(locale.shortMonths));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7116,
            "content": "var dddd = ['\\x02'].concat(_toConsumableArray(locale.days));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7117,
            "content": "var ddd = ['\\x03'].concat(_toConsumableArray(locale.shortDays));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7120,
            "content": "var s = i + '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7130,
            "content": "var y = utc ? date.getUTCFullYear() : date.getFullYear();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7134,
            "content": "var M = (utc ? date.getUTCMonth() : date.getMonth()) + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7139,
            "content": "var d = utc ? date.getUTCDate() : date.getDate();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7144,
            "content": "var H = utc ? date.getUTCHours() : date.getHours();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7147,
            "content": "var h = H > 12 ? H - 12 : H === 0 ? 12 : H;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7150,
            "content": "var m = utc ? date.getUTCMinutes() : date.getMinutes();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7153,
            "content": "var s = utc ? date.getUTCSeconds() : date.getSeconds();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7156,
            "content": "var f = utc ? date.getUTCMilliseconds() : date.getMilliseconds();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7162,
            "content": "var T = H < 12 ? 'AM' : 'PM';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7165,
            "content": "var t = T.toLowerCase();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7168,
            "content": "var tz = -date.getTimezoneOffset();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7169,
            "content": "var K = utc || !tz ? 'Z' : tz > 0 ? '+' : '-';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7173,
            "content": "var tzHrs = Math.floor(tz / 60);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7174,
            "content": "var tzMin = tz % 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7179,
            "content": "var day = (utc ? date.getUTCDay() : date.getDay()) + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7190,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7200,
            "content": "var tsMin = this.getDate(minX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7201,
            "content": "var tsMax = this.getDate(maxX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7202,
            "content": "var minD = this.formatDate(tsMin, 'yyyy MM dd HH mm ss fff').split(' ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7203,
            "content": "var maxD = this.formatDate(tsMax, 'yyyy MM dd HH mm ss fff').split(' ');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7229,
            "content": "var days = this.determineDaysOfMonths(month, year); // whatever days we get, subtract the number of days asked",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7236,
            "content": "var days = 365;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7247,
            "content": "var dayOfYear = this.daysCntOfYear[month] + date;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7254,
            "content": "var days = 30;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7291,
            "content": "var RangeBar = /*#__PURE__*/function (_Bar) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7294,
            "content": "var _super = _createSuper(RangeBar);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7305,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7306,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7312,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7317,
            "content": "var x = void 0,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7327,
            "content": "var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7329,
            "content": "var elSeries = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7340,
            "content": "var barHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7341,
            "content": "var barWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7347,
            "content": "var initPositions = this.barHelpers.initialPositions();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7355,
            "content": "var elDataLabelsWrap = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7359,
            "content": "var elGoalsMarkers = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7365,
            "content": "var strokeWidth = this.barHelpers.getStrokeWidth(i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7366,
            "content": "var y1 = this.seriesRangeStart[i][j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7367,
            "content": "var y2 = this.seriesRangeEnd[i][j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7368,
            "content": "var paths = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7369,
            "content": "var barYPosition = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7370,
            "content": "var params = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7381,
            "content": "var seriesLen = this.seriesLen;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7387,
            "content": "var srty = (yDivision - barHeight * seriesLen) / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7396,
            "content": "var positions = this.detectOverlappingBars({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7437,
            "content": "var barGoalLine = this.barHelpers.drawGoalLine({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7452,
            "content": "var pathFill = this.barHelpers.getPathFillColor(series, i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7453,
            "content": "var lineFill = w.globals.stroke.colors[realIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7487,
            "content": "var i = _ref.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7494,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7495,
            "content": "var overlaps = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7496,
            "content": "var rangeName = w.config.series[i].data[j].rangeName;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7497,
            "content": "var labelX = w.config.series[i].data[j].x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7498,
            "content": "var rowIndex = w.globals.labels.indexOf(labelX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7499,
            "content": "var overlappedIndex = w.globals.seriesRangeBar[i].findIndex(function (tx) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7526,
            "content": "var indexes = _ref2.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7529,
            "content": "var xDivision = _ref2.xDivision,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7532,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7533,
            "content": "var i = indexes.i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7534,
            "content": "var j = indexes.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7535,
            "content": "var yRatio = this.yRatio[this.yaxisIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7536,
            "content": "var realIndex = indexes.realIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7537,
            "content": "var range = this.getRangeValue(realIndex, j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7538,
            "content": "var y1 = Math.min(range.start, range.end);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7539,
            "content": "var y2 = Math.max(range.start, range.end);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7545,
            "content": "var barXPosition = x + barWidth * this.visibleI;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7554,
            "content": "var barHeight = Math.abs(y2 - y1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7555,
            "content": "var paths = this.barHelpers.getColumnPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7585,
            "content": "var indexes = _ref3.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7593,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7594,
            "content": "var x1 = zeroW + y1 / this.invertedYRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7595,
            "content": "var x2 = zeroW + y2 / this.invertedYRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7596,
            "content": "var barWidth = Math.abs(x2 - x1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7597,
            "content": "var paths = this.barHelpers.getBarpaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7626,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7635,
            "content": "var ctx = _ref4.ctx,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7641,
            "content": "var start = w.globals.seriesRangeStart[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7642,
            "content": "var end = w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7643,
            "content": "var ylabel = w.globals.labels[dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7644,
            "content": "var seriesName = w.config.series[seriesIndex].name ? w.config.series[seriesIndex].name : '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7645,
            "content": "var yLbFormatter = w.config.tooltip.y.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7646,
            "content": "var yLbTitleFormatter = w.config.tooltip.y.title.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7647,
            "content": "var opts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7672,
            "content": "var startVal = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7673,
            "content": "var endVal = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7674,
            "content": "var color = w.globals.colors[seriesIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7678,
            "content": "var datetimeObj = new DateTime(ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7703,
            "content": "var color = _ref5.color,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7721,
            "content": "var Defaults = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7765,
            "content": "var ret = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7873,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7889,
            "content": "var seriesIndex = _ref.seriesIndex,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7912,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7932,
            "content": "var seriesIndex = _ref2.seriesIndex,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7953,
            "content": "var handleTimelineTooltip = function handleTimelineTooltip(opts) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7954,
            "content": "var rangeCtx = new RangeBar(opts.ctx, null);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7956,
            "content": "var _rangeCtx$getTooltipV = rangeCtx.getTooltipValues(opts),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7972,
            "content": "var handleRangeColumnTooltip = function handleRangeColumnTooltip(opts) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7973,
            "content": "var rangeCtx = new RangeBar(opts.ctx, null);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 7975,
            "content": "var _rangeCtx$getTooltipV2 = rangeCtx.getTooltipValues(opts),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8008,
            "content": "var seriesIndex = _ref3.seriesIndex,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8011,
            "content": "var start = w.globals.seriesRangeStart[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8012,
            "content": "var end = w.globals.seriesRangeEnd[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8078,
            "content": "var ret = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8110,
            "content": "var existingDataLabelFormatter = opts.dataLabels.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8115,
            "content": "var isBar = opts.chart.type === 'bar';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8146,
            "content": "var defaultFormatter = opts.xaxis.labels.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8147,
            "content": "var labels = opts.xaxis.categories && opts.xaxis.categories.length ? opts.xaxis.categories : opts.labels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8525,
            "content": "var o = w.globals.seriesCandleO[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8526,
            "content": "var h = w.globals.seriesCandleH[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8527,
            "content": "var m = w.globals.seriesCandleM[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8528,
            "content": "var l = w.globals.seriesCandleL[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8529,
            "content": "var c = w.globals.seriesCandleC[seriesIndex][dataPointIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8548,
            "content": "var Config = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8558,
            "content": "var responsiveOverride = _ref.responsiveOverride;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8559,
            "content": "var opts = this.opts;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8560,
            "content": "var options = new Options();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8561,
            "content": "var defaults = new Defaults(opts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8578,
            "content": "var config = options.init();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8579,
            "content": "var newDefaults = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8582,
            "content": "var chartDefaults = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8583,
            "content": "var chartTypes = ['line', 'area', 'bar', 'candlestick', 'boxPlot', 'rangeBar', 'histogram', 'bubble', 'scatter', 'heatmap', 'treemap', 'pie', 'polarArea', 'donut', 'radar', 'radialBar'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8623,
            "content": "var mergedWithDefaultConfig = Utils$1.extend(newDefaults, window.Apex); // get the merged config and extend with user defined config",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8633,
            "content": "var defaults = new Defaults(opts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8634,
            "content": "var isBarHorizontal = chartType === 'bar' && opts.plotOptions && opts.plotOptions.bar && opts.plotOptions.bar.horizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8635,
            "content": "var unsupportedZoom = chartType === 'pie' || chartType === 'polarArea' || chartType === 'donut' || chartType === 'radar' || chartType === 'radialBar' || chartType === 'heatmap';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8636,
            "content": "var notNumericXAxis = opts.xaxis.type !== 'datetime' && opts.xaxis.type !== 'numeric';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8637,
            "content": "var tickPlacement = opts.xaxis.tickPlacement ? opts.xaxis.tickPlacement : chartDefaults.xaxis && chartDefaults.xaxis.tickPlacement;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8648,
            "content": "var options = new Options();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8668,
            "content": "var isLogY = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8674,
            "content": "var series = opts.series;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8692,
            "content": "var newYaxis = Utils$1.extend(options.yAxis, opts.yaxis[0]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8724,
            "content": "var options = new Options();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8731,
            "content": "var options = new Options();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8738,
            "content": "var options = new Options();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8770,
            "content": "var config = opts; // conflicting tooltip option. intersect makes sure to focus on 1 point at a time. Shared cannot be used along with it",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 8824,
            "content": "var Globals = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9082,
            "content": "var globals = this.globalVars(config);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9101,
            "content": "var Base = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9111,
            "content": "var config = new Config(this.opts).init({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9114,
            "content": "var globals = new Globals().init(config);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9115,
            "content": "var w = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9126,
            "content": "var Data = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9148,
            "content": "var series = this.w.config.series.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9149,
            "content": "var sr = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9160,
            "content": "var series = this.w.config.series.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9161,
            "content": "var sr = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9171,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9172,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9173,
            "content": "var isBoxPlot = cnf.chart.type === 'boxPlot' || cnf.series[i].type === 'boxPlot';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9192,
            "content": "var ts = new Date(ser[i].data[j][0]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9210,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9211,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9212,
            "content": "var dt = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9213,
            "content": "var activeI = i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9247,
            "content": "var isXString = typeof ser[activeI].data[_j2].x === 'string';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9248,
            "content": "var isXArr = Array.isArray(ser[activeI].data[_j2].x);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9249,
            "content": "var isXDate = !isXArr && !!dt.isValidDate(ser[activeI].data[_j2].x.toString());",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9254,
            "content": "var isRangeColumn = gl.isBarHorizontal && gl.isRangeData;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9295,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9296,
            "content": "var range = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9314,
            "content": "var range1y1 = arr.y1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9315,
            "content": "var range1y2 = arr.y2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9316,
            "content": "var range2y1 = sarr.y[sri].y1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9317,
            "content": "var range2y2 = sarr.y[sri].y2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9339,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9340,
            "content": "var ohlc = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9358,
            "content": "var rangeStart = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9359,
            "content": "var rangeEnd = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9360,
            "content": "var uniqueKeys = ser[i].data.filter(function (thing, index, self) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9371,
            "content": "var err = 'Please provide [Start, End] values in valid format. Read more https://apexcharts.com/docs/series/#rangecharts';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9372,
            "content": "var serObj = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9373,
            "content": "var activeIndex = serObj.getActiveConfigSeriesIndex();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9389,
            "content": "var _loop = function _loop(_j3) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9390,
            "content": "var id = Utils$1.randomId();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9391,
            "content": "var x = ser[i].data[_j3].x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9392,
            "content": "var y = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9400,
            "content": "var uI = uniqueKeys.findIndex(function (t) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9422,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9423,
            "content": "var isBoxPlot = w.config.chart.type === 'boxPlot' || w.config.series[i].type === 'boxPlot';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9424,
            "content": "var serO = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9425,
            "content": "var serH = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9426,
            "content": "var serM = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9427,
            "content": "var serL = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9428,
            "content": "var serC = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9491,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9493,
            "content": "var ctx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.ctx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9494,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9495,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9496,
            "content": "var dt = new DateTime(ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9497,
            "content": "var xlabels = cnf.labels.length > 0 ? cnf.labels.slice() : cnf.xaxis.categories.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9500,
            "content": "var handleDates = function handleDates() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9504,
            "content": "var isDate = dt.isValidDate(xlabels[j]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9569,
            "content": "var singleArray = ser[i].data.map(function (d) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9596,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9597,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9619,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9620,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9646,
            "content": "var defaults = new Defaults(cnf);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9658,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9659,
            "content": "var cnf = this.w.config; // user didn't provided any labels, fallback to 1-2-3-4-5",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9661,
            "content": "var labelArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9708,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9709,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9710,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9728,
            "content": "var series = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9746,
            "content": "var catLabels = this.coreUtils.getCategoryLabels(gl.labels);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9758,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9760,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9780,
            "content": "var Formatters = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9792,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9798,
            "content": "var datetimeObj = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9820,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9837,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9839,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9867,
            "content": "var diff = w.globals.maxX - w.globals.minX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9878,
            "content": "var range = w.globals.maxY - w.globals.minYArr;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9942,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9947,
            "content": "var longest = w.globals.seriesNames.reduce(function (a, b) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9959,
            "content": "var AxesUtils = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9971,
            "content": "var drawnLabels = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9972,
            "content": "var fontSize = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '12px';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9973,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9974,
            "content": "var rawLabel = typeof labels[i] === 'undefined' ? '' : labels[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9975,
            "content": "var label = rawLabel;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9976,
            "content": "var xlbFormatter = w.globals.xLabelFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9977,
            "content": "var customFormatter = w.config.xaxis.labels.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9978,
            "content": "var isBold = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9979,
            "content": "var xFormat = new Formatters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9980,
            "content": "var timestamp = rawLabel;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9995,
            "content": "var determineHighestUnit = function determineHighestUnit(unit) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 9996,
            "content": "var highestUnit = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10023,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10024,
            "content": "var textRect = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10032,
            "content": "var allowDuplicatesInTimeScale = !w.config.xaxis.labels.showDuplicates && this.ctx.timeScale;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10048,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10049,
            "content": "var ticks = w.config.xaxis.tickAmount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10052,
            "content": "var tickMultiple = Math.round(labelsLen / (ticks + 1));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10065,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10082,
            "content": "var prev = drawnLabelsRects[drawnLabelsRects.length - 1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10094,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10105,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10106,
            "content": "var coreUtils = new CoreUtils(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10114,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10125,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10126,
            "content": "var graphics = new Graphics(this.ctx); // initial label position = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10128,
            "content": "var t = w.globals.translateY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10134,
            "content": "var tY = t + tickAmount / 10 + w.config.yaxis[realIndex].labels.offsetY - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10144,
            "content": "var elTick = graphics.drawLine(x + axisBorder.offsetX - axisTicks.width + axisTicks.offsetX, tY + axisTicks.offsetY, x + axisBorder.offsetX + axisTicks.offsetX, tY + axisTicks.offsetY, axisTicks.color);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10155,
            "content": "var Exports = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10167,
            "content": "var svgWidth = parseFloat(svg.getAttributeNS(null, 'width'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10168,
            "content": "var svgHeight = parseFloat(svg.getAttributeNS(null, 'height')); // set new width and height based on the scale",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10184,
            "content": "var nXmlnsSeen = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10185,
            "content": "var result = svgData.replace(/xmlns=\"http:\\/\\/www.w3.org\\/2000\\/svg\"/g, function (match) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10198,
            "content": "var svgString = this.w.globals.dom.Paper.svg(); // in case the scale is different than 1, the svg needs to be rescaled",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10202,
            "content": "var svgNode = this.w.globals.dom.Paper.node.cloneNode(true); // scale the image",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10214,
            "content": "var w = this.w; // hide some elements to avoid printing them on exported svg",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10216,
            "content": "var xcrosshairs = w.globals.dom.baseEl.getElementsByClassName('apexcharts-xcrosshairs');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10217,
            "content": "var ycrosshairs = w.globals.dom.baseEl.getElementsByClassName('apexcharts-ycrosshairs');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10218,
            "content": "var zoomSelectionRects = w.globals.dom.baseEl.querySelectorAll('.apexcharts-zoom-rect, .apexcharts-selection-rect');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10239,
            "content": "var svgData = this.getSvgString();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10240,
            "content": "var svgBlob = new Blob([svgData], {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10248,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10251,
            "content": "var w = _this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10252,
            "content": "var scale = options ? options.scale || options.width / w.globals.svgWidth : 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10256,
            "content": "var canvas = document.createElement('canvas');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10260,
            "content": "var canvasBg = w.config.chart.background === 'transparent' ? '#fff' : w.config.chart.background;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10261,
            "content": "var ctx = canvas.getContext('2d');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10265,
            "content": "var svgData = _this.getSvgString(scale);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10270,
            "content": "var v = window.canvg.Canvg.fromString(ctx, svgData, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10276,
            "content": "var blob = canvas.msToBlob(); // dispose - missing this will cause a memory leak",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10283,
            "content": "var svgUrl = 'data:image/svg+xml,' + encodeURIComponent(svgData);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10284,
            "content": "var img = new Image();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10292,
            "content": "var _blob = canvas.msToBlob();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10298,
            "content": "var imgURI = canvas.toDataURL('image/png');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10317,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 10319,
            "content": "this.dataURI().then(function (_ref) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 10320,
            "content": "var imgURI = _ref.imgURI,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10333,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10335,
            "content": "var series = _ref2.series,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10339,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10340,
            "content": "var columns = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10341,
            "content": "var rows = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10342,
            "content": "var result = \"data:text/csv;charset=utf-8,\\uFEFF\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10344,
            "content": "var isTimeStamp = function isTimeStamp(num) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10348,
            "content": "var dataFormat = new Data(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10349,
            "content": "var axesUtils = new AxesUtils(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10351,
            "content": "var getCat = function getCat(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10352,
            "content": "var cat = ''; // pie / donut/ radial",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10361,
            "content": "var lbFormatter = w.globals.yLabelFormatters[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10362,
            "content": "var sr = new Series(_this3.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10363,
            "content": "var activeSeries = sr.getActiveConfigSeriesIndex();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10391,
            "content": "var handleAxisRowsColumns = function handleAxisRowsColumns(s, sI) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10399,
            "content": "var cat = getCat(i);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10449,
            "content": "var sname = s.name ? s.name : \"series-\".concat(sI);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10477,
            "content": "var downloadLink = document.createElement('a');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10495,
            "content": "var XAxis = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10501,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10549,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10551,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10552,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10553,
            "content": "var elXaxis = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10557,
            "content": "var elXaxisTexts = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10562,
            "content": "var colWidth; // initial x Position (keep adding column width in the loop)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10564,
            "content": "var xPos = w.globals.padHorizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10565,
            "content": "var labels = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10571,
            "content": "var labelsLen = labels.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10574,
            "content": "var len = labelsLen > 1 ? labelsLen - 1 : labelsLen;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10582,
            "content": "var _loop = function _loop(_i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10583,
            "content": "var x = xPos - colWidth / 2 + w.config.xaxis.labels.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10590,
            "content": "var label = _this.axesUtils.getLabel(labels, w.globals.timescaleLabels, x, _i, _this.drawnLabels, _this.xaxisFontSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10592,
            "content": "var offsetYCorrection = 28;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10598,
            "content": "var isCategoryTickAmounts = typeof w.config.xaxis.tickAmount !== 'undefined' && w.config.xaxis.tickAmount !== 'dataPoints' && w.config.xaxis.type !== 'datetime';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10606,
            "content": "var getCatForeColor = function getCatForeColor() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10615,
            "content": "var elText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10628,
            "content": "var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10647,
            "content": "var elXaxisTitle = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10650,
            "content": "var elXAxisTitleText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10666,
            "content": "var offX = w.globals.barPadForNumericAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10667,
            "content": "var elHorzLine = graphics.drawLine(w.globals.padHorizontal + w.config.xaxis.axisBorder.offsetX - offX, this.offY, this.xaxisBorderWidth + offX, this.offY, w.config.xaxis.axisBorder.color, 0, this.xaxisBorderHeight);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10677,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10679,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10680,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10681,
            "content": "var translateYAxisX = w.config.yaxis[0].opposite ? w.globals.translateYAxisX[realIndex] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10682,
            "content": "var elYaxis = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10686,
            "content": "var elYaxisTexts = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10691,
            "content": "var colHeight; // initial x Position (keep adding column width in the loop)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10693,
            "content": "var yPos;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10694,
            "content": "var labels = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10704,
            "content": "var lbFormatter = w.globals.yLabelFormatters[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10705,
            "content": "var ylabels = w.config.yaxis[0].labels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10708,
            "content": "var _loop2 = function _loop2(_i2) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10709,
            "content": "var label = typeof labels[_i2] === 'undefined' ? '' : labels[_i2];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10716,
            "content": "var yColors = _this2.axesUtils.getYAxisForeColor(ylabels.style.colors, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10718,
            "content": "var getForeColor = function getForeColor() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10722,
            "content": "var multiY = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10728,
            "content": "var elLabel = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10741,
            "content": "var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10746,
            "content": "var labelRotatingCenter = graphics.rotateAroundCenter(elLabel.node);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10759,
            "content": "var elXaxisTitle = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10763,
            "content": "var elXAxisTitleText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10778,
            "content": "var offX = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10784,
            "content": "var axisBorder = w.config.xaxis.axisBorder;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10787,
            "content": "var elVerticalLine = graphics.drawLine(w.globals.padHorizontal + axisBorder.offsetX + offX, 1 + axisBorder.offsetY, w.globals.padHorizontal + axisBorder.offsetX + offX, w.globals.gridHeight + axisBorder.offsetY, axisBorder.color, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10800,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10801,
            "content": "var x2 = x1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10803,
            "content": "var y1 = this.offY + w.config.xaxis.axisTicks.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10804,
            "content": "var y2 = y1 + w.config.xaxis.axisTicks.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10811,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10812,
            "content": "var line = graphics.drawLine(x1 + w.config.xaxis.axisTicks.offsetX, y1 + w.config.xaxis.offsetY, x2 + w.config.xaxis.axisTicks.offsetX, y2 + w.config.xaxis.offsetY, w.config.xaxis.axisTicks.color); // we are not returning anything, but appending directly to the element passed in param",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10821,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10822,
            "content": "var xAxisTicksPositions = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10823,
            "content": "var xCount = this.xaxisLabels.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10824,
            "content": "var x1 = w.globals.padHorizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10832,
            "content": "var xCountForCategoryCharts = xCount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10835,
            "content": "var x1Count = xCountForCategoryCharts;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10852,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10853,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10854,
            "content": "var xAxis = w.globals.dom.baseEl.querySelector('.apexcharts-xaxis-texts-g');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10855,
            "content": "var xAxisTexts = w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-texts-g text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10856,
            "content": "var yAxisTextsInversed = w.globals.dom.baseEl.querySelectorAll('.apexcharts-yaxis-inversed text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10857,
            "content": "var xAxisTextsInversed = w.globals.dom.baseEl.querySelectorAll('.apexcharts-xaxis-inversed-texts-g text tspan');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10861,
            "content": "var textRotatingCenter = graphics.rotateAroundCenter(xAxisTexts[xat]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10867,
            "content": "var offsetHeight = 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10869,
            "content": "var tSpan = xAxisTexts[xat].childNodes;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10879,
            "content": "var width = w.globals.gridWidth / (w.globals.labels.length + 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10882,
            "content": "var _tSpan = xAxisTexts[_xat].childNodes;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10895,
            "content": "var firstLabelPosX = yAxisTextsInversed[yAxisTextsInversed.length - 1].getBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10896,
            "content": "var lastLabelPosX = yAxisTextsInversed[0].getBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10928,
            "content": "var Grid = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10934,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10949,
            "content": "var elGrid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10950,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10951,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10959,
            "content": "var elVerticalLine = graphics.drawLine(w.globals.padHorizontal, 1, w.globals.padHorizontal, w.globals.gridHeight, 'transparent');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10960,
            "content": "var elHorzLine = graphics.drawLine(w.globals.padHorizontal, w.globals.gridHeight, w.globals.gridWidth, w.globals.gridHeight, 'transparent');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10968,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10969,
            "content": "var elgrid = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10983,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10984,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10985,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10986,
            "content": "var strokeSize = Array.isArray(w.config.stroke.width) ? 0 : w.config.stroke.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 10989,
            "content": "var strokeMaxSize = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11005,
            "content": "var type = w.config.chart.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11006,
            "content": "var hasBar = type === 'bar' || type === 'rangeBar' || type === 'candlestick' || type === 'boxPlot' || w.globals.comboBarCount > 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11007,
            "content": "var barWidthLeft = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11008,
            "content": "var barWidthRight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11021,
            "content": "var coreUtils = new CoreUtils(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11023,
            "content": "var markerSize = w.globals.markers.largestSize + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11027,
            "content": "var defs = gl.dom.baseEl.querySelector('defs');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11036,
            "content": "var i = _ref.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11043,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11045,
            "content": "var shouldDraw = function shouldDraw() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11072,
            "content": "var xAxis = new XAxis(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11079,
            "content": "var x1 = _ref2.x1,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11084,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11085,
            "content": "var isHorzLine = parent.node.classList.contains('apexcharts-gridlines-horizontal');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11086,
            "content": "var strokeDashArray = w.config.grid.strokeDashArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11087,
            "content": "var offX = w.globals.barPadForNumericAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11088,
            "content": "var graphics = new Graphics(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11089,
            "content": "var line = graphics.drawLine(x1 - (isHorzLine ? offX : 0), y1, x2 + (isHorzLine ? offX : 0), y2, w.config.grid.borderColor, strokeDashArray);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11096,
            "content": "var c = _ref3.c,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11102,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11103,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11104,
            "content": "var offX = w.globals.barPadForNumericAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11106,
            "content": "var color = w.config.grid[type].colors[c];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11107,
            "content": "var rect = graphics.drawRect(x1 - (type === 'row' ? offX : 0), y1, x2 + (type === 'row' ? offX * 2 : 0), y2, 0, color, w.config.grid[type].opacity);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11115,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11117,
            "content": "var xCount = _ref4.xCount,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11119,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11121,
            "content": "var datetimeLines = function datetimeLines(_ref5) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11122,
            "content": "var xC = _ref5.xC,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11144,
            "content": "var categoryLines = function categoryLines(_ref6) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11145,
            "content": "var xC = _ref6.xC,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11153,
            "content": "var visibleLabels = w.globals.dom.baseEl.querySelectorAll('.apexcharts-text.apexcharts-xaxis-label tspan:not(:empty)');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11155,
            "content": "var textRect = d.getBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11193,
            "content": "var x1 = w.globals.padHorizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11194,
            "content": "var y1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11195,
            "content": "var x2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11196,
            "content": "var y2 = w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11228,
            "content": "var _x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11229,
            "content": "var _y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11230,
            "content": "var _y2 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11231,
            "content": "var _x2 = w.globals.gridWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11232,
            "content": "var tA = tickAmount + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11255,
            "content": "var xCount = _ref7.xCount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11256,
            "content": "var w = this.w; // draw vertical lines",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11259,
            "content": "var x1 = w.globals.padHorizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11260,
            "content": "var y1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11261,
            "content": "var x2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11262,
            "content": "var y2 = w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11275,
            "content": "var xAxis = new XAxis(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11284,
            "content": "var _x3 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11285,
            "content": "var _y3 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11286,
            "content": "var _y4 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11287,
            "content": "var _x4 = w.globals.gridWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11307,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11308,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11326,
            "content": "var yTickAmount = w.globals.yAxisScale.length ? w.globals.yAxisScale[0].result.length - 1 : 5;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11336,
            "content": "var xCount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11373,
            "content": "var w = this.w; // rows background bands",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11376,
            "content": "var x1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11377,
            "content": "var y1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11378,
            "content": "var y2 = w.globals.gridHeight / tickAmount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11379,
            "content": "var x2 = w.globals.gridWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11401,
            "content": "var xc = !w.globals.isBarHorizontal && (w.config.xaxis.type === 'category' || w.config.xaxis.convertedCatToNumeric) ? xCount - 1 : xCount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11402,
            "content": "var _x5 = w.globals.padHorizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11403,
            "content": "var _y5 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11405,
            "content": "var _x6 = w.globals.padHorizontal + w.globals.gridWidth / xc;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11407,
            "content": "var _y6 = w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11432,
            "content": "var Range$1 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11445,
            "content": "var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11446,
            "content": "var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11447,
            "content": "var NO_MIN_MAX_PROVIDED = arguments.length > 4 ? arguments[4] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11448,
            "content": "var w = this.w; // Determine Range",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11450,
            "content": "var range = Math.abs(yMax - yMin);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11461,
            "content": "var linearScale = this.linearScale(yMin, yMax, ticks);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11487,
            "content": "var result = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11494,
            "content": "var tiks = ticks + 1; // Adjust ticks if needed",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11503,
            "content": "var tempStep = range / tiks; // Calculate pretty step value",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11505,
            "content": "var mag = Math.floor(Utils$1.log10(tempStep));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11506,
            "content": "var magPow = Math.pow(10, mag);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11507,
            "content": "var magMsd = Math.round(tempStep / magPow);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11513,
            "content": "var stepSize = magMsd * magPow; // build Y label array.",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11516,
            "content": "var lb = stepSize * Math.floor(yMin / stepSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11517,
            "content": "var ub = stepSize * Math.ceil(yMax / stepSize); // Build array",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11519,
            "content": "var val = lb;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11538,
            "content": "var v = yMin;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11540,
            "content": "var valuesDivider = Math.abs(yMax - yMin) / ticks;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11561,
            "content": "var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11562,
            "content": "var index = arguments.length > 3 ? arguments[3] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11563,
            "content": "var range = Math.abs(yMax - yMin);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11570,
            "content": "var step = range / ticks;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11577,
            "content": "var result = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11578,
            "content": "var v = yMin;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11595,
            "content": "var logs = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11596,
            "content": "var ticks = Math.ceil(Math.log(yMax) / Math.log(base)) + 1; // Get powers of base up to our max, and then one more",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11611,
            "content": "var newTicks = ticks;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11614,
            "content": "var formattedVal = this.w.config.yaxis[index].labels.formatter(1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11626,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11627,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11628,
            "content": "var y = gl.isBarHorizontal ? cnf.xaxis : cnf.yaxis[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11634,
            "content": "var diff = Math.abs(maxY - minY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11655,
            "content": "var noMinMaxProvided = cnf.yaxis[index].max === undefined && cnf.yaxis[index].min === undefined || cnf.yaxis[index].forceNiceScale;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11665,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11666,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11667,
            "content": "var x = w.config.xaxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11668,
            "content": "var diff = Math.abs(maxX - minX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11682,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11684,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11685,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11686,
            "content": "var minYArr = gl.minYArr.concat([]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11687,
            "content": "var maxYArr = gl.maxYArr.concat([]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11688,
            "content": "var scalesIndices = []; // here, we loop through the yaxis array and find the item which has \"seriesName\" property",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11691,
            "content": "var index = i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11712,
            "content": "var minY = minYArr[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11713,
            "content": "var maxY = maxYArr[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11722,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11724,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11725,
            "content": "var gl = this.w.globals; // we got the scalesIndices array in the above code, but we need to filter out the items which doesn't have same scales",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11727,
            "content": "var similarIndices = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11756,
            "content": "var uniqueSimilarIndices = similarIndices.map(function (item) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11762,
            "content": "var sortedIndices = uniqueSimilarIndices.map(function (s) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11769,
            "content": "var indices = sortedIndices.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11770,
            "content": "var stringIndices = indices.map(function (ind) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11776,
            "content": "var sameScaleMinYArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11777,
            "content": "var sameScaleMaxYArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11798,
            "content": "var sameScaleMin = Array.apply(null, Array(indices.length)).map(Number.prototype.valueOf, Number.MIN_VALUE);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11799,
            "content": "var sameScaleMax = Array.apply(null, Array(indices.length)).map(Number.prototype.valueOf, -Number.MAX_VALUE);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11812,
            "content": "var minY = sameScaleMin[si];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11813,
            "content": "var maxY = sameScaleMax[si];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11862,
            "content": "var w = ctx.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11871,
            "content": "var seriesX = w.globals.seriesX[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11872,
            "content": "var isStacked = w.config.chart.stacked;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11874,
            "content": "var firstXIndex = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11883,
            "content": "var initialMin = w.globals.minYArr[yi];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11884,
            "content": "var initialMax = w.globals.maxYArr[yi];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11885,
            "content": "var min, max;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11886,
            "content": "var stackedSer = w.globals.stackedSeriesTotals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11888,
            "content": "var firstValue = serie[firstXIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11903,
            "content": "var valMin = y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11904,
            "content": "var valMax = y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11955,
            "content": "var Range = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11974,
            "content": "var lowestY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11975,
            "content": "var highestY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Number.MAX_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11976,
            "content": "var len = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11977,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11978,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11979,
            "content": "var maxY = -Number.MAX_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11980,
            "content": "var minY = Number.MIN_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11986,
            "content": "var series = gl.series;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11987,
            "content": "var seriesMin = series;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 11988,
            "content": "var seriesMax = series;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12005,
            "content": "var val = series[i][j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12090,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12091,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12094,
            "content": "var lowestYInAllSeries = Number.MAX_VALUE;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12099,
            "content": "var minYMaxYArr = this.getMinYMaxY(i, lowestYInAllSeries, null, i + 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12107,
            "content": "var minYMaxY = this.getMinYMaxY(0, lowestYInAllSeries, null, gl.series.length);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12121,
            "content": "var diff = gl.maxY - lowestYInAllSeries;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12171,
            "content": "var minmax = ['min', 'max'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12206,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12207,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12208,
            "content": "var isXNumeric = cnf.xaxis.type === 'numeric' || cnf.xaxis.type === 'datetime' || cnf.xaxis.type === 'category' && !gl.noLabelsProvided || gl.noLabelsProvided || gl.isXNumeric;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12210,
            "content": "var getInitialMinXMaxX = function getInitialMinXMaxX() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12240,
            "content": "var ticks;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12282,
            "content": "var catScale = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12331,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12348,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12349,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12352,
            "content": "var datetimeObj = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12355,
            "content": "var newMinX = datetimeObj.getDate(gl.minX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12358,
            "content": "var newMaxX = datetimeObj.getDate(gl.maxX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12372,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12384,
            "content": "var seriesX = sX.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12390,
            "content": "var xDiff = s - seriesX[j - 1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12408,
            "content": "var gl = this.w.globals; // for stacked charts, we calculate each series's parallel values. i.e, series[0][j] + series[1][j] .... [series[i.length][j]] and get the max out of it",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12410,
            "content": "var stackedPoss = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12411,
            "content": "var stackedNegs = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12415,
            "content": "var poss = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12416,
            "content": "var negs = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12450,
            "content": "var YAxis = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12456,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12474,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12476,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12477,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12478,
            "content": "var yaxisStyle = w.config.yaxis[realIndex].labels.style;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12479,
            "content": "var yaxisFontSize = yaxisStyle.fontSize;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12480,
            "content": "var yaxisFontFamily = yaxisStyle.fontFamily;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12481,
            "content": "var yaxisFontWeight = yaxisStyle.fontWeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12482,
            "content": "var elYaxis = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12492,
            "content": "var elYaxisTexts = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12496,
            "content": "var tickAmount = w.globals.yAxisScale[realIndex].result.length - 1; // labelsDivider is simply svg height/number of ticks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12498,
            "content": "var labelsDivider = w.globals.gridHeight / tickAmount; // initial label position = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12500,
            "content": "var l = w.globals.translateY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12501,
            "content": "var lbFormatter = w.globals.yLabelFormatters[realIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12502,
            "content": "var labels = w.globals.yAxisScale[realIndex].result.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12504,
            "content": "var firstLabel = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12507,
            "content": "var _loop = function _loop(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12508,
            "content": "var val = labels[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12510,
            "content": "var xPad = w.config.yaxis[realIndex].labels.padding;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12516,
            "content": "var yColors = _this.axesUtils.getYAxisForeColor(yaxisStyle.colors, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12518,
            "content": "var getForeColor = function getForeColor() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12522,
            "content": "var label = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12540,
            "content": "var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12545,
            "content": "var firstabelRotatingCenter = graphics.rotateAroundCenter(firstLabel.node);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12546,
            "content": "var labelRotatingCenter = graphics.rotateAroundCenter(label.node);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12559,
            "content": "var elYaxisTitle = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12562,
            "content": "var _x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12568,
            "content": "var elYAxisTitleText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12583,
            "content": "var axisBorder = w.config.yaxis[realIndex].axisBorder;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12584,
            "content": "var x = 31 + axisBorder.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12591,
            "content": "var elVerticalLine = graphics.drawLine(x, w.globals.translateY + axisBorder.offsetY - 2, x, w.globals.gridHeight + w.globals.translateY + axisBorder.offsetY + 2, axisBorder.color, 0, axisBorder.width);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12605,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12606,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12607,
            "content": "var elXaxis = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12610,
            "content": "var elXaxisTexts = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12615,
            "content": "var tickAmount = w.globals.yAxisScale[realIndex].result.length - 1; // labelsDivider is simply svg width/number of ticks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12617,
            "content": "var labelsDivider = w.globals.gridWidth / tickAmount + 0.1; // initial label position;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12619,
            "content": "var l = labelsDivider + w.config.xaxis.labels.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12620,
            "content": "var lbFormatter = w.globals.xLabelFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12621,
            "content": "var labels = w.globals.yAxisScale[realIndex].result.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12622,
            "content": "var timescaleLabels = w.globals.timescaleLabels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12631,
            "content": "var tl = timescaleLabels.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12635,
            "content": "var val = labels[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12637,
            "content": "var x = w.globals.gridWidth + w.globals.padHorizontal - (l - labelsDivider + w.config.xaxis.labels.offsetX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12640,
            "content": "var label = this.axesUtils.getLabel(labels, timescaleLabels, x, i, this.drawnLabels, this.xaxisFontSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12654,
            "content": "var elTick = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12668,
            "content": "var elTooltipTitle = document.createElementNS(w.globals.SVGNS, 'title');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12682,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12683,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12684,
            "content": "var axisBorder = w.config.xaxis.axisBorder;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12687,
            "content": "var lineCorrection = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12693,
            "content": "var elHorzLine = graphics.drawLine(w.globals.padHorizontal + lineCorrection + axisBorder.offsetX, this.xAxisoffX, w.globals.gridWidth, this.xAxisoffX, axisBorder.color, 0, axisBorder.height);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12700,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12701,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12704,
            "content": "var elYaxisTitle = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12707,
            "content": "var elYAxisTitleText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12725,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12726,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12727,
            "content": "var yAxisLabelsCoord = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12731,
            "content": "var yAxisTitleCoord = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12735,
            "content": "var elYAxisLabelsWrap = w.globals.dom.baseEl.querySelector(\" .apexcharts-yaxis[rel='\".concat(realIndex, \"'] .apexcharts-yaxis-texts-g\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12741,
            "content": "var yAxisTitle = w.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(realIndex, \"'] .apexcharts-yaxis-title text\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12748,
            "content": "var x = this.xPaddingForYAxisTitle(realIndex, yAxisLabelsCoord, yAxisTitleCoord, yAxisOpposite);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12753,
            "content": "var titleRotatingCenter = graphics.rotateAroundCenter(yAxisTitle);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12760,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12761,
            "content": "var oppositeAxisCount = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12762,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12763,
            "content": "var padd = 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12797,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12798,
            "content": "var xLeft = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12799,
            "content": "var xRight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12800,
            "content": "var leftOffsetX = 18;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12801,
            "content": "var rightOffsetX = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12808,
            "content": "var shouldNotDrawAxis = w.globals.ignoreYAxisIndexes.indexOf(index) > -1 || !yaxe.show || yaxe.floating || yaxisLabelCoords[index].width === 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12809,
            "content": "var axisWidth = yaxisLabelCoords[index].width + yTitleCoords[index].width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12838,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12839,
            "content": "var yaxis = w.globals.dom.baseEl.getElementsByClassName(\"apexcharts-yaxis\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12842,
            "content": "var yaxe = w.config.yaxis[index]; // proceed only if user has specified alignment",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12845,
            "content": "var yAxisInner = w.globals.dom.baseEl.querySelector(\".apexcharts-yaxis[rel='\".concat(index, \"'] .apexcharts-yaxis-texts-g\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12846,
            "content": "var yAxisTexts = w.globals.dom.baseEl.querySelectorAll(\".apexcharts-yaxis[rel='\".concat(index, \"'] .apexcharts-yaxis-label\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12848,
            "content": "var rect = yAxisInner.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12880,
            "content": "var Events = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12892,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12903,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12909,
            "content": "var index = w.globals.events[name].indexOf(handler);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12918,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12928,
            "content": "var evs = w.globals.events[name];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12929,
            "content": "var l = evs.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12938,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12940,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12941,
            "content": "var me = this.ctx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12942,
            "content": "var clickableArea = w.globals.dom.baseEl.querySelector(w.globals.chartClass);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12945,
            "content": "var opts = Object.assign({}, w, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12980,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12981,
            "content": "var target = e.target.className;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12984,
            "content": "var elMenu = w.globals.dom.baseEl.querySelector('.apexcharts-menu');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 12999,
            "content": "var Localization = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13010,
            "content": "var locales = this.w.config.chart.locales; // check if user has specified locales in global Apex variable",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13018,
            "content": "var selectedLocale = locales.filter(function (c) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13024,
            "content": "var ret = Utils$1.extend(en, selectedLocale); // store these locale options in global var for ease access",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13036,
            "content": "var Axes = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13047,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13048,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13049,
            "content": "var xAxis = new XAxis(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13050,
            "content": "var yAxis = new YAxis(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13053,
            "content": "var elXaxis, elYaxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13077,
            "content": "var Crosshairs = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13088,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13089,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13090,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13091,
            "content": "var crosshairGradient = w.config.xaxis.crosshairs.fill.gradient;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13092,
            "content": "var crosshairShadow = w.config.xaxis.crosshairs.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13093,
            "content": "var fillType = w.config.xaxis.crosshairs.fill.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13094,
            "content": "var gradientFrom = crosshairGradient.colorFrom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13095,
            "content": "var gradientTo = crosshairGradient.colorTo;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13096,
            "content": "var opacityFrom = crosshairGradient.opacityFrom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13097,
            "content": "var opacityTo = crosshairGradient.opacityTo;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13098,
            "content": "var stops = crosshairGradient.stops;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13099,
            "content": "var shadow = 'none';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13100,
            "content": "var dropShadow = crosshairShadow.enabled;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13101,
            "content": "var shadowLeft = crosshairShadow.left;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13102,
            "content": "var shadowTop = crosshairShadow.top;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13103,
            "content": "var shadowBlur = crosshairShadow.blur;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13104,
            "content": "var shadowColor = crosshairShadow.color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13105,
            "content": "var shadowOpacity = crosshairShadow.opacity;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13106,
            "content": "var xcrosshairsFill = w.config.xaxis.crosshairs.fill.color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13113,
            "content": "var xcrosshairs = graphics.drawRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13120,
            "content": "var gridHeight = w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13126,
            "content": "var crosshairsWidth = w.config.xaxis.crosshairs.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13163,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13164,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13165,
            "content": "var crosshair = w.config.yaxis[0].crosshairs;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13166,
            "content": "var offX = w.globals.barPadForNumericAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13169,
            "content": "var ycrosshairs = graphics.drawLine(-offX, 0, w.globals.gridWidth + offX, 0, crosshair.stroke.color, crosshair.stroke.dashArray, crosshair.stroke.width);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13177,
            "content": "var ycrosshairsHidden = graphics.drawLine(-offX, 0, w.globals.gridWidth + offX, 0, crosshair.stroke.color, 0, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13194,
            "content": "var Responsive = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13207,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13209,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13210,
            "content": "var cnf = w.config; // check if responsive config exists",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13213,
            "content": "var res = cnf.responsive.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13217,
            "content": "var config = new Config({});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13219,
            "content": "var iterateResponsiveOptions = function iterateResponsiveOptions() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13220,
            "content": "var newOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13221,
            "content": "var largestBreakpoint = res[0].breakpoint;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13222,
            "content": "var width = window.innerWidth > 0 ? window.innerWidth : screen.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13225,
            "content": "var options = CoreUtils.extendArrayProps(config, w.globals.initialConfig, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13243,
            "content": "var options = CoreUtils.extendArrayProps(config, opts, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13254,
            "content": "var newConfig = new Config(newOptions).init({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13270,
            "content": "var Theme = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13277,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13291,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13293,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13294,
            "content": "var utils = new Utils$1();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13304,
            "content": "var c = w.config.colors[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13330,
            "content": "var monoArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13331,
            "content": "var glsCnt = w.globals.series.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13337,
            "content": "var mainColor = w.config.theme.monochrome.color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13338,
            "content": "var part = 1 / (glsCnt / w.config.theme.monochrome.shadeIntensity);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13339,
            "content": "var shade = w.config.theme.monochrome.shadeTo;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13340,
            "content": "var percent = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13343,
            "content": "var newColor = void 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13359,
            "content": "var defaultColors = w.globals.colors.slice(); // if user specified fewer colors than no. of series, push the same colors again",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13362,
            "content": "var colorTypes = ['fill', 'stroke'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13404,
            "content": "var distributed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13405,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13406,
            "content": "var len = length || w.globals.series.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13417,
            "content": "var diff = len - colorSeries.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13429,
            "content": "var mode = options.theme.mode || 'light';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13430,
            "content": "var palette = options.theme.palette ? options.theme.palette : mode === 'dark' ? 'palette4' : 'palette1';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13431,
            "content": "var foreColor = options.chart.foreColor ? options.chart.foreColor : mode === 'dark' ? '#f6f7f8' : '#373d3f';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13440,
            "content": "var palette = this.w.config.theme.palette; // D6E3F8, FCEFEF, DCE0D9, A5978B, EDDDD4, D6E3F8, FEF5EF",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13495,
            "content": "var TitleSubtitle = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13512,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13513,
            "content": "var tsConfig = type === 'title' ? w.config.title : w.config.subtitle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13514,
            "content": "var x = w.globals.svgWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13515,
            "content": "var y = tsConfig.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13516,
            "content": "var textAnchor = 'middle';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13530,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13531,
            "content": "var titleText = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13551,
            "content": "var Helpers$2 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13568,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13569,
            "content": "var width = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13570,
            "content": "var height = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13571,
            "content": "var floating = type === 'title' ? w.config.title.floating : w.config.subtitle.floating;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13572,
            "content": "var el = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(type, \"-text\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13575,
            "content": "var coord = el.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13588,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13589,
            "content": "var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13596,
            "content": "var lgRect = Object.assign({}, Utils$1.getBoundingClientRect(elLegendWrap));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13626,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13627,
            "content": "var valArr = val;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13631,
            "content": "var maxArrs = arr.map(function (xl, idx) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13634,
            "content": "var maxArrLen = Math.max.apply(Math, _toConsumableArray(maxArrs));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13635,
            "content": "var maxArrIndex = maxArrs.indexOf(maxArrLen);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13646,
            "content": "var DimXAxis = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13663,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13664,
            "content": "var xaxisLabels = w.globals.labels.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13670,
            "content": "var rect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13673,
            "content": "var coords = this.getxAxisTimeScaleLabelsCoords();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13682,
            "content": "var xlbFormatter = w.globals.xLabelFormatter; // prevent changing xaxisLabels to avoid issues in multi-yaxes - fix #522",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13684,
            "content": "var val = Utils$1.getLargestStringFromArr(xaxisLabels);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13685,
            "content": "var valArr = this.dCtx.dimHelpers.getLargestStringFromMultiArr(val, xaxisLabels); // the labels gets changed for bar charts",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13694,
            "content": "var xFormat = new Formatters(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13695,
            "content": "var timestamp = val;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13712,
            "content": "var graphics = new Graphics(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13713,
            "content": "var xLabelrect = graphics.getTextRects(val, w.config.xaxis.labels.style.fontSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13714,
            "content": "var xArrLabelrect = xLabelrect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13729,
            "content": "var getRotatedTextRects = function getRotatedTextRects(text) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13768,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13769,
            "content": "var width = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13770,
            "content": "var height = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13773,
            "content": "var graphics = new Graphics(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13774,
            "content": "var rect = graphics.getTextRects(w.config.xaxis.title.text, w.config.xaxis.title.style.fontSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13787,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13788,
            "content": "var rect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13790,
            "content": "var labels = this.dCtx.timescaleLabels.map(function (label) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13794,
            "content": "var val = labels.reduce(function (a, b) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13803,
            "content": "var graphics = new Graphics(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13805,
            "content": "var totalWidthRotated = rect.width * 1.05 * labels.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13818,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13820,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13821,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13822,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13823,
            "content": "var xtype = cnf.xaxis.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13824,
            "content": "var lbWidth = xaxisLabelCoords.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13827,
            "content": "var isBarOpposite = w.config.yaxis[0].opposite && w.globals.isBarHorizontal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13829,
            "content": "var isCollapsed = function isCollapsed(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13833,
            "content": "var rightPad = function rightPad(yaxe) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13836,
            "content": "var firstimescaleLabel = _this.dCtx.timescaleLabels[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13837,
            "content": "var lastTimescaleLabel = _this.dCtx.timescaleLabels[_this.dCtx.timescaleLabels.length - 1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13838,
            "content": "var lastLabelPosition = lastTimescaleLabel.position + lbWidth / 1.75 - _this.dCtx.yAxisWidthRight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13839,
            "content": "var firstLabelPosition = firstimescaleLabel.position - lbWidth / 1.75 + _this.dCtx.yAxisWidthLeft;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13840,
            "content": "var lgRightRectWidth = w.config.legend.position === 'right' && _this.dCtx.lgRect.width > 0 ? _this.dCtx.lgRect.width : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13861,
            "content": "var padYAxe = function padYAxe(yaxe, i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13894,
            "content": "var DimYAxis = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13911,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13913,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13914,
            "content": "var width = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13915,
            "content": "var height = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13916,
            "content": "var ret = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13917,
            "content": "var labelPad = 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13918,
            "content": "var axesUtils = new AxesUtils(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13920,
            "content": "var yS = w.globals.yAxisScale[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13921,
            "content": "var yAxisMinWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13925,
            "content": "var lbFormatter = w.globals.yLabelFormatters[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13926,
            "content": "var minV = yS.niceMin === Number.MIN_VALUE ? 0 : yS.niceMin;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13927,
            "content": "var longestStr = String(minV).length > String(yS.niceMax).length ? minV : yS.niceMax; // the second parameter -1 is the index of tick which user can use in the formatter",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13929,
            "content": "var val = lbFormatter(longestStr, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13934,
            "content": "var valArr = val; // if user has specified a custom formatter, and the result is null or empty, we need to discard the formatter and take the value as it is.",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13942,
            "content": "var barYaxisLabels = w.globals.labels.slice(); //  get the longest string from the labels array and also apply label formatter to it",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13953,
            "content": "var graphics = new Graphics(_this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13954,
            "content": "var rotateStr = 'rotate('.concat(yaxe.labels.rotate, ' 0 0)');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13955,
            "content": "var rect = graphics.getTextRects(val, yaxe.labels.style.fontSize, yaxe.labels.style.fontFamily, rotateStr, false);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13956,
            "content": "var arrLabelrect = rect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13984,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13986,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13987,
            "content": "var ret = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13990,
            "content": "var graphics = new Graphics(_this2.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13991,
            "content": "var rotateStr = 'rotate('.concat(yaxe.title.rotate, ' 0 0)');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 13992,
            "content": "var rect = graphics.getTextRects(yaxe.title.text, yaxe.title.style.fontSize, yaxe.title.style.fontFamily, rotateStr, false);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14009,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14010,
            "content": "var yAxisWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14011,
            "content": "var yAxisWidthLeft = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14012,
            "content": "var yAxisWidthRight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14013,
            "content": "var padding = w.globals.yAxisScale.length > 1 ? 10 : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14014,
            "content": "var axesUtils = new AxesUtils(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14016,
            "content": "var isHiddenYAxis = function isHiddenYAxis(index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14020,
            "content": "var padForLabelTitle = function padForLabelTitle(coord, index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14021,
            "content": "var floating = w.config.yaxis[index].floating;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14022,
            "content": "var width = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14058,
            "content": "var DimGrid = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14069,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14075,
            "content": "var hasBar = function hasBar(type) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14079,
            "content": "var type = w.config.chart.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14080,
            "content": "var barWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14081,
            "content": "var seriesLen = hasBar(type) ? w.config.series.length : 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14097,
            "content": "var barsPresent = hasBar(type) || w.globals.comboBarCount > 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14100,
            "content": "var xRatio = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14101,
            "content": "var xRange = Math.abs(w.globals.initialMaxX - w.globals.initialMinX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14108,
            "content": "var xDivision; // max barwidth should be equal to minXDiff to avoid overlap",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14133,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14135,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14136,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14137,
            "content": "var gridShrinkOffset = this.dCtx.isSparkline || !w.globals.axisCharts ? 0 : 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14138,
            "content": "var titleSubtitle = ['title', 'subtitle'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14151,
            "content": "var titleCoords = this.dCtx.dimHelpers.getTitleSubtitleCoords('title');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14152,
            "content": "var subtitleCoords = this.dCtx.dimHelpers.getTitleSubtitleCoords('subtitle');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14159,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14160,
            "content": "var axesUtils = new AxesUtils(this.dCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14185,
            "content": "var Dimensions = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14215,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14216,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14231,
            "content": "var barWidth = this.dimGrid.gridPadForColumnsInNumericAxis(gl.gridWidth);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14239,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14241,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14242,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14243,
            "content": "var yaxisLabelCoords = this.dimYAxis.getyAxisLabelsCoords();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14244,
            "content": "var yTitleCoords = this.dimYAxis.getyAxisTitleCoords();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14259,
            "content": "var xaxisLabelCoords = this.dimXAxis.getxAxisLabelsCoords();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14260,
            "content": "var xtitleCoords = this.dimXAxis.getxAxisTitleCoords();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14272,
            "content": "var yAxisWidth = this.yAxisWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14273,
            "content": "var xAxisHeight = this.xAxisHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14277,
            "content": "var translateY = 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14301,
            "content": "var legendTopBottom = function legendTopBottom() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14340,
            "content": "var objyAxis = new YAxis(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14346,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14347,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14348,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14349,
            "content": "var xPad = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14355,
            "content": "var type = cnf.chart.type === 'pie' || cnf.chart.type === 'polarArea' || cnf.chart.type === 'donut' ? 'pie' : 'radialBar';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14356,
            "content": "var offY = cnf.plotOptions[type].offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14357,
            "content": "var offX = cnf.plotOptions[type].offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14403,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14404,
            "content": "var baseXAxisHeight = xaxisLabelCoords.height + xtitleCoords.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14405,
            "content": "var xAxisHeightMultiplicate = w.globals.isMultiLineX ? 1.2 : w.globals.LINE_HEIGHT_RATIO;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14406,
            "content": "var rotatedXAxisOffset = w.globals.rotateXLabels ? 22 : 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14407,
            "content": "var rotatedXAxisLegendOffset = w.globals.rotateXLabels && w.config.legend.position === 'bottom';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14408,
            "content": "var additionalOffset = rotatedXAxisLegendOffset ? 10 : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14424,
            "content": "var minYAxisWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14425,
            "content": "var maxYAxisWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14444,
            "content": "var Helpers$1 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14455,
            "content": "var stylesheet = document.createElement('style');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14457,
            "content": "var text = \"\\t\\n    \\t\\n      .apexcharts-legend {\\t\\n        display: flex;\\t\\n        overflow: auto;\\t\\n        padding: 0 10px;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom, .apexcharts-legend.apx-legend-position-top {\\t\\n        flex-wrap: wrap\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\t\\n        flex-direction: column;\\t\\n        bottom: 0;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-left, .apexcharts-legend.apx-legend-position-top.apexcharts-align-left, .apexcharts-legend.apx-legend-position-right, .apexcharts-legend.apx-legend-position-left {\\t\\n        justify-content: flex-start;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-center, .apexcharts-legend.apx-legend-position-top.apexcharts-align-center {\\t\\n        justify-content: center;  \\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom.apexcharts-align-right, .apexcharts-legend.apx-legend-position-top.apexcharts-align-right {\\t\\n        justify-content: flex-end;\\t\\n      }\\t\\n      .apexcharts-legend-series {\\t\\n        cursor: pointer;\\t\\n        line-height: normal;\\t\\n      }\\t\\n      .apexcharts-legend.apx-legend-position-bottom .apexcharts-legend-series, .apexcharts-legend.apx-legend-position-top .apexcharts-legend-series{\\t\\n        display: flex;\\t\\n        align-items: center;\\t\\n      }\\t\\n      .apexcharts-legend-text {\\t\\n        position: relative;\\t\\n        font-size: 14px;\\t\\n      }\\t\\n      .apexcharts-legend-text *, .apexcharts-legend-marker * {\\t\\n        pointer-events: none;\\t\\n      }\\t\\n      .apexcharts-legend-marker {\\t\\n        position: relative;\\t\\n        display: inline-block;\\t\\n        cursor: pointer;\\t\\n        margin-right: 3px;\\t\\n        border-style: solid;\\n      }\\t\\n      \\t\\n      .apexcharts-legend.apexcharts-align-right .apexcharts-legend-series, .apexcharts-legend.apexcharts-align-left .apexcharts-legend-series{\\t\\n        display: inline-block;\\t\\n      }\\t\\n      .apexcharts-legend-series.apexcharts-no-click {\\t\\n        cursor: auto;\\t\\n      }\\t\\n      .apexcharts-legend .apexcharts-hidden-zero-series, .apexcharts-legend .apexcharts-hidden-null-series {\\t\\n        display: none !important;\\t\\n      }\\t\\n      .apexcharts-inactive-legend {\\t\\n        opacity: 0.45;\\t\\n      }\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14458,
            "content": "var rules = document.createTextNode(text);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14465,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14466,
            "content": "var currLegendsWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14467,
            "content": "var currLegendsWrapRect = currLegendsWrap.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14468,
            "content": "var currLegendsWrapWidth = currLegendsWrapRect.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14469,
            "content": "var currLegendsWrapHeight = currLegendsWrapRect.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14478,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14480,
            "content": "var elForeign = gl.dom.elLegendForeign;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14495,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14497,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14502,
            "content": "var seriesEl = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14503,
            "content": "var realIndex = null; // yes, make it null. 1 series will rise at a time",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14516,
            "content": "var seriesToMakeVisible = [{",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14534,
            "content": "var _seriesEl = w.globals.dom.Paper.select(\" .apexcharts-series[rel='\".concat(seriesCnt + 1, \"'] path\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14536,
            "content": "var type = w.config.chart.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14539,
            "content": "var dataLabels = w.config.plotOptions.pie.donut.labels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14540,
            "content": "var graphics = new Graphics(this.lgCtx.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14551,
            "content": "var seriesEl = _ref.seriesEl,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14553,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14554,
            "content": "var series = Utils$1.clone(w.config.series);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14557,
            "content": "var shouldNotHideYAxis = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14579,
            "content": "var removeIndexOfRising = w.globals.risingSeries.indexOf(realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14590,
            "content": "var seriesChildren = seriesEl.childNodes;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14610,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14611,
            "content": "var series = Utils$1.clone(w.config.series);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14638,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14667,
            "content": "var Legend = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14682,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14683,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14684,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14685,
            "content": "var showLegendAlways = cnf.legend.showForSingleSeries && gl.series.length === 1 || this.isBarsDistributed || gl.series.length > 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14711,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14712,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14713,
            "content": "var fontFamily = w.config.legend.fontFamily;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14714,
            "content": "var legendNames = w.globals.seriesNames;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14715,
            "content": "var fillcolor = w.globals.colors.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14718,
            "content": "var ranges = w.config.plotOptions.heatmap.colorScale.ranges;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14733,
            "content": "var legendFormatter = w.globals.legendFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14734,
            "content": "var isLegendInversed = w.config.legend.inverseOrder;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14737,
            "content": "var text = legendFormatter(legendNames[i], {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14741,
            "content": "var collapsedSeries = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14742,
            "content": "var ancillaryCollapsedSeries = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14760,
            "content": "var elMarker = document.createElement('span');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14762,
            "content": "var mOffsetX = w.config.legend.markers.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14763,
            "content": "var mOffsetY = w.config.legend.markers.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14764,
            "content": "var mHeight = w.config.legend.markers.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14765,
            "content": "var mWidth = w.config.legend.markers.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14766,
            "content": "var mBorderWidth = w.config.legend.markers.strokeWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14767,
            "content": "var mBorderColor = w.config.legend.markers.strokeColor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14768,
            "content": "var mBorderRadius = w.config.legend.markers.radius;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14769,
            "content": "var mStyle = elMarker.style;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14811,
            "content": "var elLegend = document.createElement('div');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14812,
            "content": "var elLegendText = document.createElement('span');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14815,
            "content": "var textColor = w.config.legend.labels.useSeriesColors ? w.globals.colors[i] : w.config.legend.labels.colors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14833,
            "content": "var coreUtils = new CoreUtils(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14836,
            "content": "var total = coreUtils.getSeriesTotalByIndex(i);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14881,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14882,
            "content": "var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14883,
            "content": "var legendRect = elLegendWrap.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14884,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14885,
            "content": "var y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14890,
            "content": "var dim = new Dimensions(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14891,
            "content": "var titleH = dim.dimHelpers.getTitleSubtitleCoords('title').height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14892,
            "content": "var subtitleH = dim.dimHelpers.getTitleSubtitleCoords('subtitle').height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14910,
            "content": "var fixedHeigthWidth = ['width', 'height'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14920,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14921,
            "content": "var elLegendWrap = w.globals.dom.baseEl.querySelector('.apexcharts-legend');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14923,
            "content": "var lRect = this.legendHelpers.getLegendBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14924,
            "content": "var dimensions = new Dimensions(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14925,
            "content": "var titleRect = dimensions.dimHelpers.getTitleSubtitleCoords('title');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14926,
            "content": "var subtitleRect = dimensions.dimHelpers.getTitleSubtitleCoords('subtitle');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14927,
            "content": "var offsetX = 20;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14928,
            "content": "var offsetY = 0; // the whole legend box is set to bottom",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14941,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14942,
            "content": "var lRect = this.legendHelpers.getLegendBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14943,
            "content": "var offsetY = 20;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14944,
            "content": "var offsetX = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14959,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14960,
            "content": "var hoverOverLegend = e.target.classList.contains('apexcharts-legend-text') || e.target.classList.contains('apexcharts-legend-marker');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14964,
            "content": "var series = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14970,
            "content": "var seriesCnt = parseInt(e.target.getAttribute('rel'), 10) - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14973,
            "content": "var _series = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14982,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14986,
            "content": "var seriesCnt = parseInt(e.target.getAttribute('rel'), 10) - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14987,
            "content": "var isHidden = e.target.getAttribute('data:collapsed') === 'true';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14988,
            "content": "var legendClick = this.w.config.chart.events.legendClick;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 14995,
            "content": "var markerClick = this.w.config.legend.markers.onClick;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15003,
            "content": "var clickAllowed = w.config.chart.type !== 'treemap' && w.config.chart.type !== 'heatmap' && !this.isBarsDistributed;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15015,
            "content": "var icoPan = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" fill=\\\"#000000\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\">\\n    <defs>\\n        <path d=\\\"M0 0h24v24H0z\\\" id=\\\"a\\\"/>\\n    </defs>\\n    <clipPath id=\\\"b\\\">\\n        <use overflow=\\\"visible\\\" xlink:href=\\\"#a\\\"/>\\n    </clipPath>\\n    <path clip-path=\\\"url(#b)\\\" d=\\\"M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z\\\"/>\\n</svg>\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15017,
            "content": "var icoZoom = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" fill=\\\"#000000\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\">\\n    <path d=\\\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\\\"/>\\n    <path d=\\\"M0 0h24v24H0V0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\\\"/>\\n</svg>\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15019,
            "content": "var icoReset = \"<svg fill=\\\"#000000\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <path d=\\\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\\\"/>\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n</svg>\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15021,
            "content": "var icoZoomIn = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"/>\\n</svg>\\n\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15023,
            "content": "var icoZoomOut = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\">\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\\\"/>\\n</svg>\\n\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15025,
            "content": "var icoSelect = \"<svg fill=\\\"#6E8192\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <path d=\\\"M0 0h24v24H0z\\\" fill=\\\"none\\\"/>\\n    <path d=\\\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2z\\\"/>\\n</svg>\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15027,
            "content": "var icoMenu = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\"><path fill=\\\"none\\\" d=\\\"M0 0h24v24H0V0z\\\"/><path d=\\\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\\\"/></svg>\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15035,
            "content": "var Toolbar = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15041,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15052,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15054,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15056,
            "content": "var createDiv = function createDiv() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15060,
            "content": "var elToolbarWrap = createDiv();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15082,
            "content": "var toolbarControls = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15084,
            "content": "var appendZoomControl = function appendZoomControl(type, el, ico) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15085,
            "content": "var tool = type.toLowerCase();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15100,
            "content": "var zoomSelectionCtrls = function zoomSelectionCtrls(z) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15179,
            "content": "var menuItems = [{",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15208,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15234,
            "content": "var charts = this.ctx.getSyncedCharts();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15237,
            "content": "var el = type === 'selection' ? ch.ctx.toolbar.elSelection : ch.ctx.toolbar.elZoom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15238,
            "content": "var enabledType = type === 'selection' ? 'selectionEnabled' : 'zoomEnabled';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15251,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15270,
            "content": "var el = type === 'pan' ? this.elPan : this.elZoom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15271,
            "content": "var el2 = type === 'pan' ? this.elZoom : this.elPan;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15284,
            "content": "var charts = this.ctx.getSyncedCharts();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15299,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15301,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15306,
            "content": "var toggleEls = [this.elPan, this.elSelection, this.elZoom];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15316,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15323,
            "content": "var centerX = (this.minX + this.maxX) / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15324,
            "content": "var newMinX = (this.minX + centerX) / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15325,
            "content": "var newMaxX = (this.maxX + centerX) / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15327,
            "content": "var newMinXMaxX = this._getNewMinXMaxX(newMinX, newMaxX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15336,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15348,
            "content": "var centerX = (this.minX + this.maxX) / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15349,
            "content": "var newMinX = this.minX - (centerX - this.minX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15350,
            "content": "var newMaxX = this.maxX - (centerX - this.maxX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15352,
            "content": "var newMinXMaxX = this._getNewMinXMaxX(newMinX, newMaxX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15361,
            "content": "var shouldFloor = this.w.config.xaxis.convertedCatToNumeric;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15370,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15389,
            "content": "var xaxis = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15393,
            "content": "var beforeZoomRange = this.getBeforeZoomRange(xaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15399,
            "content": "var options = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15402,
            "content": "var yaxis = Utils$1.clone(w.globals.initialConfig.yaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15405,
            "content": "var scale = new Range$1(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15436,
            "content": "var newRange = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15450,
            "content": "var _this4 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15463,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15464,
            "content": "var exprt = new Exports(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15486,
            "content": "var charts = this.ctx.getSyncedCharts();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15488,
            "content": "var w = ch.w; // forget lastXAxis min/max as reset button isn't resetting the x-axis completely if zoomX is called before",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15498,
            "content": "var resetZoomRange = w.config.chart.events.beforeResetZoom(ch, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15515,
            "content": "var series = ch.ctx.series.emptyCollapsedSeries(Utils$1.clone(w.globals.initialSeries));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15542,
            "content": "var ZoomPanSelection = /*#__PURE__*/function (_Toolbar) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15545,
            "content": "var _super = _createSuper(ZoomPanSelection);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15548,
            "content": "var _this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15573,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15575,
            "content": "var xyRatios = _ref.xyRatios;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15576,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15577,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15630,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15631,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15632,
            "content": "var toolbar = this.ctx.toolbar;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15633,
            "content": "var zoomtype = w.globals.zoomEnabled ? w.config.chart.zoom.type : w.config.chart.selection.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15634,
            "content": "var autoSelected = w.config.chart.toolbar.autoSelected;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15646,
            "content": "var tc = e.target.classList;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15647,
            "content": "var falsePositives = tc.contains('apexcharts-selection-rect') || tc.contains('apexcharts-legend-marker') || tc.contains('apexcharts-legend-text') || e.target.parentNode.classList.contains('apexcharts-toolbar');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15653,
            "content": "var gridRectDim = me.gridRect.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15685,
            "content": "var _gridRectDim = me.gridRect.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15719,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15721,
            "content": "var rectDim = this.selectionRect.node.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15741,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15742,
            "content": "var xyRatios = this.xyRatios;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15749,
            "content": "var x = (w.config.chart.selection.xaxis.min - w.globals.minX) / xyRatios.xRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15750,
            "content": "var width = w.globals.gridWidth - (w.globals.maxX - w.config.chart.selection.xaxis.max) / xyRatios.xRatio - x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15751,
            "content": "var selectionRect = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15779,
            "content": "var x = _ref2.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15787,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15788,
            "content": "var zoomRect = this.zoomRect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15789,
            "content": "var selectionRect = this.selectionRect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15792,
            "content": "var scalingAttrs = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15847,
            "content": "var context = _ref3.context,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15849,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15850,
            "content": "var me = context;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15851,
            "content": "var gridRectDim = this.gridRect.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15852,
            "content": "var startX = me.startX - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15853,
            "content": "var startY = me.startY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15854,
            "content": "var inversedX = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15855,
            "content": "var inversedY = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15856,
            "content": "var selectionWidth = me.clientX - gridRectDim.left - startX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15857,
            "content": "var selectionHeight = me.clientY - gridRectDim.top - startY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15858,
            "content": "var selectionRect = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15910,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15912,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15913,
            "content": "var xyRatios = this.xyRatios;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15914,
            "content": "var selRect = this.selectionRect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15915,
            "content": "var timerInterval = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15922,
            "content": "var getSelAttr = function getSelAttr(attr) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15926,
            "content": "var draggedProps = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15938,
            "content": "var gridRectDim = _this3.gridRect.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15940,
            "content": "var selectionRect = selRect.node.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15941,
            "content": "var minX = w.globals.xAxisScale.niceMin + (selectionRect.left - gridRectDim.left) * xyRatios.xRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15942,
            "content": "var maxX = w.globals.xAxisScale.niceMin + (selectionRect.right - gridRectDim.left) * xyRatios.xRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15943,
            "content": "var minY = w.globals.yAxisScale[0].niceMin + (gridRectDim.bottom - selectionRect.bottom) * xyRatios.yRatio[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15944,
            "content": "var maxY = w.globals.yAxisScale[0].niceMax - (selectionRect.top - gridRectDim.top) * xyRatios.yRatio[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15945,
            "content": "var xyAxis = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15966,
            "content": "var context = _ref4.context,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15968,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15969,
            "content": "var me = context;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15970,
            "content": "var xyRatios = this.xyRatios;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15971,
            "content": "var toolbar = this.ctx.toolbar;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15974,
            "content": "var tempX = me.startX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15980,
            "content": "var tempY = me.startY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15985,
            "content": "var xLowestValue = undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15986,
            "content": "var xHighestValue = undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15997,
            "content": "var yHighestValue = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 15998,
            "content": "var yLowestValue = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16006,
            "content": "var yaxis = Utils$1.clone(w.globals.initialConfig.yaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16007,
            "content": "var xaxis = Utils$1.clone(w.globals.initialConfig.xaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16039,
            "content": "var scale = new Range$1(me.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16046,
            "content": "var beforeZoomRange = toolbar.getBeforeZoomRange(xaxis, yaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16054,
            "content": "var options = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16070,
            "content": "var _yaxis = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16071,
            "content": "var _xaxis = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16100,
            "content": "var context = _ref5.context;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16101,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16102,
            "content": "var me = context; // check to make sure there is data to compare against",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16106,
            "content": "var deltaX = w.globals.lastClientPosition.x - me.clientX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16107,
            "content": "var deltaY = w.globals.lastClientPosition.y - me.clientY; // check which direction had the highest amplitude and then figure out direction by checking if the value is greater or less than zero",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16125,
            "content": "var xLowestValue = w.globals.isRangeBar ? w.globals.minY : w.globals.minX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16126,
            "content": "var xHighestValue = w.globals.isRangeBar ? w.globals.maxY : w.globals.maxX; // on a category, we don't pan continuosly as it causes bugs",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16135,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16136,
            "content": "var newMinX = w.globals.minX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16137,
            "content": "var newMaxX = w.globals.maxX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16138,
            "content": "var centerX = (w.globals.maxX - w.globals.minX) / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16160,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16161,
            "content": "var xyRatios = this.xyRatios;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16162,
            "content": "var yaxis = Utils$1.clone(w.globals.initialConfig.yaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16163,
            "content": "var xRatio = xyRatios.xRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16164,
            "content": "var minX = w.globals.minX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16165,
            "content": "var maxX = w.globals.maxX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16188,
            "content": "var xaxis = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16194,
            "content": "var scale = new Range$1(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16200,
            "content": "var options = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16218,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16242,
            "content": "var Utils = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16263,
            "content": "var hoverArea = _ref.hoverArea,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16267,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16268,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16269,
            "content": "var hoverWidth = seriesBound.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16270,
            "content": "var hoverHeight = seriesBound.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16271,
            "content": "var xDivisor = hoverWidth / (w.globals.dataPoints - 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16272,
            "content": "var yDivisor = hoverHeight / w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16273,
            "content": "var hasBars = this.hasBars();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16279,
            "content": "var hoverX = clientX - seriesBound.left - w.globals.barPadForNumericAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16280,
            "content": "var hoverY = clientY - seriesBound.top;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16281,
            "content": "var notInRect = hoverX < 0 || hoverY < 0 || hoverX > hoverWidth || hoverY > hoverHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16296,
            "content": "var j = Math.round(hoverX / xDivisor);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16297,
            "content": "var jHorz = Math.floor(hoverY / yDivisor);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16304,
            "content": "var capturedSeries = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16305,
            "content": "var closest = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16306,
            "content": "var seriesXValArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16307,
            "content": "var seriesYValArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16327,
            "content": "var chartGridEl = this.ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16328,
            "content": "var chartGridElBoundingRect = chartGridEl.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16329,
            "content": "var transformedHoverX = hoverX * (chartGridElBoundingRect.width / hoverWidth);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16330,
            "content": "var transformedHoverY = hoverY * (chartGridElBoundingRect.height / hoverHeight);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16362,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16363,
            "content": "var activeIndex = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16364,
            "content": "var currIndex = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16365,
            "content": "var j = -1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16373,
            "content": "var currY = Yarrays[activeIndex][0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16374,
            "content": "var currX = Xarrays[activeIndex][0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16375,
            "content": "var diffX = Math.abs(hoverX - currX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16376,
            "content": "var diffY = Math.abs(hoverY - currY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16377,
            "content": "var diff = diffY + diffX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16380,
            "content": "var newdiffY = Math.abs(hoverY - Yarrays[arrIndex][innerKey]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16381,
            "content": "var newdiffX = Math.abs(hoverX - Xarrays[arrIndex][innerKey]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16382,
            "content": "var newdiff = newdiffX + newdiffY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16401,
            "content": "var activeIndex = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16402,
            "content": "var firstActiveSeriesIndex = Xarrays.map(function (xarr, index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16418,
            "content": "var curr = arr[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16419,
            "content": "var currIndex = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16420,
            "content": "var diff = Math.abs(val - curr);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16423,
            "content": "var newdiff = Math.abs(val - arr[i]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16448,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16449,
            "content": "var xSameForAllSeriesJArr = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16450,
            "content": "var seriesX = w.globals.seriesX.filter(function (s) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16473,
            "content": "var sameLen = true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16474,
            "content": "var initialSeries = this.w.globals.initialSeries;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16488,
            "content": "var bars = _toConsumableArray(allbars);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16490,
            "content": "var totalHeight = bars.reduce(function (acc, bar) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16505,
            "content": "var markersWraps = this.w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers-wrap');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16510,
            "content": "var markers = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16519,
            "content": "var markers = this.getElMarkers();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16530,
            "content": "var bars = this.getElBars();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16536,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16537,
            "content": "var hoverSize = w.config.markers.hover.size;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16548,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16549,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16555,
            "content": "var allTooltipSeriesGroups = ttCtx.allTooltipSeriesGroups;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16578,
            "content": "var Labels = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16591,
            "content": "var _ref$shared = _ref.shared,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16601,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16615,
            "content": "var values = this.getValuesToPrint({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16628,
            "content": "var tooltipEl = this.ttCtx.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16635,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16637,
            "content": "var i = _ref2.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16643,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16644,
            "content": "var val;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16645,
            "content": "var goalVals = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16647,
            "content": "var hasGoalValues = function hasGoalValues(gi) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16651,
            "content": "var xVal = values.xVal,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16654,
            "content": "var seriesName = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16655,
            "content": "var pColor = w.globals.colors[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16661,
            "content": "var _loop = function _loop(t, inverset) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16662,
            "content": "var f = _this.getFormatters(i);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16680,
            "content": "var tIndex = w.config.tooltip.inverseOrder ? inverset : t;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16683,
            "content": "var getValBySeriesIndex = function getValBySeriesIndex(index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16770,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16771,
            "content": "var yLbFormatter = w.globals.yLabelFormatters[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16772,
            "content": "var yLbTitleFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16813,
            "content": "var fn = _ref3.fn,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16817,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16829,
            "content": "var t = _ref4.t,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16836,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16837,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16838,
            "content": "var val = values.val,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16843,
            "content": "var ttItemsChildren = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16866,
            "content": "var ttYLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-y-label');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16872,
            "content": "var ttYVal = ttItems[t].querySelector('.apexcharts-tooltip-text-y-value');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16890,
            "content": "var ttGLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-goals-label');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16891,
            "content": "var ttGVal = ttItems[t].querySelector('.apexcharts-tooltip-text-goals-value');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16894,
            "content": "var createGoalsHtml = function createGoalsHtml() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16895,
            "content": "var gLabels = '<div >';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16896,
            "content": "var gVals = '<div>';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16921,
            "content": "var ttZLabel = ttItems[t].querySelector('.apexcharts-tooltip-text-z-label');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16923,
            "content": "var ttZVal = ttItems[t].querySelector('.apexcharts-tooltip-text-z-value');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16959,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16968,
            "content": "var firstTooltipSeriesGroup = w.globals.dom.baseEl.querySelector('.apexcharts-tooltip-series-group');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16979,
            "content": "var i = _ref5.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16981,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16982,
            "content": "var filteredSeriesX = this.ctx.series.filteredSeriesX();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16983,
            "content": "var xVal = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16984,
            "content": "var xAxisTTVal = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16985,
            "content": "var zVal = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16986,
            "content": "var val = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16987,
            "content": "var customFormatterOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 16993,
            "content": "var zFormatter = w.globals.ttZFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17003,
            "content": "var firstActiveSeriesIndex = this.tooltipUtil.getFirstActiveXArray(filteredSeriesX);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17011,
            "content": "var bufferXVal = xVal;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17014,
            "content": "var xFormat = new Formatters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17053,
            "content": "var i = _ref6.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17058,
            "content": "var tooltipEl = this.ttCtx.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17059,
            "content": "var fn = w.config.tooltip.custom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17087,
            "content": "var Position = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17106,
            "content": "var j = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17107,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17108,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17109,
            "content": "var xcrosshairs = ttCtx.getElXCrosshairs();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17110,
            "content": "var x = cx - ttCtx.xcrosshairsWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17111,
            "content": "var tickAmount = w.globals.labels.slice().length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17134,
            "content": "var tx = x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17153,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17178,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17179,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17183,
            "content": "var cy = ttCtx.xaxisOffY + w.config.xaxis.tooltip.offsetY + w.globals.translateY + 1 + w.config.xaxis.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17184,
            "content": "var xaxisTTText = ttCtx.xaxisTooltip.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17185,
            "content": "var xaxisTTTextWidth = xaxisTTText.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17190,
            "content": "var textRect = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17191,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17202,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17203,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17209,
            "content": "var ycrosshairsHiddenRectY1 = parseInt(ttCtx.ycrosshairsHidden.getAttribute('y1'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17210,
            "content": "var cy = w.globals.translateY + ycrosshairsHiddenRectY1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17211,
            "content": "var yAxisTTRect = ttCtx.yaxisTTEls[index].getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17212,
            "content": "var yAxisTTHeight = yAxisTTRect.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17213,
            "content": "var cx = w.globals.translateYAxisX[index] - 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17240,
            "content": "var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17241,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17242,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17243,
            "content": "var tooltipEl = ttCtx.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17244,
            "content": "var tooltipRect = ttCtx.tooltipRect;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17245,
            "content": "var pointR = r !== null ? parseFloat(r) : 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17246,
            "content": "var x = parseFloat(cx) + pointR + 5;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17247,
            "content": "var y = parseFloat(cy) + pointR / 2; // - tooltipRect.ttHeight / 2",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17262,
            "content": "var elGrid = ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17263,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17289,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17290,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17293,
            "content": "var allPoints = w.globals.dom.baseEl.querySelectorAll(\" .apexcharts-series[data\\\\:realIndex='\".concat(i, \"'] .apexcharts-marker\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17311,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17312,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17313,
            "content": "var cx = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17314,
            "content": "var cy = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17315,
            "content": "var pointsArr = w.globals.pointsArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17316,
            "content": "var hoverSize = ttCtx.tooltipUtil.getHoverMarkerSize(capturedSeries);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17317,
            "content": "var serType = w.config.series[capturedSeries].type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17326,
            "content": "var point = w.globals.dom.baseEl.querySelector(\".apexcharts-series[data\\\\:realIndex='\".concat(capturedSeries, \"'] .apexcharts-series-markers circle\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17346,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17347,
            "content": "var w = ttCtx.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17348,
            "content": "var cx = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17349,
            "content": "var cy = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17350,
            "content": "var activeSeries = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17351,
            "content": "var pointsArr = w.globals.pointsArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17352,
            "content": "var series = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17354,
            "content": "var hoverSize = ttCtx.tooltipUtil.getHoverMarkerSize(activeSeries);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17361,
            "content": "var points = ttCtx.tooltipUtil.getAllMarkers();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17365,
            "content": "var pointArr = pointsArr[p];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17376,
            "content": "var pcy = pointsArr[p][j][1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17392,
            "content": "var tcy = cy || w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17399,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17400,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17401,
            "content": "var barLen = w.globals.columnSeries ? w.globals.columnSeries.length : w.globals.series.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17402,
            "content": "var i = barLen >= 2 && barLen % 2 === 0 ? Math.floor(barLen / 2) : Math.floor(barLen / 2) + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17405,
            "content": "var series = new Series(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17409,
            "content": "var jBar = w.globals.dom.baseEl.querySelector(\".apexcharts-bar-series .apexcharts-series[rel='\".concat(i, \"'] path[j='\").concat(j, \"'], .apexcharts-candlestick-series .apexcharts-series[rel='\").concat(i, \"'] path[j='\").concat(j, \"'], .apexcharts-boxPlot-series .apexcharts-series[rel='\").concat(i, \"'] path[j='\").concat(j, \"'], .apexcharts-rangebar-series .apexcharts-series[rel='\").concat(i, \"'] path[j='\").concat(j, \"']\"));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17410,
            "content": "var bcx = jBar ? parseFloat(jBar.getAttribute('cx')) : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17411,
            "content": "var bcy = jBar ? parseFloat(jBar.getAttribute('cy')) : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17412,
            "content": "var bw = jBar ? parseFloat(jBar.getAttribute('barWidth')) : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17413,
            "content": "var bh = jBar ? parseFloat(jBar.getAttribute('barHeight')) : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17414,
            "content": "var elGrid = ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17415,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17445,
            "content": "var tcy = bcy || w.globals.gridHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17460,
            "content": "var Marker = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17473,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17474,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17475,
            "content": "var marker = new Markers(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17476,
            "content": "var elsSeries = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17486,
            "content": "var pointsMain = elsSeries[i].querySelector(\".apexcharts-series-markers-wrap\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17490,
            "content": "var point = void 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17491,
            "content": "var PointClasses = \"apexcharts-marker w\".concat((Math.random() + 1).toString(36).substring(4));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17497,
            "content": "var elPointOptions = marker.getMarkerConfig({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17503,
            "content": "var elPointsG = document.createElementNS(w.globals.SVGNS, 'g');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17513,
            "content": "var x = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17514,
            "content": "var y = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17515,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17521,
            "content": "var cx = point.getAttribute('cx');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17522,
            "content": "var cy = point.getAttribute('cy');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17533,
            "content": "var elGrid = this.ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17534,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17544,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17545,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17546,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17547,
            "content": "var col = j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17548,
            "content": "var points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17549,
            "content": "var newSize = w.config.markers.hover.size;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17552,
            "content": "var rel = points[p].getAttribute('rel');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17553,
            "content": "var index = points[p].getAttribute('index');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17561,
            "content": "var cx = points[p].getAttribute('cx');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17562,
            "content": "var cy = points[p].getAttribute('cy');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17576,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17577,
            "content": "var newSize = w.config.markers.hover.size;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17578,
            "content": "var elPoint = rel === 0 ? point.parentNode.firstChild : point.parentNode.lastChild;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17581,
            "content": "var index = parseInt(elPoint.getAttribute('index'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17594,
            "content": "var size = parseFloat(point.getAttribute('default-marker-size'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17600,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17601,
            "content": "var points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series:not(.apexcharts-series-collapsed) .apexcharts-marker');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17604,
            "content": "var size = parseFloat(points[p].getAttribute('default-marker-size'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17624,
            "content": "var Intersect = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17640,
            "content": "var e = _ref.e,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17645,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17646,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17649,
            "content": "var i = this.getAttr(e, 'i');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17650,
            "content": "var j = this.getAttr(e, 'j');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17651,
            "content": "var cx = this.getAttr(e, 'cx');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17652,
            "content": "var cy = this.getAttr(e, 'cy');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17653,
            "content": "var width = this.getAttr(e, 'width');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17654,
            "content": "var height = this.getAttr(e, 'height');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17673,
            "content": "var seriesBound = w.globals.dom.elWrap.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17687,
            "content": "var e = _ref2.e,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17691,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17692,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17693,
            "content": "var i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17694,
            "content": "var j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17697,
            "content": "var cx = parseInt(opt.paths.getAttribute('cx'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17698,
            "content": "var cy = parseInt(opt.paths.getAttribute('cy'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17699,
            "content": "var val = parseFloat(opt.paths.getAttribute('val'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17704,
            "content": "var el = Utils$1.findAncestor(opt.paths, 'apexcharts-series');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17729,
            "content": "var elGrid = ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17730,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17749,
            "content": "var e = _ref3.e,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17751,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17752,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17753,
            "content": "var tooltipEl = ttCtx.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17754,
            "content": "var bx = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17755,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17756,
            "content": "var y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17757,
            "content": "var i = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17758,
            "content": "var strokeWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17759,
            "content": "var barXY = this.getBarTooltipXY({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17764,
            "content": "var barHeight = barXY.barHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17765,
            "content": "var j = barXY.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17787,
            "content": "var seriesIndex = parseInt(opt.paths.parentNode.getAttribute('data:realIndex'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17788,
            "content": "var isReversed = w.globals.isMultipleYAxis ? w.config.yaxis[seriesIndex] && w.config.yaxis[seriesIndex].reversed : w.config.yaxis[0].reversed;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17797,
            "content": "var elGrid = ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17798,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17842,
            "content": "var e = _ref4.e,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17844,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17845,
            "content": "var j = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17846,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17847,
            "content": "var i = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17848,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17849,
            "content": "var y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17850,
            "content": "var barWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17851,
            "content": "var barHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17852,
            "content": "var cl = e.target.classList;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17855,
            "content": "var bar = e.target;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17856,
            "content": "var barRect = bar.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17857,
            "content": "var seriesBound = opt.elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17858,
            "content": "var bh = barRect.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17860,
            "content": "var bw = barRect.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17861,
            "content": "var cx = parseInt(bar.getAttribute('cx'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17862,
            "content": "var cy = parseInt(bar.getAttribute('cy'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17864,
            "content": "var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17867,
            "content": "var y1 = bar.getAttribute('data-range-y1');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17868,
            "content": "var y2 = bar.getAttribute('data-range-y2');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17944,
            "content": "var AxesTooltip = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17960,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17961,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17962,
            "content": "var isBottom = w.config.xaxis.position === 'bottom';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17964,
            "content": "var tooltipCssClass = isBottom ? 'apexcharts-xaxistooltip apexcharts-xaxistooltip-bottom' : 'apexcharts-xaxistooltip apexcharts-xaxistooltip-top';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17965,
            "content": "var renderTo = w.globals.dom.elWrap;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17968,
            "content": "var xaxisTooltip = w.globals.dom.baseEl.querySelector('.apexcharts-xaxistooltip');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17990,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17991,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17993,
            "content": "var _loop = function _loop(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17994,
            "content": "var isRight = w.config.yaxis[i].opposite || w.config.yaxis[i].crosshairs.opposite;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 17996,
            "content": "var tooltipCssClass = isRight ? \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, \" apexcharts-yaxistooltip-right\") : \"apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i, \" apexcharts-yaxistooltip-left\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18004,
            "content": "var renderTo = w.globals.dom.elWrap;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18005,
            "content": "var yaxisTooltip = w.globals.dom.baseEl.querySelector(\".apexcharts-yaxistooltip apexcharts-yaxistooltip-\".concat(i));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18029,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18030,
            "content": "var ttCtx = this.ttCtx; // set xcrosshairs width",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18032,
            "content": "var xcrosshairs = ttCtx.getElXCrosshairs();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18037,
            "content": "var count = w.globals.labels.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18040,
            "content": "var bar = w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18043,
            "content": "var barWidth = parseFloat(bar.getAttribute('barWidth'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18050,
            "content": "var _bar = w.globals.dom.baseEl.querySelector('.apexcharts-bar-area');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18053,
            "content": "var _barWidth = parseFloat(_bar.getAttribute('barWidth'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18058,
            "content": "var _count = w.globals.labels.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18075,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18076,
            "content": "var ttCtx = this.ttCtx; // set ycrosshairs height",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18084,
            "content": "var ttCtx = this.ttCtx;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18085,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18086,
            "content": "var lbFormatter = w.globals.yLabelFormatters[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18089,
            "content": "var elGrid = ttCtx.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18090,
            "content": "var seriesBound = elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18091,
            "content": "var hoverY = (clientY - seriesBound.top) * xyRatios.yRatio[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18092,
            "content": "var height = w.globals.maxYArr[index] - w.globals.minYArr[index];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18093,
            "content": "var val = w.globals.minYArr[index] + (height - hoverY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18110,
            "content": "var Tooltip = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18116,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18151,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18163,
            "content": "var tooltipEl = document.createElement('div');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18173,
            "content": "var xAxis = new XAxis(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18200,
            "content": "var ttItemsCnt = w.globals.series.length; // whether shared or not, default is shared",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18217,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18219,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18220,
            "content": "var ttItems = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18221,
            "content": "var tooltipEl = this.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18223,
            "content": "var _loop = function _loop(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18224,
            "content": "var gTxt = document.createElement('div');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18234,
            "content": "var point = document.createElement('span');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18238,
            "content": "var gYZ = document.createElement('div');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18243,
            "content": "var gValText = document.createElement('div');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18245,
            "content": "var txtLabel = document.createElement('span');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18248,
            "content": "var txtValue = document.createElement('span');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18267,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18268,
            "content": "var type = w.config.chart.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18269,
            "content": "var tooltipEl = this.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18270,
            "content": "var commonBar = !!(type === 'bar' || type === 'candlestick' || type === 'boxPlot' || type === 'rangeBar');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18271,
            "content": "var chartWithmarkers = type === 'area' || type === 'line' || type === 'scatter' || type === 'bubble' || type === 'radar';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18272,
            "content": "var hoverArea = w.globals.dom.Paper.node;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18273,
            "content": "var elGrid = this.getElGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18279,
            "content": "var tooltipY = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18280,
            "content": "var tooltipX = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18281,
            "content": "var seriesHoverParams = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18289,
            "content": "var points;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18308,
            "content": "var validSharedChartTypes = w.globals.xyCharts && !this.showOnIntersect || w.globals.comboCharts && !this.showOnIntersect || commonBar && this.tooltipUtil.hasBars() && this.tConfig.shared;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18315,
            "content": "var seriesAll = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18320,
            "content": "var lineAreaPoints = w.globals.dom.baseEl.querySelectorAll('.apexcharts-line-series .apexcharts-marker, .apexcharts-area-series .apexcharts-marker');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18336,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18337,
            "content": "var tooltipEl = this.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18338,
            "content": "var tooltipRect = tooltipEl.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18339,
            "content": "var ttWidth = tooltipRect.width + 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18340,
            "content": "var ttHeight = tooltipRect.height + 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18341,
            "content": "var x = this.tConfig.fixed.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18342,
            "content": "var y = this.tConfig.fixed.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18343,
            "content": "var fixed = this.tConfig.fixed.position.toLowerCase();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18365,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18366,
            "content": "var points = w.globals.dom.baseEl.querySelectorAll('.apexcharts-series-markers .apexcharts-marker, .apexcharts-bar-area, .apexcharts-candlestick-area, .apexcharts-boxPlot-area, .apexcharts-rangebar-area');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 18372,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 18372,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18374,
            "content": "var _loop2 = function _loop2(p) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18375,
            "content": "var extendedOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18384,
            "content": "var events = ['mousemove', 'mouseup', 'touchmove', 'mouseout', 'touchend'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18404,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18406,
            "content": "var chartGroups = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18407,
            "content": "var w = this.w; // if user has more than one charts in group, we need to sync",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18419,
            "content": "var tooltipEl = _this2.getElTooltip(ch);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18421,
            "content": "var newOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18452,
            "content": "var chartCtx = _ref.chartCtx,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18456,
            "content": "var w = chartCtx.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18457,
            "content": "var tooltipEl = this.getElTooltip(); // tooltipRect is calculated on every mousemove, because the text is dynamic",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18469,
            "content": "var series = new Series(chartCtx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18497,
            "content": "var e = _ref2.e,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18499,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18500,
            "content": "var x, y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18501,
            "content": "var seriesBound = opt.elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18502,
            "content": "var clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18503,
            "content": "var clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18515,
            "content": "var index = parseInt(opt.paths.getAttribute('index'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18523,
            "content": "var tooltipEl = this.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18524,
            "content": "var xcrosshairs = this.getElXCrosshairs();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18525,
            "content": "var isStickyTooltip = w.globals.xyCharts || w.config.chart.type === 'bar' && !w.globals.isBarHorizontal && this.tooltipUtil.hasBars() && this.tConfig.shared || w.globals.comboCharts && this.tooltipUtil.hasBars();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18532,
            "content": "var hasYAxisTooltip = this.yaxisTooltips.filter(function (b) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18544,
            "content": "var markerXY = this.intersect.handleHeatTreeTooltip({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18590,
            "content": "var e = _ref3.e,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18593,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18594,
            "content": "var rel = opt.paths.getAttribute('rel');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18595,
            "content": "var tooltipEl = this.getElTooltip();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18596,
            "content": "var seriesBound = w.globals.dom.elWrap.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18605,
            "content": "var x = w.globals.clientX - seriesBound.left - tooltipRect.ttWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18606,
            "content": "var y = w.globals.clientY - seriesBound.top - tooltipRect.ttHeight - 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18611,
            "content": "var legendFormatter = w.config.legend.tooltipHoverFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18612,
            "content": "var i = rel - 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18613,
            "content": "var legendName = this.legendLabels[i].getAttribute('data:default-text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18614,
            "content": "var text = legendFormatter(legendName, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18626,
            "content": "var defaultText = l.getAttribute('data:default-text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18635,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18636,
            "content": "var capj = this.tooltipUtil.getNearestValues({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18643,
            "content": "var j = capj.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18644,
            "content": "var capturedSeries = capj.capturedSeries;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18645,
            "content": "var bounds = opt.elGrid.getBoundingClientRect();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18665,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18668,
            "content": "var ignoreNull = w.globals.series[capturedSeries][j] === null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18691,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18692,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18693,
            "content": "var allPaths = w.globals.dom.Paper.select(\".apexcharts-bar-area\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18702,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18703,
            "content": "var xcrosshairs = this.getElXCrosshairs();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18735,
            "content": "var defaultText = l.getAttribute('data:default-text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18743,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18762,
            "content": "var shared = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18763,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18764,
            "content": "var ttCtx = context;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18771,
            "content": "var hasMarkers = this.tooltipUtil.hasMarkers();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18772,
            "content": "var bars = this.tooltipUtil.getElBars();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18775,
            "content": "var legendFormatter = w.config.legend.tooltipHoverFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18776,
            "content": "var els = Array.from(this.legendLabels); // reset all legend values first",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18779,
            "content": "var legendName = l.getAttribute('data:default-text');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18784,
            "content": "var l = els[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18785,
            "content": "var lsIndex = parseInt(l.getAttribute('i'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18786,
            "content": "var legendName = decodeURIComponent(l.getAttribute('data:default-text'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18787,
            "content": "var text = legendFormatter(legendName, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18826,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18827,
            "content": "var paths = w.globals.dom.Paper.select(\".apexcharts-bar-area[j='\".concat(j, \"']\")); // de-activate first",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18867,
            "content": "var BarStacked = /*#__PURE__*/function (_Bar) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18870,
            "content": "var _super = _createSuper(BarStacked);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18881,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18883,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18886,
            "content": "var coreUtils = new CoreUtils(this.ctx, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18927,
            "content": "var ret = this.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18930,
            "content": "var x = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18931,
            "content": "var y = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18933,
            "content": "var _loop = function _loop(i, bc) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18934,
            "content": "var xDivision = void 0; // xDivision is the GRIDWIDTH divided by number of datapoints (columns)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18936,
            "content": "var yDivision = void 0; // yDivision is the GRIDHEIGHT divided by number of datapoints (bars)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18938,
            "content": "var zeroH = void 0; // zeroH is the baseline where 0 meets y axis",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18940,
            "content": "var zeroW = void 0; // zeroW is the baseline where 0 meets x axis",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18942,
            "content": "var xArrValues = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18943,
            "content": "var yArrValues = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18944,
            "content": "var realIndex = w.globals.comboCharts ? seriesIndex[i] : i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18952,
            "content": "var elSeries = _this.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18962,
            "content": "var elDataLabelsWrap = _this.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18967,
            "content": "var barHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18968,
            "content": "var barWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 18970,
            "content": "var initPositions = _this.initialPositions(x, y, xDivision, yDivision, zeroH, zeroW);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19006,
            "content": "var strokeWidth = _this.barHelpers.getStrokeWidth(i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19008,
            "content": "var commonPathOpts = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19020,
            "content": "var paths = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19043,
            "content": "var pathFill = _this.barHelpers.getPathFillColor(series, i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19093,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19094,
            "content": "var barHeight, barWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19136,
            "content": "var indexes = _ref.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19144,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19145,
            "content": "var barYPosition = y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19146,
            "content": "var barXPosition;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19147,
            "content": "var i = indexes.i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19148,
            "content": "var j = indexes.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19149,
            "content": "var prevBarW = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19156,
            "content": "var bXP = zeroW;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19176,
            "content": "var paths = this.barHelpers.getBarpaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19206,
            "content": "var indexes = _ref2.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19213,
            "content": "var elSeries = _ref2.elSeries;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19214,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19215,
            "content": "var i = indexes.i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19216,
            "content": "var j = indexes.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19217,
            "content": "var bc = indexes.bc;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19220,
            "content": "var seriesVal = w.globals.seriesX[i][j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19225,
            "content": "var barXPosition = x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19226,
            "content": "var barYPosition;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19227,
            "content": "var prevBarH = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19236,
            "content": "var bYP;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19237,
            "content": "var prevYValue;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19238,
            "content": "var p = Math.min(this.yRatio.length + 1, i + 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19286,
            "content": "var paths = this.barHelpers.getColumnPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19326,
            "content": "var BoxCandleStick = /*#__PURE__*/function (_Bar) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19329,
            "content": "var _super = _createSuper(BoxCandleStick);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19340,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19342,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19343,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19344,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19347,
            "content": "var coreUtils = new CoreUtils(this.ctx, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19352,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19356,
            "content": "var _loop = function _loop(i) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19358,
            "content": "var x = void 0,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19364,
            "content": "var yArrj = []; // hold y values of current iterating series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19366,
            "content": "var xArrj = []; // hold x values of current iterating series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19368,
            "content": "var realIndex = w.globals.comboCharts ? seriesIndex[i] : i; // el to which series will be drawn",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19370,
            "content": "var elSeries = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19381,
            "content": "var barHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19382,
            "content": "var barWidth = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19388,
            "content": "var initPositions = _this.barHelpers.initialPositions();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19398,
            "content": "var elDataLabelsWrap = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19403,
            "content": "var _loop2 = function _loop2(j) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19404,
            "content": "var strokeWidth = _this.barHelpers.getStrokeWidth(i, j, realIndex);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19406,
            "content": "var paths = _this.drawBoxPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19430,
            "content": "var lineFill = !_this.isBoxPlot && _this.candlestickOptions.wick.useFillColor ? paths.color[pi] : w.globals.stroke.colors[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19431,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19479,
            "content": "var indexes = _ref.indexes,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19482,
            "content": "var xDivision = _ref.xDivision,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19486,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19487,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19488,
            "content": "var i = indexes.i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19489,
            "content": "var j = indexes.j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19490,
            "content": "var isPositive = true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19491,
            "content": "var colorPos = w.config.plotOptions.candlestick.colors.upward;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19492,
            "content": "var colorNeg = w.config.plotOptions.candlestick.colors.downward;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19493,
            "content": "var color = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19499,
            "content": "var yRatio = this.yRatio[this.yaxisIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19500,
            "content": "var realIndex = indexes.realIndex;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19501,
            "content": "var ohlc = this.getOHLCValue(realIndex, j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19502,
            "content": "var l1 = zeroH;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19503,
            "content": "var l2 = zeroH;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19509,
            "content": "var y1 = Math.min(ohlc.o, ohlc.c);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19510,
            "content": "var y2 = Math.max(ohlc.o, ohlc.c);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19511,
            "content": "var m = ohlc.m;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19517,
            "content": "var barXPosition = x + barWidth * this.visibleI;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19530,
            "content": "var pathTo = graphics.move(barXPosition, zeroH);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19531,
            "content": "var pathFrom = graphics.move(barXPosition + barWidth / 2, y1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19562,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19576,
            "content": "var TreemapHelpers = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19587,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19588,
            "content": "var negRange = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19589,
            "content": "var chartOpts = w.config.plotOptions[w.config.chart.type];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19604,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19605,
            "content": "var colorShadePercent = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19606,
            "content": "var shadeIntensity = w.config.plotOptions[chartType].shadeIntensity;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19607,
            "content": "var colorProps = this.determineColor(chartType, i, j);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19631,
            "content": "var color = colorProps.color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19632,
            "content": "var utils = new Utils$1();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19650,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19651,
            "content": "var val = w.globals.series[i][j];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19652,
            "content": "var chartOpts = w.config.plotOptions[chartType];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19653,
            "content": "var seriesNumber = chartOpts.colorScale.inverse ? j : i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19654,
            "content": "var isDistributed = w.config.plotOptions[chartType].distributed;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19660,
            "content": "var color = w.globals.colors[seriesNumber];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19661,
            "content": "var foreColor = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19662,
            "content": "var min = Math.min.apply(Math, _toConsumableArray(w.globals.series[i]));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19663,
            "content": "var max = Math.max.apply(Math, _toConsumableArray(w.globals.series[i]));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19675,
            "content": "var total = Math.abs(max) + Math.abs(min);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19676,
            "content": "var percent = 100 * val / (total === 0 ? total - 0.000001 : total);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19679,
            "content": "var colorRange = chartOpts.colorScale.ranges;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19686,
            "content": "var rTotal = Math.abs(max) + Math.abs(min);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19701,
            "content": "var text = _ref.text,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19708,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19709,
            "content": "var dataLabelsConfig = w.config.dataLabels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19710,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19711,
            "content": "var dataLabels = new DataLabels(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19712,
            "content": "var elDataLabelsWrap = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19718,
            "content": "var offX = dataLabelsConfig.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19719,
            "content": "var offY = dataLabelsConfig.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19720,
            "content": "var dataLabelsX = x + offX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19721,
            "content": "var dataLabelsY = y + parseFloat(dataLabelsConfig.style.fontSize) / 3 + offY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19740,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19755,
            "content": "var HeatMap = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19772,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19773,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19774,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19779,
            "content": "var xDivision = w.globals.gridWidth / w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19780,
            "content": "var yDivision = w.globals.gridHeight / w.globals.series.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19781,
            "content": "var y1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19782,
            "content": "var rev = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19784,
            "content": "var heatSeries = series.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19793,
            "content": "var elSeries = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19802,
            "content": "var shadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19803,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19807,
            "content": "var x1 = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19808,
            "content": "var shadeIntensity = w.config.plotOptions.heatmap.shadeIntensity;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19811,
            "content": "var heatColor = this.helpers.getShadeColor(w.config.chart.type, i, j, this.negRange);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19812,
            "content": "var color = heatColor.color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19813,
            "content": "var heatColorProps = heatColor.colorProps;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19816,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19827,
            "content": "var radius = this.rectRadius;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19828,
            "content": "var rect = graphics.drawRect(x1, y1, xDivision, yDivision, radius);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19848,
            "content": "var speed = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19858,
            "content": "var _speed = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19862,
            "content": "var colorFrom = w.globals.previousPaths[i] && w.globals.previousPaths[i][j] && w.globals.previousPaths[i][j].color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19868,
            "content": "var formatter = w.config.dataLabels.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19869,
            "content": "var formattedText = formatter(w.globals.series[i][j], {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19875,
            "content": "var dataLabels = this.helpers.calculateDataLabels({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19897,
            "content": "var yAxisScale = w.globals.yAxisScale[0].result.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19906,
            "content": "var divisor = w.globals.gridHeight / w.globals.series.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19913,
            "content": "var animations = new Animations(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19942,
            "content": "var CircularChartsHelpers = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19953,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19954,
            "content": "var yaxisConfig = w.config.yaxis[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19955,
            "content": "var formatter = w.globals.yLabelFormatters[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19956,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19957,
            "content": "var yaxisLabel = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19978,
            "content": "var Pie = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 19984,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20014,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 20016,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 20016,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20017,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20018,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20023,
            "content": "var total = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20030,
            "content": "var sectorAngleArr = []; // el to which series will be drawn",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20032,
            "content": "var elSeries = graphics.group(); // prevent division by zero error if there is no data",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20052,
            "content": "var angle = this.fullAngle * Utils$1.negToZero(series[i]) / total;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20064,
            "content": "var prevTotal = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20071,
            "content": "var previousAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20085,
            "content": "var scaleSize = w.config.plotOptions.pie.customScale;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20086,
            "content": "var halfW = w.globals.gridWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20087,
            "content": "var halfH = w.globals.gridHeight / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20088,
            "content": "var translateX = halfW - w.globals.gridWidth / 2 * scaleSize;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20089,
            "content": "var translateY = halfH - w.globals.gridHeight / 2 * scaleSize;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20093,
            "content": "var circle = graphics.drawCircle(this.donutSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20102,
            "content": "var elG = self.drawArcs(sectorAngleArr, series); // add slice dataLabels at the end",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20114,
            "content": "var dataLabels = this.renderInnerDataLabels(this.donutDataLabels, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20135,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20136,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20137,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20138,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20139,
            "content": "var g = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20142,
            "content": "var startAngle = this.initialAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20143,
            "content": "var prevStartAngle = this.initialAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20144,
            "content": "var endAngle = this.initialAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20145,
            "content": "var prevEndAngle = this.initialAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20149,
            "content": "var elPieArc = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20160,
            "content": "var angle = endAngle < startAngle ? this.fullAngle + endAngle - startAngle : endAngle - startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20161,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20167,
            "content": "var path = this.getChangedPath(prevStartAngle, prevEndAngle);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20168,
            "content": "var elPath = graphics.drawPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20183,
            "content": "var shadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20194,
            "content": "var labelPosition = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20207,
            "content": "var dur = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20253,
            "content": "var xPos = labelPosition.x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20254,
            "content": "var yPos = labelPosition.y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20255,
            "content": "var text = 100 * angle / this.fullAngle + '%';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20258,
            "content": "var formatter = w.config.dataLabels.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20267,
            "content": "var foreColor = w.globals.dataLabels.style.colors[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20268,
            "content": "var elPieLabelWrap = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20271,
            "content": "var elPieLabel = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20284,
            "content": "var textShadow = w.config.dataLabels.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20305,
            "content": "var graphics = new Graphics(this.ctx); // append filters on mouseenter and mouseleave",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20321,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20322,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20323,
            "content": "var angle = opts.endAngle < opts.startAngle ? this.fullAngle + opts.endAngle - opts.startAngle : opts.endAngle - opts.startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20324,
            "content": "var prevAngle = angle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20325,
            "content": "var fromStartAngle = opts.startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20326,
            "content": "var toStartAngle = opts.startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20348,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20349,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20350,
            "content": "var animations = new Animations(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20351,
            "content": "var size = opts.size;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20352,
            "content": "var path;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20360,
            "content": "var currAngle = angle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20361,
            "content": "var startAngle = toStartAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20362,
            "content": "var fromAngle = fromStartAngle < toStartAngle ? this.fullAngle + fromStartAngle - toStartAngle : fromStartAngle - toStartAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20431,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20432,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20433,
            "content": "var path;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20434,
            "content": "var size = me.sliceSizes[i] + (w.config.plotOptions.pie.expandOnClick ? 4 : 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20435,
            "content": "var elPath = w.globals.dom.Paper.select(\".apexcharts-\".concat(me.chartType.toLowerCase(), \"-slice-\").concat(i)).members[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20442,
            "content": "var origPath = elPath.attr('data:pathOrig');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20449,
            "content": "var allEls = w.globals.dom.baseEl.getElementsByClassName('apexcharts-pie-area');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20452,
            "content": "var origPath = pieSlice.getAttribute('data:pathOrig');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20458,
            "content": "var startAngle = parseInt(elPath.attr('data:startAngle'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20459,
            "content": "var angle = parseInt(elPath.attr('data:angle'), 10);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20472,
            "content": "var path = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20488,
            "content": "var me = _ref.me,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20492,
            "content": "var path;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20493,
            "content": "var startDeg = startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20494,
            "content": "var startRadians = Math.PI * (startDeg - 90) / 180;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20495,
            "content": "var endDeg = angle + startAngle; // prevent overlap",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20502,
            "content": "var endRadians = Math.PI * (endDeg - 90) / 180;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20503,
            "content": "var x1 = me.centerX + size * Math.cos(startRadians);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20504,
            "content": "var y1 = me.centerY + size * Math.sin(startRadians);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20505,
            "content": "var x2 = me.centerX + size * Math.cos(endRadians);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20506,
            "content": "var y2 = me.centerY + size * Math.sin(endRadians);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20507,
            "content": "var startInner = Utils$1.polarToCartesian(me.centerX, me.centerY, me.donutSize, endDeg);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20508,
            "content": "var endInner = Utils$1.polarToCartesian(me.centerX, me.centerY, me.donutSize, startDeg);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20509,
            "content": "var largeArc = angle > 180 ? 1 : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20510,
            "content": "var pathBeginning = ['M', x1, y1, 'A', size, size, 0, largeArc, 1, x2, y2];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20525,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20526,
            "content": "var scale = new Range$1(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20527,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20528,
            "content": "var helpers = new CircularChartsHelpers(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20529,
            "content": "var gCircles = graphics.group();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20530,
            "content": "var gYAxis = graphics.group();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20531,
            "content": "var yScale = scale.niceScale(0, Math.ceil(this.maxY), w.config.yaxis[0].tickAmount, 0, true);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20532,
            "content": "var yTexts = yScale.result.reverse();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20533,
            "content": "var len = yScale.result.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20535,
            "content": "var circleSize = w.globals.radialSize;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20536,
            "content": "var diff = circleSize / (len - 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20539,
            "content": "var circle = graphics.drawCircle(circleSize);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20549,
            "content": "var yLabel = helpers.drawYAxisTexts(this.centerX, this.centerY - circleSize + parseInt(w.config.yaxis[0].labels.style.fontSize, 10) / 2, i, yTexts[i]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20564,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20565,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20566,
            "content": "var g = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20570,
            "content": "var showTotal = dataLabelsConfig.total.show;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20572,
            "content": "var x = opts.centerX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20573,
            "content": "var y = opts.centerY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20574,
            "content": "var labelColor, valueColor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20582,
            "content": "var labelFontSize = dataLabelsConfig.name.fontSize;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20583,
            "content": "var labelFontFamily = dataLabelsConfig.name.fontFamily;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20584,
            "content": "var labelFontWeight = dataLabelsConfig.value.fontWeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20592,
            "content": "var lbFormatter = dataLabelsConfig.value.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20593,
            "content": "var val = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20594,
            "content": "var name = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20615,
            "content": "var elLabel = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20630,
            "content": "var valOffset = dataLabelsConfig.name.show ? parseFloat(dataLabelsConfig.value.offsetY) + 16 : dataLabelsConfig.value.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20631,
            "content": "var elValue = graphics.drawText({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20658,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20659,
            "content": "var labelColor;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20673,
            "content": "var elLabel = w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-label');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20674,
            "content": "var elValue = w.globals.dom.baseEl.querySelector('.apexcharts-datalabel-value');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20675,
            "content": "var lbFormatter = labelsConfig.value.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20682,
            "content": "var isTotal = name === labelsConfig.total.label;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20700,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20701,
            "content": "var val = el.getAttribute('data:value');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20702,
            "content": "var name = w.globals.seriesNames[parseInt(el.parentNode.getAttribute('rel'), 10) - 1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20708,
            "content": "var dataLabelsGroup = w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20717,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20719,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20720,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20721,
            "content": "var spokeConfig = w.config.plotOptions.polarArea.spokes;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20723,
            "content": "var spokes = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20724,
            "content": "var angleDivision = 360 / w.globals.series.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20731,
            "content": "var line = graphics.drawLine(p.x, p.y, _this2.centerX, _this2.centerY, Array.isArray(spokeConfig.connectorColors) ? spokeConfig.connectorColors[i] : spokeConfig.connectorColors);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20738,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20740,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20741,
            "content": "var dataLabelsGroup = w.globals.dom.baseEl.querySelector('.apexcharts-datalabels-group');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20742,
            "content": "var sliceOut = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20743,
            "content": "var slices = w.globals.dom.baseEl.getElementsByClassName(\"apexcharts-pie-area\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20745,
            "content": "var selectSlice = function selectSlice(_ref2) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20746,
            "content": "var makeSliceOut = _ref2.makeSliceOut,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20784,
            "content": "var index = w.globals.selectedDataPoints[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20785,
            "content": "var el = w.globals.dom.baseEl.querySelector(\".apexcharts-\".concat(this.chartType.toLowerCase(), \"-slice-\").concat(index));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20808,
            "content": "var Radar = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20818,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20847,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20849,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20850,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20851,
            "content": "var allSeries = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20852,
            "content": "var dataLabels = new DataLabels(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20859,
            "content": "var halfW = w.globals.gridWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20860,
            "content": "var halfH = w.globals.gridHeight / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20861,
            "content": "var translateX = halfW + w.config.plotOptions.radar.offsetX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20862,
            "content": "var translateY = halfH + w.config.plotOptions.radar.offsetY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20863,
            "content": "var ret = this.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20867,
            "content": "var dataPointsPos = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20868,
            "content": "var elPointsMain = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20869,
            "content": "var elDataPointsMain = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20874,
            "content": "var longestSeries = s.length === w.globals.dataPoints; // el to which series will be drawn",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20876,
            "content": "var elSeries = _this.graphics.group().attr({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20888,
            "content": "var range = Math.abs(_this.maxValue - _this.minValue);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20901,
            "content": "var paths = _this.createPaths(dataPointsPos, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20919,
            "content": "var defaultRenderedPathOptions = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20931,
            "content": "var pathFrom = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20938,
            "content": "var renderedLinePath = _this.graphics.renderPaths(_objectSpread2(_objectSpread2({}, defaultRenderedPathOptions), {}, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20947,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20951,
            "content": "var renderedAreaPath = _this.graphics.renderPaths(_objectSpread2(_objectSpread2({}, defaultRenderedPathOptions), {}, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20960,
            "content": "var filters = new Filters(_this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20961,
            "content": "var shadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20971,
            "content": "var markers = new Markers(_this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20972,
            "content": "var opts = markers.getMarkerConfig({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20978,
            "content": "var point = _this.graphics.drawMarker(dataPointsPos[j].x, dataPointsPos[j].y, opts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20985,
            "content": "var elPointsWrap = _this.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20995,
            "content": "var dataLabelsConfig = w.config.dataLabels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 20998,
            "content": "var text = dataLabelsConfig.formatter(w.globals.series[i][j], {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21025,
            "content": "var xaxisTexts = this.drawXAxisTexts();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21038,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21040,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21041,
            "content": "var parent = opts.parent;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21042,
            "content": "var helpers = new CircularChartsHelpers(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21043,
            "content": "var yaxisTexts = w.globals.yAxisScale[0].result.reverse();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21044,
            "content": "var layers = yaxisTexts.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21045,
            "content": "var radiusSizes = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21046,
            "content": "var layerDis = this.size / (layers - 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21053,
            "content": "var polygonStrings = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21054,
            "content": "var lines = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21056,
            "content": "var polygon = Utils$1.getPolygonPos(radiusSize, _this2.dataPointsLen);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21057,
            "content": "var string = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21060,
            "content": "var line = _this2.graphics.drawLine(p.x, p.y, 0, 0, Array.isArray(_this2.polygons.connectorColors) ? _this2.polygons.connectorColors[i] : _this2.polygons.connectorColors);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21077,
            "content": "var strokeColors = _this2.polygons.strokeColors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21078,
            "content": "var strokeWidth = _this2.polygons.strokeWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21080,
            "content": "var polygon = _this2.graphics.drawPolygon(p, Array.isArray(strokeColors) ? strokeColors[i] : strokeColors, Array.isArray(strokeWidth) ? strokeWidth[i] : strokeWidth, w.globals.radarPolygons.fill.colors[i]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21090,
            "content": "var yText = helpers.drawYAxisTexts(p.x, p.y, i, yaxisTexts[i]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21099,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21101,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21102,
            "content": "var xaxisLabelsConfig = w.config.xaxis.labels;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21103,
            "content": "var elXAxisWrap = this.graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21106,
            "content": "var polygonPos = Utils$1.getPolygonPos(this.size, this.dataPointsLen);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21108,
            "content": "var formatter = w.config.xaxis.labels.formatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21109,
            "content": "var dataLabels = new DataLabels(_this3.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21112,
            "content": "var textPos = _this3.getTextPos(polygonPos[i], _this3.size);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21114,
            "content": "var text = formatter(label, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21143,
            "content": "var _this4 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21145,
            "content": "var linePathsTo = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21146,
            "content": "var linePathsFrom = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21147,
            "content": "var areaPathsTo = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21148,
            "content": "var areaPathsFrom = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21153,
            "content": "var linePathTo = this.graphics.move(pos[0].x, pos[0].y);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21154,
            "content": "var areaPathTo = this.graphics.move(pos[0].x, pos[0].y);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21178,
            "content": "var limit = 10;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21179,
            "content": "var textAnchor = 'middle';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21180,
            "content": "var newX = pos.x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21181,
            "content": "var newY = pos.y;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21212,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21213,
            "content": "var pathFrom = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21216,
            "content": "var gpp = w.globals.previousPaths[pp];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21230,
            "content": "var dataPointsLen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dataPointsLen;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21233,
            "content": "var dataPointsPosArray = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21236,
            "content": "var curPointPos = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21254,
            "content": "var Radial = /*#__PURE__*/function (_Pie) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21257,
            "content": "var _super = _createSuper(Radial);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21260,
            "content": "var _this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21269,
            "content": "var w = _this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21286,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21287,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21288,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21292,
            "content": "var elSeries = graphics.group();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21293,
            "content": "var centerY = this.defaultSize / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21294,
            "content": "var centerX = w.globals.gridWidth / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21295,
            "content": "var size = this.defaultSize / 2.05;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21301,
            "content": "var colorArr = w.globals.fill.colors;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21304,
            "content": "var elTracks = this.drawTracks({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21314,
            "content": "var elG = this.drawArcs({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21321,
            "content": "var totalAngle = 360;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21327,
            "content": "var angleRatio = (360 - totalAngle) / 360;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21331,
            "content": "var offset = Math.max(this.radialDataLabels.value.offsetY, this.radialDataLabels.name.offsetY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21351,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21352,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21353,
            "content": "var g = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21356,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21357,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21358,
            "content": "var strokeWidth = this.getStrokeWidth(opts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21362,
            "content": "var elRadialBarTrack = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21370,
            "content": "var trackConfig = w.config.plotOptions.radialBar.track;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21371,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21377,
            "content": "var startAngle = this.trackStartAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21378,
            "content": "var endAngle = this.trackEndAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21380,
            "content": "var elPath = graphics.drawPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21390,
            "content": "var shadow = trackConfig.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21416,
            "content": "var w = this.w; // size, donutSize, centerX, centerY, colorArr, lineColorArr, sectorAngleArr, series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21418,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21419,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21420,
            "content": "var filters = new Filters(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21421,
            "content": "var g = graphics.group();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21422,
            "content": "var strokeWidth = this.getStrokeWidth(opts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21424,
            "content": "var hollowFillID = w.config.plotOptions.radialBar.hollow.background;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21425,
            "content": "var hollowSize = opts.size - strokeWidth * opts.series.length - this.margin * opts.series.length - strokeWidth * parseInt(w.config.plotOptions.radialBar.track.strokeWidth, 10) / 100 / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21426,
            "content": "var hollowRadius = hollowSize - w.config.plotOptions.radialBar.hollow.margin;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21432,
            "content": "var elHollow = this.drawHollow({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21440,
            "content": "var shadow = w.config.plotOptions.radialBar.hollow.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21444,
            "content": "var shown = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21450,
            "content": "var dataLabels = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21469,
            "content": "var reverseLoop = false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21476,
            "content": "var elRadialBarArc = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21487,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21492,
            "content": "var startAngle = this.startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21493,
            "content": "var prevStartAngle = void 0; // if data exceeds 100, make it 100",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21495,
            "content": "var dataValue = Utils$1.negToZero(opts.series[i] > 100 ? 100 : opts.series[i]) / 100;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21496,
            "content": "var endAngle = Math.round(this.totalAngle * dataValue) + this.startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21497,
            "content": "var prevEndAngle = void 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21504,
            "content": "var currFullAngle = Math.abs(endAngle) + Math.abs(startAngle);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21510,
            "content": "var prevFullAngle = Math.abs(prevEndAngle) + Math.abs(prevStartAngle);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21516,
            "content": "var angle = endAngle - startAngle;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21517,
            "content": "var dashArray = Array.isArray(w.config.stroke.dashArray) ? w.config.stroke.dashArray[i] : w.config.stroke.dashArray;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21518,
            "content": "var elPath = graphics.drawPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21533,
            "content": "var _shadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21544,
            "content": "var dur = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21584,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21585,
            "content": "var circle = graphics.drawCircle(opts.size * 2);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21598,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21599,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21600,
            "content": "var randID = Utils$1.randomId();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21601,
            "content": "var hollowFillImg = w.config.plotOptions.radialBar.hollow.image;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21612,
            "content": "var imgWidth = w.config.plotOptions.radialBar.hollow.imageWidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21613,
            "content": "var imgHeight = w.config.plotOptions.radialBar.hollow.imageHeight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21616,
            "content": "var image = w.globals.dom.Paper.image(hollowFillImg).loaded(function (loader) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21621,
            "content": "var _image = w.globals.dom.Paper.image(hollowFillImg).loaded(function (loader) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21635,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21643,
            "content": "var Helpers = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21654,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21657,
            "content": "var coreUtils = new CoreUtils(this.lineCtx.ctx, w); // a small adjustment to allow gradient line to draw correctly for all same values",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21662,
            "content": "var gSeries = series[i].slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21673,
            "content": "var series = _ref.series,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21680,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21681,
            "content": "var ptX = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21682,
            "content": "var ptY = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21685,
            "content": "var xPT1st = this.lineCtx.categoryAxisCorrection + w.config.markers.offsetX; // the first point for line series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21703,
            "content": "var pointsPos = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21712,
            "content": "var pathFromLine = _ref2.pathFromLine,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21715,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21718,
            "content": "var gpp = w.globals.previousPaths[pp];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21743,
            "content": "var i = _ref3.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21747,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21794,
            "content": "var Line = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21814,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21815,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21816,
            "content": "var type = w.globals.comboCharts ? ptype : w.config.chart.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21817,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21820,
            "content": "var coreUtils = new CoreUtils(this.ctx, w);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21828,
            "content": "var allSeries = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21832,
            "content": "var realIndex = w.globals.comboCharts ? seriesIndex[i] : i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21836,
            "content": "var yArrj = []; // hold y values of current iterating series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21838,
            "content": "var xArrj = []; // hold x values of current iterating series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21840,
            "content": "var x = w.globals.padHorizontal + this.categoryAxisCorrection;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21841,
            "content": "var y = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21842,
            "content": "var linePaths = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21843,
            "content": "var areaPaths = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21851,
            "content": "var pX = x;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21852,
            "content": "var pY = void 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21853,
            "content": "var prevX = pX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21854,
            "content": "var prevY = this.zeroY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21855,
            "content": "var lineYPosition = 0; // the first value in the current series is not null or undefined",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21857,
            "content": "var firstPrevY = this.lineHelpers.determineFirstPrevY({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21867,
            "content": "var pathsFrom = this._calculatePathsFrom({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21875,
            "content": "var paths = this._iterateOverDataPoints({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21919,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21920,
            "content": "var graphics = new Graphics(this.ctx); // width divided into equal parts",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21954,
            "content": "var longestSeries = series[i].length === w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21965,
            "content": "var series = _ref.series,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21970,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21971,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21972,
            "content": "var linePath, areaPath, pathFromLine, pathFromArea;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21994,
            "content": "var pathFrom = this.lineHelpers.checkPreviousPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22015,
            "content": "var type = _ref2.type,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22019,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22020,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22021,
            "content": "var fill = new Fill(this.ctx); // push all current y values array to main PrevY Array",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22027,
            "content": "var forecast = w.config.forecastDataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22030,
            "content": "var forecastCutoff = w.globals.seriesXvalues[realIndex][w.globals.seriesXvalues[realIndex].length - forecast.count - 1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22031,
            "content": "var elForecastMask = graphics.drawRect(forecastCutoff, 0, w.globals.gridWidth, w.globals.gridHeight, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22033,
            "content": "var elNonForecastMask = graphics.drawRect(0, 0, forecastCutoff, w.globals.gridHeight, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22045,
            "content": "var defaultRenderedPathOptions = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22055,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22060,
            "content": "var renderedPath = graphics.renderPaths(_objectSpread2(_objectSpread2({}, defaultRenderedPathOptions), {}, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22073,
            "content": "var lineFill = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22086,
            "content": "var linePathCommonOpts = _objectSpread2(_objectSpread2({}, defaultRenderedPathOptions), {}, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22095,
            "content": "var _renderedPath = graphics.renderPaths(linePathCommonOpts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22100,
            "content": "var renderedForecastPath = graphics.renderPaths(linePathCommonOpts);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22118,
            "content": "var series = _ref3.series,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22132,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22133,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22134,
            "content": "var yRatio = this.yRatio;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22135,
            "content": "var prevY = pathsFrom.prevY,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22140,
            "content": "var minY = Utils$1.isNumber(w.globals.minYArr[realIndex]) ? w.globals.minYArr[realIndex] : w.globals.minY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22141,
            "content": "var iterations = w.globals.dataPoints > 1 ? w.globals.dataPoints - 1 : w.globals.dataPoints;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22144,
            "content": "var isNull = typeof series[i][j + 1] === 'undefined' || series[i][j + 1] === null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22147,
            "content": "var sX = w.globals.seriesX[realIndex][j + 1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22162,
            "content": "var prevIndex = function prevIndex(pi) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22163,
            "content": "var pii = pi;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22194,
            "content": "var pointsPos = this.lineHelpers.calculatePoints({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22204,
            "content": "var calculatedPaths = this._createPaths({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22258,
            "content": "var pointsPos = _ref4.pointsPos;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22263,
            "content": "var i = _ref4.i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22266,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22267,
            "content": "var dataLabels = new DataLabels(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22274,
            "content": "var elPointsWrap = this.markers.plotChartMarkers(pointsPos, realIndex, j + 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22289,
            "content": "var drawnLabels = dataLabels.drawDataLabel(pointsPos, realIndex, j + 1, null);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22298,
            "content": "var series = _ref5.series,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22311,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22312,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22313,
            "content": "var curve = w.config.stroke.curve;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22314,
            "content": "var areaBottomY = this.areaBottomY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22327,
            "content": "var length = (x - pX) * 0.35;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22362,
            "content": "var numericOrCatX = w.globals.isXNumeric ? (w.globals.seriesX[realIndex][j] - w.globals.minX) / this.xRatio : x - this.xDivision;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22399,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22403,
            "content": "var elPointsWrap = this.markers.plotChartMarkers(pointsPos, realIndex, j + 1, this.strokeWidth - w.config.markers.strokeWidth / 2, true);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22462,
            "content": "var coordinates = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22463,
            "content": "var subxoffset = this.xoffset,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22466,
            "content": "var areawidth = sumArray(row) / this.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22467,
            "content": "var areaheight = sumArray(row) / this.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22468,
            "content": "var i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22489,
            "content": "var newcontainer;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22492,
            "content": "var areawidth = area / this.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22493,
            "content": "var newwidth = this.width - areawidth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22496,
            "content": "var areaheight = area / this.width;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22497,
            "content": "var newheight = this.height - areaheight;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22509,
            "content": "var normalizeddata = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22510,
            "content": "var sum = sumArray(data);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22511,
            "content": "var multiplier = area / sum;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22512,
            "content": "var i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22527,
            "content": "var mergeddata = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22528,
            "content": "var mergedtreemap;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22529,
            "content": "var results = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22530,
            "content": "var i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22554,
            "content": "var rawtreemap = squarify(normalize(data, width * height), [], new Container(xoffset, yoffset, width, height), []);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22562,
            "content": "var flattreemap = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22563,
            "content": "var i, j;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22578,
            "content": "var length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22579,
            "content": "var nextdatapoint;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22580,
            "content": "var newcontainer;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22605,
            "content": "var newrow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22613,
            "content": "var currentratio = calculateRatio(currentrow, length);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22614,
            "content": "var newratio = calculateRatio(newrow, length); // the pseudocode in the Bruls paper has the direction of the comparison",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22623,
            "content": "var min = Math.min.apply(Math, row);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22624,
            "content": "var max = Math.max.apply(Math, row);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22625,
            "content": "var sum = sumArray(row);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22636,
            "content": "var sum = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22637,
            "content": "var i;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22648,
            "content": "var i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22671,
            "content": "var TreemapChart = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22686,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22688,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22689,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22690,
            "content": "var fill = new Fill(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22691,
            "content": "var ret = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22695,
            "content": "var ser = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22697,
            "content": "var d = s.map(function (v) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22710,
            "content": "var nodes = window.TreemapSquared.generate(ser, w.globals.gridWidth, w.globals.gridHeight);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22712,
            "content": "var elSeries = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22720,
            "content": "var shadow = w.config.chart.dropShadow;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22721,
            "content": "var filters = new Filters(_this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22725,
            "content": "var elDataLabelWrap = graphics.group({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22729,
            "content": "var x1 = r[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22730,
            "content": "var y1 = r[1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22731,
            "content": "var x2 = r[2];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22732,
            "content": "var y2 = r[3];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22733,
            "content": "var elRect = graphics.drawRect(x1, y1, x2 - x1, y2 - y1, 0, '#fff', 1, _this.strokeWidth, w.config.plotOptions.treemap.useFillColorAsStroke ? color : w.globals.stroke.colors[i]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22744,
            "content": "var colorProps = _this.helpers.getShadeColor(w.config.chart.type, i, j, _this.negRange);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22746,
            "content": "var color = colorProps.color;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22752,
            "content": "var pathFill = fill.fillPath({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22764,
            "content": "var fromRect = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22770,
            "content": "var toRect = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22778,
            "content": "var speed = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22788,
            "content": "var _speed = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22801,
            "content": "var fontSize = _this.getFontSize(r);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22803,
            "content": "var formattedText = w.config.dataLabels.formatter(_this.labels[i][j], {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22810,
            "content": "var dataLabels = _this.helpers.calculateDataLabels({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22842,
            "content": "var w = this.w; // total length of labels (i.e [[\"Italy\"],[\"Spain\", \"Greece\"]] -> 16)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22845,
            "content": "var i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22863,
            "content": "var i,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22879,
            "content": "var averagelabelsize = totalLabelLength(this.labels) / countLabels(this.labels);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22886,
            "content": "var area = width * height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22887,
            "content": "var arearoot = Math.pow(area, 0.5);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22896,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22897,
            "content": "var textRect = graphics.getTextRects(text); //if the label fits better sideways then rotate it",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22900,
            "content": "var labelRotatingCenter = graphics.rotateAroundCenter(elText.node);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22907,
            "content": "var animations = new Animations(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22927,
            "content": "var MINUTES_IN_DAY = 24 * 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22928,
            "content": "var SECONDS_IN_DAY = MINUTES_IN_DAY * 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22929,
            "content": "var MIN_ZOOM_DAYS = 10 / SECONDS_IN_DAY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22936,
            "content": "var TimeScale = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22949,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22951,
            "content": "var w = this.w; // null check when no series to show",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22959,
            "content": "var dt = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22960,
            "content": "var daysDiff = (maxX - minX) / (1000 * SECONDS_IN_DAY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22971,
            "content": "var timeIntervals = dt.getTimeUnitsfromTimestamp(minX, maxX, this.utc);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22972,
            "content": "var daysWidthOnXAxis = w.globals.gridWidth / daysDiff;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22973,
            "content": "var hoursWidthOnXAxis = daysWidthOnXAxis / 24;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22974,
            "content": "var minutesWidthOnXAxis = hoursWidthOnXAxis / 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22975,
            "content": "var secondsWidthOnXAxis = minutesWidthOnXAxis / 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22976,
            "content": "var numberOfHours = Math.floor(daysDiff * 24);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22977,
            "content": "var numberOfMinutes = Math.floor(daysDiff * MINUTES_IN_DAY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22978,
            "content": "var numberOfSeconds = Math.floor(daysDiff * SECONDS_IN_DAY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22979,
            "content": "var numberOfDays = Math.floor(daysDiff);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22980,
            "content": "var numberOfMonths = Math.floor(daysDiff / 30);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22981,
            "content": "var numberOfYears = Math.floor(daysDiff / 365);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22982,
            "content": "var firstVal = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22991,
            "content": "var currentMillisecond = firstVal.minMillisecond;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22992,
            "content": "var currentSecond = firstVal.minSecond;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22993,
            "content": "var currentMinute = firstVal.minMinute;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22994,
            "content": "var currentHour = firstVal.minHour;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22995,
            "content": "var currentMonthDate = firstVal.minDate;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22996,
            "content": "var currentDate = firstVal.minDate;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22997,
            "content": "var currentMonth = firstVal.minMonth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22998,
            "content": "var currentYear = firstVal.minYear;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 22999,
            "content": "var params = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23065,
            "content": "var adjustedMonthInTimeScaleArray = this.timeScaleArray.map(function (ts) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23066,
            "content": "var defaultReturn = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23099,
            "content": "var filteredTimeScale = adjustedMonthInTimeScaleArray.filter(function (ts) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23100,
            "content": "var modulo = 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23101,
            "content": "var ticks = Math.ceil(w.globals.gridWidth / 120);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23102,
            "content": "var value = ts.value;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23112,
            "content": "var shouldNotSkipUnit = false; // there is a big change in unit i.e days to months",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23114,
            "content": "var shouldNotPrint = false; // should skip these values",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23231,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23232,
            "content": "var reformattedTimescaleArray = this.formatDates(filteredTimeScale);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23233,
            "content": "var removedOverlappingTS = this.removeOverlappingTS(reformattedTimescaleArray);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23239,
            "content": "var dimensions = new Dimensions(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23245,
            "content": "var yearsDiff = daysDiff / 365;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23246,
            "content": "var hoursDiff = daysDiff * 24;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23247,
            "content": "var minutesDiff = hoursDiff * 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23248,
            "content": "var secondsDiff = minutesDiff * 60;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23307,
            "content": "var firstVal = _ref.firstVal,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23312,
            "content": "var firstTickValue = firstVal.minYear;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23313,
            "content": "var firstTickPosition = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23314,
            "content": "var dt = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23315,
            "content": "var unit = 'year';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23318,
            "content": "var remainingDays = dt.determineRemainingDaysOfYear(firstVal.minYear, firstVal.minMonth, firstVal.minDate); // remainingDaysofFirstMonth is used to reacht the 2nd tick position",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23320,
            "content": "var remainingDaysOfFirstYear = dt.determineDaysOfYear(firstVal.minYear) - remainingDays + 1; // calculate the first tick position",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23343,
            "content": "var year = firstTickValue;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23344,
            "content": "var pos = firstTickPosition; // keep drawing rest of the ticks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23361,
            "content": "var firstVal = _ref2.firstVal,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23367,
            "content": "var firstTickValue = currentMonth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23368,
            "content": "var firstTickPosition = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23369,
            "content": "var dt = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23370,
            "content": "var unit = 'month';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23371,
            "content": "var yrCounter = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23375,
            "content": "var remainingDaysOfFirstMonth = dt.determineDaysOfMonths(currentMonth + 1, firstVal.minYear) - currentMonthDate + 1; // calculate the first tick position",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23379,
            "content": "var year = currentYear + yrCounter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23381,
            "content": "var _month = Utils$1.monthMod(firstTickValue);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23383,
            "content": "var value = firstTickValue; // it's Jan, so update the year",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23412,
            "content": "var month = firstTickValue + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23413,
            "content": "var pos = firstTickPosition; // keep drawing rest of the ticks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23425,
            "content": "var _year = this._getYear(currentYear, month, yrCounter);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23428,
            "content": "var monthVal = month === 0 ? _year : month;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23442,
            "content": "var firstVal = _ref3.firstVal,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23447,
            "content": "var dt = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23448,
            "content": "var unit = 'day';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23449,
            "content": "var firstTickValue = firstVal.minDate + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23450,
            "content": "var date = firstTickValue;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23452,
            "content": "var changeMonth = function changeMonth(dateVal, month, year) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23453,
            "content": "var monthdays = dt.determineDaysOfMonths(month + 1, year);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23466,
            "content": "var remainingHours = 24 - firstVal.minHour;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23467,
            "content": "var yrCounter = 0; // calculate the first tick position",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23469,
            "content": "var firstTickPosition = remainingHours * hoursWidthOnXAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23470,
            "content": "var val = firstTickValue;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23471,
            "content": "var month = changeMonth(date, currentMonth, currentYear);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23499,
            "content": "var pos = firstTickPosition; // keep drawing rest of the ticks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23506,
            "content": "var year = this._getYear(currentYear, month, yrCounter);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23509,
            "content": "var value = date === 1 ? Utils$1.monthMod(month) : date;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23523,
            "content": "var firstVal = _ref4.firstVal,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23529,
            "content": "var dt = new DateTime(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23530,
            "content": "var yrCounter = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23531,
            "content": "var unit = 'hour';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23533,
            "content": "var changeDate = function changeDate(dateVal, month) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23534,
            "content": "var monthdays = dt.determineDaysOfMonths(month + 1, currentYear);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23547,
            "content": "var changeMonth = function changeMonth(dateVal, month) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23548,
            "content": "var monthdays = dt.determineDaysOfMonths(month + 1, currentYear);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23559,
            "content": "var remainingMins = 60 - (firstVal.minMinute + firstVal.minSecond / 60.0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23560,
            "content": "var firstTickPosition = remainingMins * minutesWidthOnXAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23561,
            "content": "var firstTickValue = firstVal.minHour + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23562,
            "content": "var hour = firstTickValue + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23570,
            "content": "var date = currentDate;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23571,
            "content": "var month = changeMonth(date, currentMonth); // push the first tick in the array",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23582,
            "content": "var pos = firstTickPosition; // keep drawing rest of the ticks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23591,
            "content": "var checkNextMonth = changeDate(date, month);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23596,
            "content": "var year = this._getYear(currentYear, month, yrCounter);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23599,
            "content": "var val = hour === 0 ? date : hour;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23615,
            "content": "var currentMillisecond = _ref5.currentMillisecond,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23625,
            "content": "var yrCounter = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23626,
            "content": "var unit = 'minute';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23627,
            "content": "var remainingSecs = 60 - currentSecond;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23628,
            "content": "var firstTickPosition = (remainingSecs - currentMillisecond / 1000) * secondsWidthOnXAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23629,
            "content": "var minute = currentMinute + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23630,
            "content": "var date = currentDate;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23631,
            "content": "var month = currentMonth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23632,
            "content": "var year = currentYear;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23633,
            "content": "var hour = currentHour;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23634,
            "content": "var pos = firstTickPosition;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23663,
            "content": "var currentMillisecond = _ref6.currentMillisecond,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23672,
            "content": "var yrCounter = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23673,
            "content": "var unit = 'second';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23674,
            "content": "var remainingMillisecs = 1000 - currentMillisecond;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23675,
            "content": "var firstTickPosition = remainingMillisecs / 1000 * secondsWidthOnXAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23676,
            "content": "var second = currentSecond + 1;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23677,
            "content": "var minute = currentMinute;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23678,
            "content": "var date = currentDate;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23679,
            "content": "var month = currentMonth;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23680,
            "content": "var year = currentYear;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23681,
            "content": "var hour = currentHour;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23682,
            "content": "var pos = firstTickPosition;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23717,
            "content": "var raw = ts.year;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23760,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23762,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23763,
            "content": "var reformattedTimescaleArray = filteredTimeScale.map(function (ts) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23764,
            "content": "var value = ts.value.toString();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23765,
            "content": "var dt = new DateTime(_this2.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23767,
            "content": "var raw = _this2.createRawDateString(ts, value);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23769,
            "content": "var dateToFormat = dt.getDate(dt.parseDate(raw));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23777,
            "content": "var customFormat = 'dd MMM';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23778,
            "content": "var dtFormatter = w.config.xaxis.labels.datetimeFormatter;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23804,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23806,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23807,
            "content": "var equalLabelLengthFlag = false; // These labels got same length?",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23809,
            "content": "var constantLabelWidth; // If true, what is the constant length to use",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23822,
            "content": "var lastDrawnIndex = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23823,
            "content": "var filteredArray = arr.map(function (item, index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23825,
            "content": "var prevLabelWidth = !equalLabelLengthFlag // if vary in label length",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23829,
            "content": "var prevPos = arr[lastDrawnIndex].position;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23830,
            "content": "var pos = item.position;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23863,
            "content": "var Core = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23876,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23877,
            "content": "var cnf = this.w.config; // const graphics = new Graphics(this.ctx)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23879,
            "content": "var ct = cnf.chart.type;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23880,
            "content": "var axisChartsArrTypes = ['line', 'area', 'bar', 'rangeBar', 'candlestick', 'boxPlot', 'scatter', 'bubble', 'radar', 'heatmap', 'treemap'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23881,
            "content": "var xyChartsArrTypes = ['line', 'area', 'bar', 'rangeBar', 'candlestick', 'boxPlot', 'scatter', 'bubble'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23917,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23918,
            "content": "var cnf = w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23919,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23920,
            "content": "var lineSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23924,
            "content": "var areaSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23928,
            "content": "var scatterSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23932,
            "content": "var bubbleSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23936,
            "content": "var columnSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23940,
            "content": "var candlestickSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23944,
            "content": "var boxplotSeries = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23949,
            "content": "var comboCount = 0; // if user has specified a particular type for particular series",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23998,
            "content": "var line = new Line(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 23999,
            "content": "var boxCandlestick = new BoxCandleStick(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24001,
            "content": "var radialBar = new Radial(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24003,
            "content": "var radar = new Radar(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24004,
            "content": "var elGraph = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24013,
            "content": "var barStacked = new BarStacked(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24034,
            "content": "var scatterLine = new Line(this.ctx, xyRatios, true);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24039,
            "content": "var bubbleLine = new Line(this.ctx, xyRatios, true);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24054,
            "content": "var _barStacked = new BarStacked(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24065,
            "content": "var candleStick = new BoxCandleStick(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24070,
            "content": "var boxPlot = new BoxCandleStick(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24079,
            "content": "var heatmap = new HeatMap(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24084,
            "content": "var treemap = new TreemapChart(this.ctx, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24112,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24113,
            "content": "var cnf = this.w.config;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24116,
            "content": "var elDim = Utils$1.getDimensions(this.el);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24117,
            "content": "var widthUnit = cnf.chart.width.toString().split(/[0-9]+/g).pop();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24131,
            "content": "var heightUnit = cnf.chart.height.toString().split(/[0-9]+/g).pop();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24135,
            "content": "var elParentDim = Utils$1.getDimensions(this.el.parentNode);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24157,
            "content": "var offsetY = cnf.chart.sparkline.enabled ? 0 : gl.axisCharts ? cnf.chart.parentHeightOffset : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24167,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24168,
            "content": "var tY = gl.translateY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24169,
            "content": "var tX = gl.translateX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24170,
            "content": "var scalingAttrs = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24179,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24180,
            "content": "var gl = w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24181,
            "content": "var legendHeight = 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24182,
            "content": "var offY = w.config.chart.sparkline.enabled ? 1 : 15;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24189,
            "content": "var el = w.globals.dom.baseEl.querySelector('.apexcharts-radialbar, .apexcharts-pie');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24190,
            "content": "var chartInnerDimensions = w.globals.radialSize * 2.05;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24193,
            "content": "var elRadialRect = Utils$1.getBoundingClientRect(el);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24195,
            "content": "var maxHeight = elRadialRect.bottom - elRadialRect.top;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24199,
            "content": "var newHeight = chartInnerDimensions + gl.translateY + legendHeight + offY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24218,
            "content": "var range = new Range(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24224,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24226,
            "content": "var resetxyValues = function resetxyValues() {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24232,
            "content": "var globalObj = new Globals();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24233,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24250,
            "content": "var xyRatios = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24251,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24255,
            "content": "var crosshairs = new Crosshairs(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24260,
            "content": "var _crosshairs = new Crosshairs(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24267,
            "content": "var formattedTimeScale = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24278,
            "content": "var coreUtils = new CoreUtils(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24303,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24305,
            "content": "var w = this.w; // only for brush charts",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24314,
            "content": "var targets = w.config.chart.brush.targets || [w.config.chart.brush.target]; // retro compatibility with single target option",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24317,
            "content": "var targetChart = ApexCharts.getChartByID(target);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24335,
            "content": "var targetChart = ApexCharts.getChartByID(target);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24336,
            "content": "var yaxis = Utils$1.clone(w.config.yaxis);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24339,
            "content": "var scale = new Range$1(targetChart);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24343,
            "content": "var multipleYaxis = targetChart.w.config.yaxis.reduce(function (acc, curr, index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24366,
            "content": "var UpdateHelpers = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24386,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24388,
            "content": "var redraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24389,
            "content": "var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24390,
            "content": "var updateSyncedCharts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24391,
            "content": "var overwriteInitialConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24392,
            "content": "var charts = [this.ctx];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24405,
            "content": "var w = ch.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24450,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24452,
            "content": "var overwriteInitialSeries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24453,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24461,
            "content": "var existingSeries; // axis charts",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24489,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24490,
            "content": "var ser = w.config.series[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24501,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24502,
            "content": "var elPath = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24503,
            "content": "var parent = \".apexcharts-series[data\\\\:realIndex='\".concat(seriesIndex, \"']\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24519,
            "content": "var graphics = new Graphics(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24531,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24532,
            "content": "var minmax = ['min', 'max'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24545,
            "content": "var defaults = new Defaults(options);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24554,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24580,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24582,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24583,
            "content": "var xaxis = w.globals.lastXAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24584,
            "content": "var yaxis = w.globals.lastYAxis;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24597,
            "content": "var getLastYAxis = function getLastYAxis(index) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24644,
            "content": "var globalRef = typeof this !== 'undefined' ? this : window; // The main wrapping element",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24646,
            "content": "var SVG = globalRef.SVG = function (element) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24681,
            "content": "var element = document.createElementNS(this.ns, name); // apply unique id",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24689,
            "content": "var modules, methods; // Get list of modules",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24712,
            "content": "var initializer = typeof config.create === 'function' ? config.create : function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24740,
            "content": "var element; // adopt with element-specific settings",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24771,
            "content": "var body = document.getElementsByTagName('body')[0],",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24836,
            "content": "var il = array.length,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24847,
            "content": "var il = array.length,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24900,
            "content": "var match; // initialize defaults",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25020,
            "content": "var pathHandlers = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25055,
            "content": "var mlhvqtcsa = 'mlhvqtcsaz'.split('');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25088,
            "content": "var box = this.bbox(); // get relative offset",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25098,
            "content": "var sourceArray = this.value,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25133,
            "content": "var s,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25161,
            "content": "var arr = [],",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25262,
            "content": "var number = new SVG.Number(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25341,
            "content": "var p = proportionalSize(this, width, height);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25349,
            "content": "var clone = assignNewId(this.node.cloneNode(true)); // insert the clone in the given parent or after myself",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25397,
            "content": "var attr = this.attr('class');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25407,
            "content": "var array = this.classes();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25434,
            "content": "var parent = this; // check for parent",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25454,
            "content": "var parents = [],",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25476,
            "content": "var well = document.createElement('svg'); // act as a setter if svg is given",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25504,
            "content": "var fn = this.each ? this : this.lines();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25611,
            "content": "var situation = new SVG.Situation({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25713,
            "content": "var source;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25714,
            "content": "var s = this.situation;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25769,
            "content": "var active = this.active;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25786,
            "content": "var c = this.last(),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25799,
            "content": "var c = this.last(),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25815,
            "content": "var wrapper = function wrapper(e) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25842,
            "content": "var absPos, absPosInt, lastLoop; // If the absolute position is below 0, we just treat it as if it was 0",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25873,
            "content": "var eased = this.situation.ease(this.pos); // call once-callbacks",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25930,
            "content": "var len,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25966,
            "content": "var a = s.transforms[i]; // multiply matrix directly",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 25995,
            "content": "var c = this.last();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26106,
            "content": "var box; // yes this is ugly, but Firefox can be a pain when it comes to elements that are not yet rendered",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26111,
            "content": "var topParent = element.node;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26132,
            "content": "var clone = element.clone(SVG.parser.draw.instance).show();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26164,
            "content": "var base = arrayToMatrix([1, 0, 0, 1, 0, 0]); // ensure source as object",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26177,
            "content": "var px = deltaTransformPoint(this, 0, 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26179,
            "content": "var skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26222,
            "content": "var matrix = SVG.parser.native.createSVGMatrix(); // update with current values",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26251,
            "content": "var rect = this.rect(1, 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26252,
            "content": "var m = rect.node.getScreenCTM();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26264,
            "content": "var source,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26387,
            "content": "var target = this,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26418,
            "content": "var matrix = (this.attr('transform') || ''). // split transformations",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26421,
            "content": "var kv = str.trim().split('(');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26435,
            "content": "var ctm = this.screenCTM();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26436,
            "content": "var pCtm = parent.screenCTM().inverse();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26566,
            "content": "var il,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26652,
            "content": "var l = listener.bind(binding || node.instance || node),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26675,
            "content": "var index = SVG.handlerMap.indexOf(node),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26821,
            "content": "var defs; // Find or create a defs element in this instance",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26867,
            "content": "var node = this.node; // clone element and assign new id",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 26869,
            "content": "var clone = assignNewId(node.cloneNode(true)); // insert the clone in the given parent or after myself",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27168,
            "content": "var p = proportionalSize(this, width, height);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27206,
            "content": "var p = proportionalSize(this, width, height);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27269,
            "content": "var p = proportionalSize(this, width, height);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27287,
            "content": "var b = this.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27292,
            "content": "var b = this.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 27338,
            "content": "var self = this,",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 27338,
            "content": "var self = this,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27343,
            "content": "var p = self.parent(SVG.Pattern);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27422,
            "content": "var _text = '';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27423,
            "content": "var children = this.node.childNodes;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27473,
            "content": "var node = (this.textPath && this.textPath() || this).node; // filter tspans and map them to SVG.js instances",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27475,
            "content": "var lines = SVG.utils.map(SVG.utils.filterSVGElements(node.childNodes), function (el) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 27490,
            "content": "var self = this,",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 27490,
            "content": "var self = this,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27560,
            "content": "var t = this.parent(SVG.Text); // mark new line",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27582,
            "content": "var node = (this.textPath && this.textPath() || this).node,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27595,
            "content": "var node = (this.textPath && this.textPath() || this).node; // remove existing child nodes",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27620,
            "content": "var track = this.track();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27625,
            "content": "var track = this.track(),",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27636,
            "content": "var path = this.textPath();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27667,
            "content": "var sugar = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27676,
            "content": "var extension = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27744,
            "content": "var il,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27755,
            "content": "var i = this.index(element); // remove given child",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27823,
            "content": "var methods = []; // gather shape methods",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27902,
            "content": "var node = document.getElementById(idFromReference(id) || id);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27953,
            "content": "var hex = comp.toString(16);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 27960,
            "content": "var box = element.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28073,
            "content": "var m = (url || '').toString().match(SVG.regex.reference);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28084,
            "content": "var abcdef = 'abcdef'.split(''); // Add CustomEvent to IE9 and IE10",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28088,
            "content": "var CustomEventPoly = function CustomEventPoly(event, options) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28094,
            "content": "var e = document.createEvent('CustomEvent');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28175,
            "content": "var args = [undefined];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28218,
            "content": "var filter = this.put(new SVG.Filter);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28307,
            "content": "var chainingEffects = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28391,
            "content": "var effects = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28472,
            "content": "var parentEffects = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28474,
            "content": "var children;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28478,
            "content": "var that = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28550,
            "content": "var childEffects = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28607,
            "content": "var name = i.charAt(0).toUpperCase() + i.slice(1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28608,
            "content": "var proto = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28631,
            "content": "var name = i.charAt(0).toUpperCase() + i.slice(1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28632,
            "content": "var proto = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28655,
            "content": "var name = i.charAt(0).toUpperCase() + i.slice(1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28656,
            "content": "var proto = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28718,
            "content": "var fn = function(){};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28737,
            "content": "var startArr = this.value",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28740,
            "content": "var startOffsetM = 0",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28743,
            "content": "var startOffsetNextM = false",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28756,
            "content": "var bbox = new SVG.PathArray(result.start).bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28769,
            "content": "var bbox = new SVG.PathArray(result.dest).bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28779,
            "content": "var result = handleBlock(startArr, startOffsetM, startOffsetNextM, destArr, destOffsetM, destOffsetNextM);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28807,
            "content": "var startArrTemp = startArr.slice(startOffsetM, startOffsetNextM || undefined$1)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28810,
            "content": "var i = 0",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28921,
            "content": "var len = val.length;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28933,
            "content": "var retVal = [val];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 28991,
            "content": "var rx = Math.abs(val[1]), ry = Math.abs(val[2]), xAxisRotation = val[3] % 360",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29153,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29163,
            "content": "var touches = event.changedTouches && event.changedTouches[0] || event;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29172,
            "content": "var box = this.el.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29194,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29214,
            "content": "var box = this.getBBox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29216,
            "content": "var anchorOffset;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29252,
            "content": "var box = this.getBBox()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29272,
            "content": "var coord = c.call(this.el, x, y, this.m);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29332,
            "content": "var p = this.drag(e);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29357,
            "content": "var dragHandler = this.remember('_draggable') || new DragHandler(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29398,
            "content": "var coord = typeof setting !== 'string' ? setting : object[setting];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29404,
            "content": "var settings = this.pointsList[point];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29415,
            "content": "var bbox = this.el.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29419,
            "content": "var points = this.el.selectize.defaults.points;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29430,
            "content": "var pointsLists = ['points', 'pointsExclude'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29433,
            "content": "var option = this.options[pointsLists[i]];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29509,
            "content": "var bbox = this.el.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29519,
            "content": "var _this = this, array = this.getPointArray();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29524,
            "content": "var curriedEvent = (function (k) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29530,
            "content": "var x = ev.pageX || ev.touches[0].pageX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29531,
            "content": "var y = ev.pageY || ev.touches[0].pageY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29538,
            "content": "var point = this.drawPoint(array[i][0], array[i][1])",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29549,
            "content": "var pointType = this.options.pointType;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29579,
            "content": "var array = this.getPointArray();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29590,
            "content": "var _this = this, bbox = this.el.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29600,
            "content": "var coords = _this.pointCoords(point, bbox);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29607,
            "content": "var length = this.rectSelection.set.length();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29615,
            "content": "var _this = this, bbox = this.el.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29629,
            "content": "var x = ev.pageX || ev.touches[0].pageX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29630,
            "content": "var y = ev.pageY || ev.touches[0].pageY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29642,
            "content": "var ename =\"touchstart\", mname = \"mousedown\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29645,
            "content": "var coords = _this.pointCoords(point, bbox);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29647,
            "content": "var pointElement = _this.drawPoint(coords.x, coords.y)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29662,
            "content": "var curriedEvent = function (ev) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29667,
            "content": "var x = ev.pageX || ev.touches[0].pageX;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29668,
            "content": "var y = ev.pageY || ev.touches[0].pageY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29672,
            "content": "var pointElement = this.drawPoint(bbox.width / 2, 20)",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29683,
            "content": "var bbox = this.el.bbox();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29697,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29765,
            "content": "var selectHandler = this.remember('_selectHandler') || new SelectHandler(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29819,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29877,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29882,
            "content": "var txPt = this._extractPosition(event.detail.event);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29901,
            "content": "var array = this.el.array().valueOf();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29917,
            "content": "var snap = this.snapToGrid(diffX, diffY);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29945,
            "content": "var snap = this.snapToGrid(diffX, diffY, 1 << 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29964,
            "content": "var snap = this.snapToGrid(diffX, diffY, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 29983,
            "content": "var snap = this.snapToGrid(diffX, diffY, 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30002,
            "content": "var snap = this.snapToGrid(diffX, diffY, 1 << 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30018,
            "content": "var snap = this.snapToGrid(diffX, diffY, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30033,
            "content": "var snap = this.snapToGrid(diffX, diffY, 0);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30048,
            "content": "var snap = this.snapToGrid(diffX, diffY, 1);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30065,
            "content": "var current = {x: diffX + this.parameters.p.x, y: diffY + this.parameters.p.y};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30068,
            "content": "var sAngle = Math.atan2((this.parameters.p.y - this.parameters.box.y - this.parameters.box.height / 2), (this.parameters.p.x - this.parameters.box.x - this.parameters.box.width / 2));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30071,
            "content": "var pAngle = Math.atan2((current.y - this.parameters.box.y - this.parameters.box.height / 2), (current.x - this.parameters.box.x - this.parameters.box.width / 2));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30073,
            "content": "var angle = this.parameters.rotation + (pAngle - sAngle) * 180 / Math.PI + this.options.snapToAngle / 2;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30087,
            "content": "var snap = this.snapToGrid(diffX, diffY, this.parameters.pointCoords[0], this.parameters.pointCoords[1]);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30090,
            "content": "var array = this.el.array().valueOf();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30131,
            "content": "var txPt = this._extractPosition(event);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30132,
            "content": "var p = this.transformPoint(txPt.x, txPt.y);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30134,
            "content": "var diffX = p.x - this.parameters.p.x,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30161,
            "content": "var temp;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30194,
            "content": "var c = this.options.constraint || {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30195,
            "content": "var orgX, orgY;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30229,
            "content": "var updatedSnap = snap.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30230,
            "content": "var aspectRatio = this.parameters.box.width / this.parameters.box.height;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30231,
            "content": "var newW = this.parameters.box.width + snap[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30232,
            "content": "var newH = this.parameters.box.height - snap[1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30233,
            "content": "var newAspectRatio = newW / newH;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30272,
            "content": "var insertAt = ref.insertAt;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30276,
            "content": "var head = document.head || document.getElementsByTagName('head')[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30277,
            "content": "var style = document.createElement('style');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30297,
            "content": "var css_248z = \".apexcharts-canvas {\\n  position: relative;\\n  user-select: none;\\n  /* cannot give overflow: hidden as it will crop tooltips which overflow outside chart area */\\n}\\n\\n\\n/* scrollbar is not visible by default for legend, hence forcing the visibility */\\n.apexcharts-canvas ::-webkit-scrollbar {\\n  -webkit-appearance: none;\\n  width: 6px;\\n}\\n\\n.apexcharts-canvas ::-webkit-scrollbar-thumb {\\n  border-radius: 4px;\\n  background-color: rgba(0, 0, 0, .5);\\n  box-shadow: 0 0 1px rgba(255, 255, 255, .5);\\n  -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);\\n}\\n\\n\\n.apexcharts-inner {\\n  position: relative;\\n}\\n\\n.apexcharts-text tspan {\\n  font-family: inherit;\\n}\\n\\n.legend-mouseover-inactive {\\n  transition: 0.15s ease all;\\n  opacity: 0.20;\\n}\\n\\n.apexcharts-series-collapsed {\\n  opacity: 0;\\n}\\n\\n.apexcharts-tooltip {\\n  border-radius: 5px;\\n  box-shadow: 2px 2px 6px -4px #999;\\n  cursor: default;\\n  font-size: 14px;\\n  left: 62px;\\n  opacity: 0;\\n  pointer-events: none;\\n  position: absolute;\\n  top: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n  white-space: nowrap;\\n  z-index: 12;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-tooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light {\\n  border: 1px solid #e3e3e3;\\n  background: rgba(255, 255, 255, 0.96);\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark {\\n  color: #fff;\\n  background: rgba(30, 30, 30, 0.8);\\n}\\n\\n.apexcharts-tooltip * {\\n  font-family: inherit;\\n}\\n\\n\\n.apexcharts-tooltip-title {\\n  padding: 6px;\\n  font-size: 15px;\\n  margin-bottom: 4px;\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-light .apexcharts-tooltip-title {\\n  background: #ECEFF1;\\n  border-bottom: 1px solid #ddd;\\n}\\n\\n.apexcharts-tooltip.apexcharts-theme-dark .apexcharts-tooltip-title {\\n  background: rgba(0, 0, 0, 0.7);\\n  border-bottom: 1px solid #333;\\n}\\n\\n.apexcharts-tooltip-text-y-value,\\n.apexcharts-tooltip-text-goals-value,\\n.apexcharts-tooltip-text-z-value {\\n  display: inline-block;\\n  font-weight: 600;\\n  margin-left: 5px;\\n}\\n\\n.apexcharts-tooltip-text-y-label:empty,\\n.apexcharts-tooltip-text-y-value:empty,\\n.apexcharts-tooltip-text-goals-label:empty,\\n.apexcharts-tooltip-text-goals-value:empty,\\n.apexcharts-tooltip-text-z-value:empty {\\n  display: none;\\n}\\n\\n.apexcharts-tooltip-text-y-value,\\n.apexcharts-tooltip-text-goals-value,\\n.apexcharts-tooltip-text-z-value {\\n  font-weight: 600;\\n}\\n\\n.apexcharts-tooltip-text-goals-label, \\n.apexcharts-tooltip-text-goals-value {\\n  padding: 6px 0 5px;\\n}\\n\\n.apexcharts-tooltip-goals-group, \\n.apexcharts-tooltip-text-goals-label, \\n.apexcharts-tooltip-text-goals-value {\\n  display: flex;\\n}\\n.apexcharts-tooltip-text-goals-label:not(:empty),\\n.apexcharts-tooltip-text-goals-value:not(:empty) {\\n  margin-top: -6px;\\n}\\n\\n.apexcharts-tooltip-marker {\\n  width: 12px;\\n  height: 12px;\\n  position: relative;\\n  top: 0px;\\n  margin-right: 10px;\\n  border-radius: 50%;\\n}\\n\\n.apexcharts-tooltip-series-group {\\n  padding: 0 10px;\\n  display: none;\\n  text-align: left;\\n  justify-content: left;\\n  align-items: center;\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active .apexcharts-tooltip-marker {\\n  opacity: 1;\\n}\\n\\n.apexcharts-tooltip-series-group.apexcharts-active,\\n.apexcharts-tooltip-series-group:last-child {\\n  padding-bottom: 4px;\\n}\\n\\n.apexcharts-tooltip-series-group-hidden {\\n  opacity: 0;\\n  height: 0;\\n  line-height: 0;\\n  padding: 0 !important;\\n}\\n\\n.apexcharts-tooltip-y-group {\\n  padding: 6px 0 5px;\\n}\\n\\n.apexcharts-tooltip-box, .apexcharts-custom-tooltip {\\n  padding: 4px 8px;\\n}\\n\\n.apexcharts-tooltip-boxPlot {\\n  display: flex;\\n  flex-direction: column-reverse;\\n}\\n\\n.apexcharts-tooltip-box>div {\\n  margin: 4px 0;\\n}\\n\\n.apexcharts-tooltip-box span.value {\\n  font-weight: bold;\\n}\\n\\n.apexcharts-tooltip-rangebar {\\n  padding: 5px 8px;\\n}\\n\\n.apexcharts-tooltip-rangebar .category {\\n  font-weight: 600;\\n  color: #777;\\n}\\n\\n.apexcharts-tooltip-rangebar .series-name {\\n  font-weight: bold;\\n  display: block;\\n  margin-bottom: 5px;\\n}\\n\\n.apexcharts-xaxistooltip {\\n  opacity: 0;\\n  padding: 9px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-xaxistooltip:after,\\n.apexcharts-xaxistooltip:before {\\n  left: 50%;\\n  border: solid transparent;\\n  content: \\\" \\\";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-xaxistooltip:after {\\n  border-color: rgba(236, 239, 241, 0);\\n  border-width: 6px;\\n  margin-left: -6px;\\n}\\n\\n.apexcharts-xaxistooltip:before {\\n  border-color: rgba(144, 164, 174, 0);\\n  border-width: 7px;\\n  margin-left: -7px;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after,\\n.apexcharts-xaxistooltip-bottom:before {\\n  bottom: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-top:after,\\n.apexcharts-xaxistooltip-top:before {\\n  top: 100%;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:after {\\n  border-bottom-color: #ECEFF1;\\n}\\n\\n.apexcharts-xaxistooltip-bottom:before {\\n  border-bottom-color: #90A4AE;\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:after {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-bottom.apexcharts-theme-dark:before {\\n  border-bottom-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-top:after {\\n  border-top-color: #ECEFF1\\n}\\n\\n.apexcharts-xaxistooltip-top:before {\\n  border-top-color: #90A4AE;\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:after {\\n  border-top-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip-top.apexcharts-theme-dark:before {\\n  border-top-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-xaxistooltip.apexcharts-active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-yaxistooltip {\\n  opacity: 0;\\n  padding: 4px 10px;\\n  pointer-events: none;\\n  color: #373d3f;\\n  font-size: 13px;\\n  text-align: center;\\n  border-radius: 2px;\\n  position: absolute;\\n  z-index: 10;\\n  background: #ECEFF1;\\n  border: 1px solid #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-theme-dark {\\n  background: rgba(0, 0, 0, 0.7);\\n  border: 1px solid rgba(0, 0, 0, 0.5);\\n  color: #fff;\\n}\\n\\n.apexcharts-yaxistooltip:after,\\n.apexcharts-yaxistooltip:before {\\n  top: 50%;\\n  border: solid transparent;\\n  content: \\\" \\\";\\n  height: 0;\\n  width: 0;\\n  position: absolute;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-yaxistooltip:after {\\n  border-color: rgba(236, 239, 241, 0);\\n  border-width: 6px;\\n  margin-top: -6px;\\n}\\n\\n.apexcharts-yaxistooltip:before {\\n  border-color: rgba(144, 164, 174, 0);\\n  border-width: 7px;\\n  margin-top: -7px;\\n}\\n\\n.apexcharts-yaxistooltip-left:after,\\n.apexcharts-yaxistooltip-left:before {\\n  left: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-right:after,\\n.apexcharts-yaxistooltip-right:before {\\n  right: 100%;\\n}\\n\\n.apexcharts-yaxistooltip-left:after {\\n  border-left-color: #ECEFF1;\\n}\\n\\n.apexcharts-yaxistooltip-left:before {\\n  border-left-color: #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:after {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-left.apexcharts-theme-dark:before {\\n  border-left-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-right:after {\\n  border-right-color: #ECEFF1;\\n}\\n\\n.apexcharts-yaxistooltip-right:before {\\n  border-right-color: #90A4AE;\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:after {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip-right.apexcharts-theme-dark:before {\\n  border-right-color: rgba(0, 0, 0, 0.5);\\n}\\n\\n.apexcharts-yaxistooltip.apexcharts-active {\\n  opacity: 1;\\n}\\n\\n.apexcharts-yaxistooltip-hidden {\\n  display: none;\\n}\\n\\n.apexcharts-xcrosshairs,\\n.apexcharts-ycrosshairs {\\n  pointer-events: none;\\n  opacity: 0;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-xcrosshairs.apexcharts-active,\\n.apexcharts-ycrosshairs.apexcharts-active {\\n  opacity: 1;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-ycrosshairs-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-selection-rect {\\n  cursor: move;\\n}\\n\\n.svg_select_boundingRect, .svg_select_points_rot {\\n  pointer-events: none;\\n  opacity: 0;\\n  visibility: hidden;\\n}\\n.apexcharts-selection-rect + g .svg_select_boundingRect,\\n.apexcharts-selection-rect + g .svg_select_points_rot {\\n  opacity: 0;\\n  visibility: hidden;\\n}\\n\\n.apexcharts-selection-rect + g .svg_select_points_l,\\n.apexcharts-selection-rect + g .svg_select_points_r {\\n  cursor: ew-resize;\\n  opacity: 1;\\n  visibility: visible;\\n}\\n\\n.svg_select_points {\\n  fill: #efefef;\\n  stroke: #333;\\n  rx: 2;\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-zoom {\\n  cursor: crosshair\\n}\\n\\n.apexcharts-svg.apexcharts-zoomable.hovering-pan {\\n  cursor: move\\n}\\n\\n.apexcharts-zoom-icon,\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-pan-icon,\\n.apexcharts-selection-icon,\\n.apexcharts-menu-icon,\\n.apexcharts-toolbar-custom-icon {\\n  cursor: pointer;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 24px;\\n  color: #6E8192;\\n  text-align: center;\\n}\\n\\n.apexcharts-zoom-icon svg,\\n.apexcharts-zoomin-icon svg,\\n.apexcharts-zoomout-icon svg,\\n.apexcharts-reset-icon svg,\\n.apexcharts-menu-icon svg {\\n  fill: #6E8192;\\n}\\n\\n.apexcharts-selection-icon svg {\\n  fill: #444;\\n  transform: scale(0.76)\\n}\\n\\n.apexcharts-theme-dark .apexcharts-zoom-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomin-icon svg,\\n.apexcharts-theme-dark .apexcharts-zoomout-icon svg,\\n.apexcharts-theme-dark .apexcharts-reset-icon svg,\\n.apexcharts-theme-dark .apexcharts-pan-icon svg,\\n.apexcharts-theme-dark .apexcharts-selection-icon svg,\\n.apexcharts-theme-dark .apexcharts-menu-icon svg,\\n.apexcharts-theme-dark .apexcharts-toolbar-custom-icon svg {\\n  fill: #f3f4f5;\\n}\\n\\n.apexcharts-canvas .apexcharts-zoom-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-selection-icon.apexcharts-selected svg,\\n.apexcharts-canvas .apexcharts-reset-zoom-icon.apexcharts-selected svg {\\n  fill: #008FFB;\\n}\\n\\n.apexcharts-theme-light .apexcharts-selection-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoom-icon:not(.apexcharts-selected):hover svg,\\n.apexcharts-theme-light .apexcharts-zoomin-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-zoomout-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-reset-icon:hover svg,\\n.apexcharts-theme-light .apexcharts-menu-icon:hover svg {\\n  fill: #333;\\n}\\n\\n.apexcharts-selection-icon,\\n.apexcharts-menu-icon {\\n  position: relative;\\n}\\n\\n.apexcharts-reset-icon {\\n  margin-left: 5px;\\n}\\n\\n.apexcharts-zoom-icon,\\n.apexcharts-reset-icon,\\n.apexcharts-menu-icon {\\n  transform: scale(0.85);\\n}\\n\\n.apexcharts-zoomin-icon,\\n.apexcharts-zoomout-icon {\\n  transform: scale(0.7)\\n}\\n\\n.apexcharts-zoomout-icon {\\n  margin-right: 3px;\\n}\\n\\n.apexcharts-pan-icon {\\n  transform: scale(0.62);\\n  position: relative;\\n  left: 1px;\\n  top: 0px;\\n}\\n\\n.apexcharts-pan-icon svg {\\n  fill: #fff;\\n  stroke: #6E8192;\\n  stroke-width: 2;\\n}\\n\\n.apexcharts-pan-icon.apexcharts-selected svg {\\n  stroke: #008FFB;\\n}\\n\\n.apexcharts-pan-icon:not(.apexcharts-selected):hover svg {\\n  stroke: #333;\\n}\\n\\n.apexcharts-toolbar {\\n  position: absolute;\\n  z-index: 11;\\n  max-width: 176px;\\n  text-align: right;\\n  border-radius: 3px;\\n  padding: 0px 6px 2px 6px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n\\n.apexcharts-menu {\\n  background: #fff;\\n  position: absolute;\\n  top: 100%;\\n  border: 1px solid #ddd;\\n  border-radius: 3px;\\n  padding: 3px;\\n  right: 10px;\\n  opacity: 0;\\n  min-width: 110px;\\n  transition: 0.15s ease all;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-menu.apexcharts-menu-open {\\n  opacity: 1;\\n  pointer-events: all;\\n  transition: 0.15s ease all;\\n}\\n\\n.apexcharts-menu-item {\\n  padding: 6px 7px;\\n  font-size: 12px;\\n  cursor: pointer;\\n}\\n\\n.apexcharts-theme-light .apexcharts-menu-item:hover {\\n  background: #eee;\\n}\\n\\n.apexcharts-theme-dark .apexcharts-menu {\\n  background: rgba(0, 0, 0, 0.7);\\n  color: #fff;\\n}\\n\\n@media screen and (min-width: 768px) {\\n  .apexcharts-canvas:hover .apexcharts-toolbar {\\n    opacity: 1;\\n  }\\n}\\n\\n.apexcharts-datalabel.apexcharts-element-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-pie-label,\\n.apexcharts-datalabels,\\n.apexcharts-datalabel,\\n.apexcharts-datalabel-label,\\n.apexcharts-datalabel-value {\\n  cursor: default;\\n  pointer-events: none;\\n}\\n\\n.apexcharts-pie-label-delay {\\n  opacity: 0;\\n  animation-name: opaque;\\n  animation-duration: 0.3s;\\n  animation-fill-mode: forwards;\\n  animation-timing-function: ease;\\n}\\n\\n.apexcharts-canvas .apexcharts-element-hidden {\\n  opacity: 0;\\n}\\n\\n.apexcharts-hide .apexcharts-series-points {\\n  opacity: 0;\\n}\\n\\n.apexcharts-gridline,\\n.apexcharts-annotation-rect,\\n.apexcharts-tooltip .apexcharts-marker,\\n.apexcharts-area-series .apexcharts-area,\\n.apexcharts-line,\\n.apexcharts-zoom-rect,\\n.apexcharts-toolbar svg,\\n.apexcharts-area-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-line-series .apexcharts-series-markers .apexcharts-marker.no-pointer-events,\\n.apexcharts-radar-series path,\\n.apexcharts-radar-series polygon {\\n  pointer-events: none;\\n}\\n\\n\\n/* markers */\\n\\n.apexcharts-marker {\\n  transition: 0.15s ease all;\\n}\\n\\n@keyframes opaque {\\n  0% {\\n    opacity: 0;\\n  }\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n\\n/* Resize generated styles */\\n\\n@keyframes resizeanim {\\n  from {\\n    opacity: 0;\\n  }\\n  to {\\n    opacity: 0;\\n  }\\n}\\n\\n.resize-triggers {\\n  animation: 1ms resizeanim;\\n  visibility: hidden;\\n  opacity: 0;\\n}\\n\\n.resize-triggers,\\n.resize-triggers>div,\\n.contract-trigger:before {\\n  content: \\\" \\\";\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  height: 100%;\\n  width: 100%;\\n  overflow: hidden;\\n}\\n\\n.resize-triggers>div {\\n  background: #eee;\\n  overflow: auto;\\n}\\n\\n.contract-trigger:before {\\n  width: 200%;\\n  height: 200%;\\n}\";",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30311,
            "content": "var triggers = element.__resizeTriggers__,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30337,
            "content": "var element = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30352,
            "content": "var requestFrame = function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30353,
            "content": "var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30362,
            "content": "var cancelFrame = function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30363,
            "content": "var cancel = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.clearTimeout;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30371,
            "content": "var animation = false,",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30376,
            "content": "var elm = document.createElement('fakeelement');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30391,
            "content": "var animationName = 'resizeanim';",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30434,
            "content": "var InitCtxVariables = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30477,
            "content": "var Destroy = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30488,
            "content": "var isUpdating = _ref.isUpdating;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30536,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30538,
            "content": "var isUpdating = _ref2.isUpdating;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30539,
            "content": "var elSVG = this.w.globals.dom.Paper.node; // fixes apexcharts.js#1654 & vue-apexcharts#256",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30546,
            "content": "var baseEl = this.w.globals.dom.baseEl;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30555,
            "content": "var domEls = this.w.globals.dom;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30588,
            "content": "var ApexCharts$1 = /*#__PURE__*/function () {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30599,
            "content": "var initCtx = new InitCtxVariables(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30613,
            "content": "var _this = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30634,
            "content": "var beforeMount = _this.w.config.chart.events.beforeMount;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30645,
            "content": "var graphData = _this.create(_this.w.config.series, {});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 30649,
            "content": "_this.mount(graphData).then(function () {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 30668,
            "content": "var w = this.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30669,
            "content": "var initCtx = new InitCtxVariables(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30671,
            "content": "var gl = this.w.globals;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30677,
            "content": "var defaults = new Defaults(w.config);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30699,
            "content": "var combo = CoreUtils.checkComboSeries(ser);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30702,
            "content": "var allSeriesAreEmpty = ser.every(function (s) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30716,
            "content": "var markers = new Markers(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30747,
            "content": "var xyRatios = this.core.xySettings();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30749,
            "content": "var elGraph = this.core.plotChartType(ser, xyRatios);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30750,
            "content": "var dataLabels = new DataLabels(this);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30759,
            "content": "var dim = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30777,
            "content": "var _this2 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30779,
            "content": "var graphData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30780,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30781,
            "content": "var w = me.w;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30795,
            "content": "var elgrid = me.grid.drawGrid();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30804,
            "content": "var xAxis = new XAxis(_this2.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30805,
            "content": "var yaxis = new YAxis(_this2.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30860,
            "content": "var tools = w.config.chart.toolbar.tools;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30861,
            "content": "var toolsArr = ['zoom', 'zoomin', 'zoomout', 'selection', 'pan', 'reset'];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30895,
            "content": "var chartID = this.w.config.chart.id;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30920,
            "content": "var _this3 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30922,
            "content": "var redraw = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30923,
            "content": "var animate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30924,
            "content": "var updateSyncedCharts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30925,
            "content": "var overwriteInitialConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30926,
            "content": "var w = this.w; // when called externally, clear some global variables",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30975,
            "content": "var newSeries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30976,
            "content": "var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30977,
            "content": "var overwriteInitialSeries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30991,
            "content": "var animate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30992,
            "content": "var overwriteInitialSeries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 30993,
            "content": "var newSeries = this.w.config.series.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31008,
            "content": "var overwriteInitialSeries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31009,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31012,
            "content": "var newSeries = me.w.config.series.slice();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31033,
            "content": "var _this4 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31040,
            "content": "var graphData = _this4.create(_this4.w.config.series, options);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 31044,
            "content": "_this4.mount(graphData).then(function () {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "var_declarations",
            "line": 31065,
            "content": "var chartGroups = this.getGroupedCharts();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31066,
            "content": "var allCharts = [this];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31084,
            "content": "var _this5 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31117,
            "content": "var shouldUpdateChart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31118,
            "content": "var shouldResetZoom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31136,
            "content": "var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31137,
            "content": "var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31138,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31149,
            "content": "var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31150,
            "content": "var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31151,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31162,
            "content": "var pushToMemory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31163,
            "content": "var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31164,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31175,
            "content": "var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31176,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31187,
            "content": "var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31188,
            "content": "var me = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31199,
            "content": "var el = this.w.globals.dom.baseEl.querySelector('.apexcharts-inner');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31210,
            "content": "var seriesIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31211,
            "content": "var range = new Range(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31217,
            "content": "var seriesIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31218,
            "content": "var range = new Range(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31244,
            "content": "var exp = new Exports(this.ctx);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31266,
            "content": "var _this6 = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31279,
            "content": "var redraw = this.w.config.chart.redrawOnWindowResize;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31290,
            "content": "var chartId = Utils$1.escapeString(id);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31292,
            "content": "var c = Apex._chartInstances.filter(function (ch) {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31305,
            "content": "var els = document.querySelectorAll('[data-apexcharts]');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31308,
            "content": "var el = els[i];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31309,
            "content": "var options = JSON.parse(els[i].getAttribute('data-options'));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31310,
            "content": "var apexChart = new ApexCharts(el, options);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31333,
            "content": "var chart = this.getChartByID(chartID);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 31337,
            "content": "var ret = null;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 3424,
        "severity_counts": {
          "critical": 1,
          "low": 3416,
          "medium": 3,
          "high": 4
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\index.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          },
          {
            "type": "jquery_usage",
            "line": 1,
            "content": "!function(){var e,t,i,r,n,s={3145:function(e,t,i){\"use strict\";i.d(t,{UZ:function(){return s},cP:function(){return n},i_:function(){return r}});const r=new class{constructor(){Object.defineProperty(this,\"version\",{enumerable:!0,configurable:!0,writable:!0,value:\"5.7.3\"}),Object.defineProperty(this,\"licenses\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"entitiesById\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"rootElements\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}};function n(e){r.licenses.push(e)}function s(){let e;for(;e=r.rootElements.pop();)e.dispose()}},6493:function(e,t,i){\"use strict\";i.d(t,{f:function(){return Le}});var r=i(8777),n=i(2036),s=i(4431),a=i(1706),o=i(6881),l=i(7449),h=i(5071),u=i(7652);class c{constructor(){Object.defineProperty(this,\"_observer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_targets\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),this._observer=new ResizeObserver((e=>{h.each(e,(e=>{h.each(this._targets,(t=>{t.target===e.target&&t.callback()}))}))}))}addTarget(e,t){this._observer.observe(e,{box:\"border-box\"}),this._targets.push({target:e,callback:t})}removeTarget(e){this._observer.unobserve(e),h.keepIf(this._targets,(t=>t.target!==e))}}class d{constructor(){Object.defineProperty(this,\"_timer\",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,\"_targets\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}addTarget(e,t){if(null===this._timer){let e=null;const t=()=>{const i=Date.now();(null===e||i>e+d.delay)&&(e=i,h.each(this._targets,(e=>{let t=e.target.getBoundingClientRect();t.width===e.size.width&&t.height===e.size.height||(e.size=t,e.callback())}))),0===this._targets.length?this._timer=null:this._timer=requestAnimationFrame(t)};this._timer=requestAnimationFrame(t)}this._targets.push({target:e,callback:t,size:{width:0,height:0,left:0,right:0,top:0,bottom:0,x:0,y:0}})}removeTarget(e){h.keepIf(this._targets,(t=>t.target!==e)),0===this._targets.length&&null!==this._timer&&(cancelAnimationFrame(this._timer),this._timer=null)}}Object.defineProperty(d,\"delay\",{enumerable:!0,configurable:!0,writable:!0,value:200});let p=null;class f{constructor(e,t){Object.defineProperty(this,\"_sensor\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_element\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_listener\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),this._sensor=(null===p&&(p=\"undefined\"!=typeof ResizeObserver?new c:new d),p),this._element=e,this._listener=u.onZoom(t),this._sensor.addTarget(e,t)}isDisposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this._sensor.removeTarget(this._element),this._listener.dispose())}get sensor(){return this._sensor}}var g=i(9821),m=i(1479),b=i(7142),_=i(2876),v=i(780),y=i(6460),w=i(798),x=i(6331),O=i(256),P=i(3100);class D extends x.JH{_setDefaults(){this.setPrivate(\"defaultLocale\",P.Z),super._setDefaults()}translate(e,t,...i){t||(t=this._root.locale||this.getPrivate(\"defaultLocale\"));let r=e,n=t[e];if(null===n)r=\"\";else if(null!=n)n&&(r=n);else if(t!==this.getPrivate(\"defaultLocale\"))return this.translate(e,this.getPrivate(\"defaultLocale\"),...i);if(i.length)for(let e=i.length,t=0;t<e;++t)r=r.split(\"%\"+(t+1)).join(i[t]);return r}translateAny(e,t,...i){return this.translate(e,t,...i)}setTranslationAny(e,t,i){(i||this._root.locale)[e]=t}setTranslationsAny(e,t){O.each(e,((e,i)=>{this.setTranslationAny(e,i,t)}))}translateEmpty(e,t,...i){let r=this.translate(e,t,...i);return r==e?\"\":r}translateFunc(e,t){return this._root.locale[e]?this._root.locale[e]:t!==this.getPrivate(\"defaultLocale\")?this.translateFunc(e,this.getPrivate(\"defaultLocale\")):()=>\"\"}translateAll(e,t){return this.isDefault()?e:h.map(e,(e=>this.translate(e,t)))}isDefault(){return this.getPrivate(\"defaultLocale\")===this._root.locale}}var k=i(9770),T=i(3783),M=i(4680),E=i(1112);class S{constructor(e=1,t=0,i=0,r=1,n=0,s=0){Object.defineProperty(this,\"a\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"b\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"c\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"d\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"tx\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"ty\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.a=e,this.b=t,this.c=i,this.d=r,this.tx=n,this.ty=s}setTransform(e,t,i,r,n,s=1){this.a=Math.cos(n)*s,this.b=Math.sin(n)*s,this.c=-Math.sin(n)*s,this.d=Math.cos(n)*s,this.tx=e-(i*this.a+r*this.c),this.ty=t-(i*this.b+r*this.d)}apply(e){return{x:this.a*e.x+this.c*e.y+this.tx,y:this.b*e.x+this.d*e.y+this.ty}}applyInverse(e){const t=1/(this.a*this.d+this.c*-this.b);return{x:this.d*t*e.x+-this.c*t*e.y+(this.ty*this.c-this.tx*this.d)*t,y:this.a*t*e.y+-this.b*t*e.x+(-this.ty*this.a+this.tx*this.b)*t}}append(e){const t=this.a,i=this.b,r=this.c,n=this.d;this.a=e.a*t+e.b*r,this.b=e.a*i+e.b*n,this.c=e.c*t+e.d*r,this.d=e.c*i+e.d*n,this.tx=e.tx*t+e.ty*r+this.tx,this.ty=e.tx*i+e.ty*n+this.ty}prepend(e){const t=this.tx;if(1!==e.a||0!==e.b||0!==e.c||1!==e.d){const t=this.a,i=this.c;this.a=t*e.a+this.b*e.c,this.b=t*e.b+this.b*e.d,this.c=i*e.a+this.d*e.c,this.d=i*e.b+this.d*e.d}this.tx=t*e.a+this.ty*e.c+e.tx,this.ty=t*e.b+this.ty*e.d+e.ty}copyFrom(e){this.a=e.a,this.b=e.b,this.c=e.c,this.d=e.d,this.tx=e.tx,this.ty=e.ty}}var N=i(6245),C=i(7255),L=i(5040),j=i(751),A=2*Math.PI,R=function(e,t,i,r,n,s,a){var o=e.x,l=e.y;return{x:r*(o*=t)-n*(l*=i)+s,y:n*o+r*l+a}},B=function(e,t){var i=1.5707963267948966===t?.551915024494:-1.5707963267948966===t?-.551915024494:4/3*Math.tan(t/4),r=Math.cos(e),n=Math.sin(e),s=Math.cos(e+t),a=Math.sin(e+t);return[{x:r-n*i,y:n+r*i},{x:s+a*i,y:a-s*i},{x:s,y:a}]},U=function(e,t,i,r){var n=e*i+t*r;return n>1&&(n=1),n<-1&&(n=-1),(e*r-t*i<0?-1:1)*Math.acos(n)},F=function(e){var t=e.px,i=e.py,r=e.cx,n=e.cy,s=e.rx,a=e.ry,o=e.xAxisRotation,l=void 0===o?0:o,h=e.largeArcFlag,u=void 0===h?0:h,c=e.sweepFlag,d=void 0===c?0:c,p=[];if(0===s||0===a)return[];var f=Math.sin(l*A/360),g=Math.cos(l*A/360),m=g*(t-r)/2+f*(i-n)/2,b=-f*(t-r)/2+g*(i-n)/2;if(0===m&&0===b)return[];s=Math.abs(s),a=Math.abs(a);var _=Math.pow(m,2)/Math.pow(s,2)+Math.pow(b,2)/Math.pow(a,2);_>1&&(s*=Math.sqrt(_),a*=Math.sqrt(_));var v=function(e,t,i,r,n,s,a,o,l,h,u,c){var d=Math.pow(n,2),p=Math.pow(s,2),f=Math.pow(u,2),g=Math.pow(c,2),m=d*p-d*g-p*f;m<0&&(m=0),m/=d*g+p*f;var b=(m=Math.sqrt(m)*(a===o?-1:1))*n/s*c,_=m*-s/n*u,v=h*b-l*_+(e+i)/2,y=l*b+h*_+(t+r)/2,w=(u-b)/n,x=(c-_)/s,O=(-u-b)/n,P=(-c-_)/s,D=U(1,0,w,x),k=U(w,x,O,P);return 0===o&&k>0&&(k-=A),1===o&&k<0&&(k+=A),[v,y,D,k]}(t,i,r,n,s,a,u,d,f,g,m,b),y=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var i=[],r=!0,n=!1,s=void 0;try{for(var a,o=e[Symbol.iterator]();!(r=(a=o.next()).done)&&(i.push(a.value),!t||i.length!==t);r=!0);}catch(e){n=!0,s=e}finally{try{!r&&o.return&&o.return()}finally{if(n)throw s}}return i}(e,t);throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}(v,4),w=y[0],x=y[1],O=y[2],P=y[3],D=Math.abs(P)/(A/4);Math.abs(1-D)<1e-7&&(D=1);var k=Math.max(Math.ceil(D),1);P/=k;for(var T=0;T<k;T++)p.push(B(O,P)),O+=P;return p.map((function(e){var t=R(e[0],s,a,g,f,w,x),i=t.x,r=t.y,n=R(e[1],s,a,g,f,w,x),o=n.x,l=n.y,h=R(e[2],s,a,g,f,w,x);return{x1:i,y1:r,x2:o,y2:l,x:h.x,y:h.y}}))};function I(e,t,i){if(t!==i)throw new Error(\"Required \"+i+\" arguments for \"+e+\" but got \"+t)}function H(e,t,i){if(t<i)throw new Error(\"Required at least \"+i+\" arguments for \"+e+\" but got \"+t)}function z(e,t,i){if(H(e,t,i),t%i!=0)throw new Error(\"Arguments for \"+e+\" must be in pairs of \"+i)}function V(e){for(let t=0;t<e.length;t+=7){let i=t+3,r=e[i];if(r.length>1){const t=/^([01])([01])(.*)$/.exec(r);null!==t&&(e.splice(i,0,t[1]),++i,e.splice(i,0,t[2]),++i,t[3].length>0?e[i]=t[3]:e.splice(i,1))}if(++i,r=e[i],r.length>1){const t=/^([01])(.+)$/.exec(r);null!==t&&(e.splice(i,0,t[1]),++i,e[i]=t[2])}}}function G(e){if(0===e||1===e)return e;throw new Error(\"Flag must be 0 or 1\")}function Y(e,t){for(;(!e.interactive||t(e))&&e._parent;)e=e._parent}function W(e,t,i){return u.addEventListener(e,u.getRendererEvent(t),(e=>{const t=u.getEventTarget(e);let r=e.touches;r?(0==r.length&&(r=e.changedTouches),i(h.copy(r),t)):i([e],t)}))}function X(e){const t=document.createElement(\"canvas\");t.width=1,t.height=1;const i=t.getContext(\"2d\",{willReadFrequently:!0});i.drawImage(e,0,0,1,1);try{return i.getImageData(0,0,1,1),!1}catch(t){return console.warn('Image \"'+e.src+'\" is loaded from different host and is not covered by CORS policy. For more information about the implications read here: https://www.amcharts.com/docs/v5/concepts/cors'),!0}}function $(e){e.width=0,e.height=0,e.style.width=\"0px\",e.style.height=\"0px\"}function Z(e){return Math.floor(e)+.5}class K{constructor(){Object.defineProperty(this,\"_x\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_y\",{enumerable:!0,configurable:!0,writable:!0,value:0})}get x(){return this._x}get y(){return this._y}set x(e){this._x=e}set y(e){this._y=e}}class q extends l.KK{constructor(e){super(),Object.defineProperty(this,\"_layer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"mask\",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,\"visible\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"exportable\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"interactive\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"inactive\",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,\"wheelable\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"cancelTouch\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"isMeasured\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"buttonMode\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"alpha\",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,\"compoundAlpha\",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,\"angle\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"scale\",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"crisp\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"pivot\",{enumerable:!0,configurable:!0,writable:!0,value:new K}),Object.defineProperty(this,\"filter\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"cursorOverStyle\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_replacedCursorStyle\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_localMatrix\",{enumerable:!0,configurable:!0,writable:!0,value:new S}),Object.defineProperty(this,\"_matrix\",{enumerable:!0,configurable:!0,writable:!0,value:new S}),Object.defineProperty(this,\"_uMatrix\",{enumerable:!0,configurable:!0,writable:!0,value:new S}),Object.defineProperty(this,\"_renderer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_parent\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_localBounds\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_bounds\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_colorId\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._renderer=e}subStatus(e){return{inactive:null==this.inactive?e.inactive:this.inactive,layer:this._layer||e.layer}}_dispose(){this._renderer._removeObject(this),this.getLayer().dirty=!0}getCanvas(){return this.getLayer().view}getLayer(){let e=this;for(;;){if(e._layer)return e._layer;if(!e._parent)return this._renderer.defaultLayer;e=e._parent}}setLayer(e,t){if(null==e)this._layer=void 0;else{const i=!0;this._layer=this._renderer.getLayer(e,i),this._layer.visible=i,this._layer.margin=t,t&&u.setInteractive(this._layer.view,!1),this._renderer._ghostLayer.setMargin(this._renderer.layers),this._parent&&this._parent.registerChildLayer(this._layer),this._layer.dirty=!0,this._renderer.resizeLayer(this._layer),this._renderer.resizeGhost()}}markDirtyLayer(){this.getLayer().dirty=!0}clear(){this.invalidateBounds()}invalidateBounds(){this._localBounds=void 0}_addBounds(e){}_getColorId(){return void 0===this._colorId&&(this._colorId=this._renderer.paintId(this)),this._colorId}_isInteractive(e){return!e.inactive&&(this.interactive||this._renderer._forceInteractive>0)}_isInteractiveMask(e){return this._isInteractive(e)}contains(e){for(;;){if(e===this)return!0;if(!e._parent)return!1;e=e._parent}}toGlobal(e){return this._matrix.apply(e)}toLocal(e){return this._matrix.applyInverse(e)}getLocalMatrix(){return this._uMatrix.setTransform(0,0,this.pivot.x,this.pivot.y,this.angle*Math.PI/180,this.scale),this._uMatrix}getLocalBounds(){if(!this._localBounds){const e=1e7;this._localBounds={left:e,top:e,right:-e,bottom:-e},this._addBounds(this._localBounds)}return this._localBounds}getAdjustedBounds(e){this._setMatrix();const t=this.getLocalMatrix(),i=t.apply({x:e.left,y:e.top}),r=t.apply({x:e.right,y:e.top}),n=t.apply({x:e.right,y:e.bottom}),s=t.apply({x:e.left,y:e.bottom});return{left:Math.min(i.x,r.x,n.x,s.x),top:Math.min(i.y,r.y,n.y,s.y),right:Math.max(i.x,r.x,n.x,s.x),bottom:Math.max(i.y,r.y,n.y,s.y)}}on(e,t,i){return this.interactive?this._renderer._addEvent(this,e,t,i):new l.ku((()=>{}))}_setMatrix(){this._localMatrix.setTransform(this.x,this.y,this.pivot.x,this.pivot.y,this.angle*Math.PI/180,this.scale),this._matrix.copyFrom(this._localMatrix),this._parent&&this._matrix.prepend(this._parent._matrix)}_transform(e,t){const i=this._matrix;let r=i.tx*t,n=i.ty*t;this.crisp&&(r=Z(r),n=Z(n)),e.setTransform(i.a*t,i.b*t,i.c*t,i.d*t,r,n)}_transformMargin(e,t,i){const r=this._matrix;e.setTransform(r.a*t,r.b*t,r.c*t,r.d*t,(r.tx+i.left)*t,(r.ty+i.top)*t)}_transformLayer(e,t,i){i.margin?this._transformMargin(e,i.scale||t,i.margin):this._transform(e,i.scale||t)}render(e){if(this.visible&&(!1!==this.exportable||!this._renderer._omitTainted)){this._setMatrix();const t=this.subStatus(e),i=this._renderer.resolution,r=this._renderer.layers,n=this._renderer._ghostLayer,s=n.context,a=this.mask;a&&a._setMatrix(),h.each(r,(e=>{if(e){const t=e.context;t.save(),a&&(a._transformLayer(t,i,e),a._runPath(t),t.clip()),t.globalAlpha=this.compoundAlpha*this.alpha,this._transformLayer(t,i,e),this.filter&&(t.filter=this.filter)}})),s.save(),a&&this._isInteractiveMask(t)&&(a._transformMargin(s,i,n.margin),a._runPath(s),s.clip()),this._transformMargin(s,i,n.margin),this._render(t),s.restore(),h.each(r,(e=>{e&&e.context.restore()}))}}_render(e){!1===this.exportable&&(e.layer.tainted=!0)}hovering(){return this._renderer._hovering.has(this)}dragging(){return this._renderer._dragging.some((e=>e.value===this))}shouldCancelTouch(){const e=this._renderer;return!(e.tapToActivate&&!e._touchActive)&&(!!this.cancelTouch||!!this._parent&&this._parent.shouldCancelTouch())}}class Q extends q{constructor(){super(...arguments),Object.defineProperty(this,\"interactiveChildren\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"_childLayers\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_children\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}_isInteractiveMask(e){return this.interactiveChildren||super._isInteractiveMask(e)}addChild(e){e._parent=this,this._children.push(e),e._layer&&this.registerChildLayer(e._layer)}addChildAt(e,t){e._parent=this,this._children.splice(t,0,e),e._layer&&this.registerChildLayer(e._layer)}removeChild(e){e._parent=void 0,h.removeFirst(this._children,e)}_render(e){super._render(e);const t=this._renderer;this.interactive&&this.interactiveChildren&&++t._forceInteractive,h.each(this._children,(t=>{t.compoundAlpha=this.compoundAlpha*this.alpha,t.render(e)})),this.interactive&&this.interactiveChildren&&--t._forceInteractive}registerChildLayer(e){this._childLayers||(this._childLayers=[]),h.pushOne(this._childLayers,e),this._parent&&this._parent.registerChildLayer(e)}markDirtyLayer(e=!1){super.markDirtyLayer(),e&&this._childLayers&&h.each(this._childLayers,(e=>e.dirty=!0))}_dispose(){super._dispose(),this._childLayers&&h.each(this._childLayers,(e=>{e.dirty=!0}))}}function J(e,t){e.left=Math.min(e.left,t.x),e.top=Math.min(e.top,t.y),e.right=Math.max(e.right,t.x),e.bottom=Math.max(e.bottom,t.y)}class ee{colorize(e,t){}path(e){}addBounds(e){}}class te extends ee{colorize(e,t){e.beginPath()}}class ie extends ee{constructor(e){super(),Object.defineProperty(this,\"color\",{enumerable:!0,configurable:!0,writable:!0,value:e})}colorize(e,t){e.fillStyle=void 0!==t?t:this.color}}class re extends ee{constructor(e){super(),Object.defineProperty(this,\"clearShadow\",{enumerable:!0,configurable:!0,writable:!0,value:e})}colorize(e,t){e.fill(),this.clearShadow&&(e.shadowColor=\"\",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0)}}class ne extends ee{colorize(e,t){e.stroke()}}class se extends ee{constructor(e,t,i){super(),Object.defineProperty(this,\"width\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"color\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"lineJoin\",{enumerable:!0,configurable:!0,writable:!0,value:i})}colorize(e,t){e.strokeStyle=void 0!==t?t:this.color,e.lineWidth=this.width,this.lineJoin&&(e.lineJoin=this.lineJoin)}}class ae extends ee{constructor(e){super(),Object.defineProperty(this,\"dash\",{enumerable:!0,configurable:!0,writable:!0,value:e})}colorize(e,t){e.setLineDash(this.dash)}}class oe extends ee{constructor(e){super(),Object.defineProperty(this,\"dashOffset\",{enumerable:!0,configurable:!0,writable:!0,value:e})}colorize(e,t){e.lineDashOffset=this.dashOffset}}class le extends ee{constructor(e,t,i,r){super(),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"width\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"height\",{enumerable:!0,configurable:!0,writable:!0,value:r})}path(e){e.rect(this.x,this.y,this.width,this.height)}addBounds(e){const t=this.x,i=this.y,r=t+this.width,n=i+this.height;J(e,{x:t,y:i}),J(e,{x:r,y:i}),J(e,{x:t,y:n}),J(e,{x:r,y:n})}}class he extends ee{constructor(e,t,i){super(),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"radius\",{enumerable:!0,configurable:!0,writable:!0,value:i})}path(e){e.moveTo(this.x+this.radius,this.y),e.arc(this.x,this.y,this.radius,0,2*Math.PI)}addBounds(e){J(e,{x:this.x-this.radius,y:this.y-this.radius}),J(e,{x:this.x+this.radius,y:this.y+this.radius})}}class ue extends ee{constructor(e,t,i,r){super(),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"radiusX\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"radiusY\",{enumerable:!0,configurable:!0,writable:!0,value:r})}path(e){e.ellipse(0,0,this.radiusX,this.radiusY,0,0,2*Math.PI)}addBounds(e){J(e,{x:this.x-this.radiusX,y:this.y-this.radiusY}),J(e,{x:this.x+this.radiusX,y:this.y+this.radiusY})}}class ce extends ee{constructor(e,t,i,r,n,s){super(),Object.defineProperty(this,\"cx\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"cy\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"radius\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"startAngle\",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,\"endAngle\",{enumerable:!0,configurable:!0,writable:!0,value:n}),Object.defineProperty(this,\"anticlockwise\",{enumerable:!0,configurable:!0,writable:!0,value:s})}path(e){this.radius>0&&e.arc(this.cx,this.cy,this.radius,this.startAngle,this.endAngle,this.anticlockwise)}addBounds(e){let t=j.getArcBounds(this.cx,this.cy,this.startAngle*j.DEGREES,this.endAngle*j.DEGREES,this.radius);J(e,{x:t.left,y:t.top}),J(e,{x:t.right,y:t.bottom})}}class de extends ee{constructor(e,t,i,r,n){super(),Object.defineProperty(this,\"x1\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"y1\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"x2\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"y2\",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,\"radius\",{enumerable:!0,configurable:!0,writable:!0,value:n})}path(e){this.radius>0&&e.arcTo(this.x1,this.y1,this.x2,this.y2,this.radius)}addBounds(e){}}class pe extends ee{constructor(e,t){super(),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:t})}path(e){e.lineTo(this.x,this.y)}addBounds(e){J(e,{x:this.x,y:this.y})}}class fe extends ee{constructor(e,t){super(),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:t})}path(e){e.moveTo(this.x,this.y)}addBounds(e){J(e,{x:this.x,y:this.y})}}class ge extends ee{path(e){e.closePath()}}class me extends ee{constructor(e,t,i,r,n,s){super(),Object.defineProperty(this,\"cpX\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"cpY\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"cpX2\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"cpY2\",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,\"toX\",{enumerable:!0,configurable:!0,writable:!0,value:n}),Object.defineProperty(this,\"toY\",{enumerable:!0,configurable:!0,writable:!0,value:s})}path(e){e.bezierCurveTo(this.cpX,this.cpY,this.cpX2,this.cpY2,this.toX,this.toY)}addBounds(e){J(e,{x:this.cpX,y:this.cpY}),J(e,{x:this.cpX2,y:this.cpY2}),J(e,{x:this.toX,y:this.toY})}}class be extends ee{constructor(e,t,i,r){super(),Object.defineProperty(this,\"cpX\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"cpY\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"toX\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"toY\",{enumerable:!0,configurable:!0,writable:!0,value:r})}path(e){e.quadraticCurveTo(this.cpX,this.cpY,this.toX,this.toY)}addBounds(e){J(e,{x:this.cpX,y:this.cpY}),J(e,{x:this.toX,y:this.toY})}}class _e extends ee{constructor(e,t,i,r,n){super(),Object.defineProperty(this,\"color\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"blur\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"offsetX\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"offsetY\",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,\"opacity\",{enumerable:!0,configurable:!0,writable:!0,value:n})}colorize(e,t){this.opacity&&(e.fillStyle=this.color),e.shadowColor=this.color,e.shadowBlur=this.blur,e.shadowOffsetX=this.offsetX,e.shadowOffsetY=this.offsetY}}class ve extends ee{constructor(e,t,i,r,n){super(),Object.defineProperty(this,\"image\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"width\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"height\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"x\",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,\"y\",{enumerable:!0,configurable:!0,writable:!0,value:n})}path(e){e.drawImage(this.image,this.x,this.y,this.width,this.height)}addBounds(e){J(e,{x:this.x,y:this.y}),J(e,{x:this.width,y:this.height})}}class ye extends q{constructor(){super(...arguments),Object.defineProperty(this,\"_operations\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"blendMode\",{enumerable:!0,configurable:!0,writable:!0,value:M.b.NORMAL}),Object.defineProperty(this,\"_hasShadows\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_fillAlpha\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_strokeAlpha\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}clear(){super.clear(),this._operations.length=0}_pushOp(e){this._operations.push(e)}beginFill(e,t=1){this._fillAlpha=t,e?e instanceof E.Il?this._pushOp(new ie(e.toCSS(t))):(this.isMeasured=!0,this._pushOp(new ie(e))):this._pushOp(new ie(\"rgba(0, 0, 0, \"+t+\")\"))}endFill(){this._pushOp(new re(this._hasShadows))}endStroke(){this._pushOp(new ne)}beginPath(){this._pushOp(new te)}lineStyle(e=0,t,i=1,r){this._strokeAlpha=i,t?t instanceof E.Il?this._pushOp(new se(e,t.toCSS(i),r)):this._pushOp(new se(e,t,r)):this._pushOp(new se(e,\"rgba(0, 0, 0, \"+i+\")\",r))}setLineDash(e){this._pushOp(new ae(e||[]))}setLineDashOffset(e=0){this._pushOp(new oe(e))}drawRect(e,t,i,r){this._pushOp(new le(e,t,i,r))}drawCircle(e,t,i){this._pushOp(new he(e,t,i))}drawEllipse(e,t,i,r){this._pushOp(new ue(e,t,i,r))}arc(e,t,i,r,n,s=!1){this._pushOp(new ce(e,t,i,r,n,s))}arcTo(e,t,i,r,n){this._pushOp(new de(e,t,i,r,n))}lineTo(e,t){this._pushOp(new pe(e,t))}moveTo(e,t){this._pushOp(new fe(e,t))}bezierCurveTo(e,t,i,r,n,s){this._pushOp(new me(e,t,i,r,n,s))}quadraticCurveTo(e,t,i,r){this._pushOp(new be(e,t,i,r))}closePath(){this._pushOp(new ge)}shadow(e,t=0,i=0,r=0,n){this._hasShadows=!0,this._pushOp(new _e(n?e.toCSS(n):e.toCSS(this._fillAlpha||this._strokeAlpha),t,i,r))}image(e,t,i,r,n){this._pushOp(new ve(e,t,i,r,n))}svgPath(e){let t=0,i=0,r=null,n=null,s=null,a=null;const o=/([MmZzLlHhVvCcSsQqTtAa])([^MmZzLlHhVvCcSsQqTtAa]*)/g,l=/[\\u0009\\u0020\\u000A\\u000C\\u000D]*([\\+\\-]?[0-9]*\\.?[0-9]+(?:[eE][\\+\\-]?[0-9]+)?)[\\u0009\\u0020\\u000A\\u000C\\u000D]*,?/g;let u;for(;null!==(u=o.exec(e));){const e=u[1],o=u[2],c=[];for(;null!==(u=l.exec(o));)c.push(u[1]);switch(\"S\"!==e&&\"s\"!==e&&\"C\"!==e&&\"c\"!==e&&(r=null,n=null),\"Q\"!==e&&\"q\"!==e&&\"T\"!==e&&\"t\"!==e&&(s=null,a=null),e){case\"M\":z(e,c.length,2),t=+c[0],i=+c[1],this.moveTo(t,i);for(let e=2;e<c.length;e+=2)t=+c[e],i=+c[e+1],this.lineTo(t,i);break;case\"m\":z(e,c.length,2),t+=+c[0],i+=+c[1],this.moveTo(t,i);for(let e=2;e<c.length;e+=2)t+=+c[e],i+=+c[e+1],this.lineTo(t,i);break;case\"L\":z(e,c.length,2);for(let e=0;e<c.length;e+=2)t=+c[e],i=+c[e+1],this.lineTo(t,i);break;case\"l\":z(e,c.length,2);for(let e=0;e<c.length;e+=2)t+=+c[e],i+=+c[e+1],this.lineTo(t,i);break;case\"H\":H(e,c.length,1);for(let e=0;e<c.length;++e)t=+c[e],this.lineTo(t,i);break;case\"h\":H(e,c.length,1);for(let e=0;e<c.length;++e)t+=+c[e],this.lineTo(t,i);break;case\"V\":H(e,c.length,1);for(let e=0;e<c.length;++e)i=+c[e],this.lineTo(t,i);break;case\"v\":H(e,c.length,1);for(let e=0;e<c.length;++e)i+=+c[e],this.lineTo(t,i);break;case\"C\":z(e,c.length,6);for(let e=0;e<c.length;e+=6){const s=+c[e],a=+c[e+1];r=+c[e+2],n=+c[e+3],t=+c[e+4],i=+c[e+5],this.bezierCurveTo(s,a,r,n,t,i)}break;case\"c\":z(e,c.length,6);for(let e=0;e<c.length;e+=6){const s=+c[e]+t,a=+c[e+1]+i;r=+c[e+2]+t,n=+c[e+3]+i,t+=+c[e+4],i+=+c[e+5],this.bezierCurveTo(s,a,r,n,t,i)}break;case\"S\":z(e,c.length,4),null!==r&&null!==n||(r=t,n=i);for(let e=0;e<c.length;e+=4){const s=2*t-r,a=2*i-n;r=+c[e],n=+c[e+1],t=+c[e+2],i=+c[e+3],this.bezierCurveTo(s,a,r,n,t,i)}break;case\"s\":z(e,c.length,4),null!==r&&null!==n||(r=t,n=i);for(let e=0;e<c.length;e+=4){const s=2*t-r,a=2*i-n;r=+c[e]+t,n=+c[e+1]+i,t+=+c[e+2],i+=+c[e+3],this.bezierCurveTo(s,a,r,n,t,i)}break;case\"Q\":z(e,c.length,4);for(let e=0;e<c.length;e+=4)s=+c[e],a=+c[e+1],t=+c[e+2],i=+c[e+3],this.quadraticCurveTo(s,a,t,i);break;case\"q\":z(e,c.length,4);for(let e=0;e<c.length;e+=4)s=+c[e]+t,a=+c[e+1]+i,t+=+c[e+2],i+=+c[e+3],this.quadraticCurveTo(s,a,t,i);break;case\"T\":z(e,c.length,2),null!==s&&null!==a||(s=t,a=i);for(let e=0;e<c.length;e+=2)s=2*t-s,a=2*i-a,t=+c[e],i=+c[e+1],this.quadraticCurveTo(s,a,t,i);break;case\"t\":z(e,c.length,2),null!==s&&null!==a||(s=t,a=i);for(let e=0;e<c.length;e+=2)s=2*t-s,a=2*i-a,t+=+c[e],i+=+c[e+1],this.quadraticCurveTo(s,a,t,i);break;case\"A\":case\"a\":const o=\"a\"===e;V(c),z(e,c.length,7);for(let e=0;e<c.length;e+=7){let r=+c[e+5],n=+c[e+6];o&&(r+=t,n+=i);const s=F({px:t,py:i,rx:+c[e],ry:+c[e+1],xAxisRotation:+c[e+2],largeArcFlag:G(+c[e+3]),sweepFlag:G(+c[e+4]),cx:r,cy:n});h.each(s,(e=>{this.bezierCurveTo(e.x1,e.y1,e.x2,e.y2,e.x,e.y),t=e.x,i=e.y}))}break;case\"Z\":case\"z\":I(e,c.length,0),this.closePath()}}}_runPath(e){e.beginPath(),h.each(this._operations,(t=>{t.path(e)}))}_render(e){super._render(e);const t=e.layer.dirty,i=this._isInteractive(e);if(t||i){const r=e.layer.context,n=this._renderer._ghostLayer.context;let s;t&&(r.globalCompositeOperation=this.blendMode,r.beginPath()),i&&(n.beginPath(),s=this._getColorId()),h.each(this._operations,(e=>{t&&(e.path(r),e.colorize(r,void 0)),i&&(e.path(n),e.colorize(n,s))}))}}renderDetached(e){if(this.visible){this._setMatrix(),e.save();const t=this.mask;t&&(t._setMatrix(),t._transform(e,1),t._runPath(e),e.clip()),e.globalAlpha=this.compoundAlpha*this.alpha,this._transform(e,1),this.filter&&(e.filter=this.filter),e.globalCompositeOperation=this.blendMode,e.beginPath(),h.each(this._operations,(t=>{t.path(e),t.colorize(e,void 0)})),e.restore()}}_addBounds(e){this.visible&&this.isMeasured&&h.each(this._operations,(t=>{t.addBounds(e)}))}}class we extends q{constructor(e,t,i){super(e),Object.defineProperty(this,\"text\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"style\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"resolution\",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,\"textVisible\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"_textInfo\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_originalScale\",{enumerable:!0,configurable:!0,writable:!0,value:1}),this.text=t,this.style=i}invalidateBounds(){super.invalidateBounds(),this._textInfo=void 0}_shared(e){this.style.textAlign&&(e.textAlign=this.style.textAlign),this.style.direction&&(e.direction=this.style.direction),this.style.textBaseline&&(e.textBaseline=this.style.textBaseline)}_prerender(e,t=!1,i=!1){super._render(e);const r=e.layer.context,n=this._renderer._ghostLayer.context,s=this.style;let a=this._getFontStyle(void 0,i);r.font=a,this._isInteractive(e)&&!t&&(n.font=a),s.fill&&(s.fill instanceof E.Il?r.fillStyle=s.fill.toCSS(null!=s.fillOpacity?s.fillOpacity:1):r.fillStyle=s.fill),s.shadowColor&&(e.layer.context.shadowColor=s.shadowColor.toCSS(s.shadowOpacity||1)),s.shadowBlur&&(e.layer.context.shadowBlur=s.shadowBlur),s.shadowOffsetX&&(e.layer.context.shadowOffsetX=s.shadowOffsetX),s.shadowOffsetY&&(e.layer.context.shadowOffsetY=s.shadowOffsetY),this._shared(r),this._isInteractive(e)&&!t&&(n.fillStyle=this._getColorId(),this._shared(n))}_getFontStyle(e,t=!1){const i=this.style;let r=[];return e&&e.fontVariant?r.push(e.fontVariant):i.fontVariant&&r.push(i.fontVariant),t||(e&&e.fontWeight?r.push(e.fontWeight):i.fontWeight&&r.push(i.fontWeight)),e&&e.fontStyle?r.push(e.fontStyle):i.fontStyle&&r.push(i.fontStyle),e&&e.fontSize?(L.isNumber(e.fontSize)&&(e.fontSize=e.fontSize+\"px\"),r.push(e.fontSize)):i.fontSize&&(L.isNumber(i.fontSize)&&(i.fontSize=i.fontSize+\"px\"),r.push(i.fontSize)),e&&e.fontFamily?r.push(e.fontFamily):i.fontFamily?r.push(i.fontFamily):r.length&&r.push(\"Arial\"),r.join(\" \")}_render(e){if(this._textInfo||this._measure(e),this.textVisible){const t=this._isInteractive(e),i=e.layer.context,r=e.layer.dirty,n=this._renderer._ghostLayer.context;i.save(),n.save(),this._prerender(e),h.each(this._textInfo,((s,a)=>{h.each(s.textChunks,((a,o)=>{if(a.style&&(i.save(),n.save(),i.font=a.style,this._isInteractive(e)&&(n.font=a.style)),a.fill&&(i.save(),i.fillStyle=a.fill.toCSS()),r&&i.fillText(a.text,a.offsetX,s.offsetY+a.offsetY),\"underline\"==a.textDecoration||\"line-through\"==a.textDecoration){let e,t=1,r=1,n=a.height,o=a.offsetX;switch(this.style.textAlign){case\"right\":case\"end\":o-=a.width;break;case\"center\":o-=a.width/2}if(a.style)switch(C.V.getTextStyle(a.style).fontWeight){case\"bolder\":case\"bold\":case\"700\":case\"800\":case\"900\":t=2}n&&(r=n/20),e=\"line-through\"==a.textDecoration?t+s.offsetY+a.offsetY-a.height/2:t+1.5*r+s.offsetY+a.offsetY,i.save(),i.beginPath(),a.fill?i.strokeStyle=a.fill.toCSS():this.style.fill&&this.style.fill instanceof E.Il&&(i.strokeStyle=this.style.fill.toCSS()),i.lineWidth=t*r,i.moveTo(o,e),i.lineTo(o+a.width,e),i.stroke(),i.restore()}t&&this.interactive&&n.fillText(a.text,a.offsetX,s.offsetY+a.offsetY),a.fill&&i.restore(),a.style&&(i.restore(),n.restore())}))})),i.restore(),n.restore()}}_addBounds(e){if(this.visible&&this.isMeasured){const t=this._measure({inactive:this.inactive,layer:this.getLayer()});J(e,{x:t.left,y:t.top}),J(e,{x:t.right,y:t.bottom})}}_ignoreFontWeight(){return/apple/i.test(navigator.vendor)}_measure(e){const t=e.layer.context,i=this._renderer._ghostLayer.context,r=\"rtl\"==this.style.direction;this._textInfo=[];const n=this.style.oversizedBehavior,s=this.style.maxWidth,a=L.isNumber(s)&&\"truncate\"==n,o=L.isNumber(s)&&(\"wrap\"==n||\"wrap-no-break\"==n);t.save(),i.save(),this._prerender(e,!0,this._ignoreFontWeight());const l=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \",c=this.text.toString().replace(/\\r/g,\"\").split(/\\n/);let d,p=!0,f=0,g=0,m=0;h.each(c,((e,r)=>{let n;for(n=\"\"==e?[{type:\"value\",text:\"\"}]:C.V.chunk(e,!1,this.style.ignoreFormatting);n.length>0;){let e={offsetY:m,ascent:0,width:0,height:0,left:0,right:0,textChunks:[]};const r=this._measureText(l,t),c=r.actualBoundingBoxAscent+r.actualBoundingBoxDescent;let b;e.height=c,e.ascent=r.actualBoundingBoxAscent;let _,v,y,w=this.style.textDecoration,x=!1,O=!0,P=[];h.eachContinue(n,((r,h)=>{if(\"format\"==r.type)if(\"[/]\"==r.text)p||(t.restore(),i.restore(),p=!0),_=void 0,d=void 0,v=void 0,w=this.style.textDecoration,y=void 0,b=r.text;else{p||(t.restore(),i.restore());let n=C.V.getTextStyle(r.text);const s=this._getFontStyle(n);t.save(),i.save(),t.font=s,d=s,b=r.text,n.textDecoration&&(w=n.textDecoration),n.fill&&(_=n.fill),n.width&&(v=L.toNumber(n.width)),n.verticalAlign&&(y=n.verticalAlign),p=!1;const a=this._measureText(l,t),o=a.actualBoundingBoxAscent+a.actualBoundingBoxDescent;o>e.height&&(e.height=o),a.actualBoundingBoxAscent>e.ascent&&(e.ascent=a.actualBoundingBoxAscent)}else if(\"value\"==r.type&&!x){const i=this._measureText(r.text,t);let l=i.actualBoundingBoxLeft+i.actualBoundingBoxRight;if(a){let i=O||this.style.breakWords||!1;const n=this.style.ellipsis||\"\",a=this._measureText(n,t),o=a.actualBoundingBoxLeft+a.actualBoundingBoxRight;if(e.width+l>s){const a=s-e.width-o;r.text=this._truncateText(t,r.text,a,i),r.text+=n,x=!0}}else if(o&&e.width+l>s){const i=s-e.width,a=this._truncateText(t,r.text,i,!1,O&&\"wrap-no-break\"!=this.style.oversizedBehavior);if(\"\"==a)return this.textVisible=!0,!1;P=n.slice(h+1),u.trim(a)!=u.trim(r.text)&&(P.unshift({type:\"value\",text:r.text.substr(a.length)}),b&&P.unshift({type:\"format\",text:b})),r.text=u.trim(a),n=[],x=!0}let c=1,p=1;if(d&&v&&v>l){const e=l/v;switch(this.style.textAlign){case\"right\":case\"end\":c=e;break;case\"center\":c=e,p=e;break;default:p=e}l=v}const f=i.actualBoundingBoxAscent+i.actualBoundingBoxDescent;f>e.height&&(e.height=f),i.actualBoundingBoxAscent>e.ascent&&(e.ascent=i.actualBoundingBoxAscent),e.width+=l,e.left+=i.actualBoundingBoxLeft/c,e.right+=i.actualBoundingBoxRight/p,e.textChunks.push({style:d,fill:_,text:r.text,width:l,height:f,left:i.actualBoundingBoxLeft,right:i.actualBoundingBoxRight,ascent:i.actualBoundingBoxAscent,offsetX:0,offsetY:0,textDecoration:w,verticalAlign:y}),O=!1}return!0})),this.style.lineHeight instanceof N.gG?(e.height*=this.style.lineHeight.value,e.ascent*=this.style.lineHeight.value):(e.height*=this.style.lineHeight||1.2,e.ascent*=this.style.lineHeight||1.2),f<e.left&&(f=e.left),g<e.right&&(g=e.right),this._textInfo.push(e),m+=e.height,n=P||[]}})),p||(t.restore(),i.restore()),h.each(this._textInfo,((e,t)=>{let i=0;h.each(e.textChunks,(t=>{if(t.offsetX=i+t.left-e.left,t.offsetY+=e.height-e.height*(this.style.baselineRatio||.19),i+=t.width,t.verticalAlign)switch(t.verticalAlign){case\"super\":t.offsetY-=e.height/2-t.height/2;break;case\"sub\":t.offsetY+=t.height/2}}))}));const b={left:r?-g:-f,top:0,right:r?f:g,bottom:m};if(\"none\"!==n){const e=this._fitRatio(b);if(e<1)if(\"fit\"==n)L.isNumber(this.style.minScale)&&e<this.style.minScale?(this.textVisible=!1,b.left=0,b.top=0,b.right=0,b.bottom=0):(this._originalScale&&1!=this._originalScale||(this._originalScale=this.scale),this.scale=e,this.textVisible=!0);else if(\"hide\"==n)this.textVisible=!1,b.left=0,b.top=0,b.right=0,b.bottom=0;else{switch(this.style.textAlign){case\"right\":case\"end\":b.left=-s,b.right=0;break;case\"center\":b.left=-s/2,b.right=s/2;break;default:b.left=0,b.right=s}this.scale=this._originalScale||1,this._originalScale=void 0,this.textVisible=!0}else this.scale=this._originalScale||1,this._originalScale=void 0,this.textVisible=!0}return t.restore(),i.restore(),b}_fitRatio(e){const t=this.style.maxWidth,i=this.style.maxHeight;if(!L.isNumber(t)&&!L.isNumber(i))return 1;const r=e.right-e.left,n=e.bottom-e.top;return Math.min(t/r||1,i/n||1)}_truncateText(e,t,i,r=!1,n=!0){let s;do{if(r)t=t.slice(0,-1);else{let e=t.replace(/[^,;:!?\\\\\\/\\s\u200b]+[,;:!?\\\\\\/\\s\u200b]*$/g,\"\");if(\"\"!=e&&e!==t||!n){if(\"\"==e)return t;t=e}else r=!0}const i=this._measureText(t,e);s=i.actualBoundingBoxLeft+i.actualBoundingBoxRight}while(s>i&&\"\"!=t);return t}_measureText(e,t){let i=t.measureText(e),r={};if(null==i.actualBoundingBoxAscent){const t=document.createElement(\"div\");t.innerText=e,t.style.visibility=\"hidden\",t.style.position=\"absolute\",t.style.top=\"-1000000px;\",t.style.fontFamily=this.style.fontFamily||\"\",t.style.fontSize=this.style.fontSize+\"\",document.body.appendChild(t);const n=t.getBoundingClientRect();document.body.removeChild(t);const s=n.height,a=i.width;r={actualBoundingBoxAscent:s,actualBoundingBoxDescent:0,actualBoundingBoxLeft:0,actualBoundingBoxRight:a,fontBoundingBoxAscent:s,fontBoundingBoxDescent:0,width:a}}else r={actualBoundingBoxAscent:i.actualBoundingBoxAscent,actualBoundingBoxDescent:i.actualBoundingBoxDescent,actualBoundingBoxLeft:i.actualBoundingBoxLeft,actualBoundingBoxRight:i.actualBoundingBoxRight,fontBoundingBoxAscent:i.actualBoundingBoxAscent,fontBoundingBoxDescent:i.actualBoundingBoxDescent,width:i.width};const n=i.width;switch(this.style.textAlign){case\"right\":case\"end\":r.actualBoundingBoxLeft=n,r.actualBoundingBoxRight=0;break;case\"center\":r.actualBoundingBoxLeft=n/2,r.actualBoundingBoxRight=n/2;break;default:r.actualBoundingBoxLeft=0,r.actualBoundingBoxRight=n}return r}}class xe{constructor(){Object.defineProperty(this,\"fill\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fillOpacity\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"textAlign\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fontFamily\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fontSize\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fontWeight\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fontStyle\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fontVariant\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"textDecoration\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowColor\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowBlur\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowOffsetX\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowOffsetY\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowOpacity\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"lineHeight\",{enumerable:!0,configurable:!0,writable:!0,value:(0,N.aQ)(120)}),Object.defineProperty(this,\"baselineRatio\",{enumerable:!0,configurable:!0,writable:!0,value:.19}),Object.defineProperty(this,\"direction\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"textBaseline\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"oversizedBehavior\",{enumerable:!0,configurable:!0,writable:!0,value:\"none\"}),Object.defineProperty(this,\"breakWords\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"ellipsis\",{enumerable:!0,configurable:!0,writable:!0,value:\"\u2026\"}),Object.defineProperty(this,\"maxWidth\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"maxHeight\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"minScale\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"ignoreFormatting\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}}class Oe extends we{constructor(){super(...arguments),Object.defineProperty(this,\"textType\",{enumerable:!0,configurable:!0,writable:!0,value:\"circular\"}),Object.defineProperty(this,\"radius\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"startAngle\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"inside\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"orientation\",{enumerable:!0,configurable:!0,writable:!0,value:\"auto\"}),Object.defineProperty(this,\"kerning\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_textReversed\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_render(e){\"circular\"===this.textType?this._renderCircular(e):super._render(e)}_renderCircular(e){if(this.textVisible){this._prerender(e);const t=this._isInteractive(e),i=e.layer.context,r=e.layer.dirty,n=this._renderer._ghostLayer.context;i.save(),t&&n.save(),this._textInfo||this._measure(e);let s=this.radius||0,a=this.startAngle||0,o=0,l=this.orientation,u=\"auto\"==l?\"auto\":\"inward\"==l;const c=this.inside,d=this.style.textAlign||\"left\",p=this.kerning||0;let f=\"left\"==d?1:-1;const g=!this._textReversed;if(\"auto\"==u){let e=0,t=0;h.each(this._textInfo,((t,i)=>{const r=a+t.width/(s-t.height)/2*-f;r>e&&(e=r)})),t=\"left\"==d?(e+o/2)*j.DEGREES:\"right\"==d?(e-o/2)*j.DEGREES:a*j.DEGREES,t=j.normalizeAngle(t),u=t>=270||t<=90}1==u&&g&&(this._textInfo.reverse(),this._textReversed=!0),h.each(this._textInfo,((e,l)=>{const m=e.height;c||(s+=m),(-1==f&&u||1==f&&!u)&&g&&e.textChunks.reverse();let b=a;o=0,\"center\"==d&&(b+=e.width/(s-m)/2*-f,o=b-a),b+=Math.PI*(u?0:1),i.save(),t&&n.save(),i.rotate(b),t&&n.rotate(b);let _=0;h.each(e.textChunks,((e,a)=>{const o=e.text,l=e.width;_=l/2/(s-m)*f,i.rotate(_),t&&n.rotate(_),e.style&&(i.save(),n.save(),i.font=e.style,t&&(n.font=e.style)),e.fill&&(i.save(),i.fillStyle=e.fill.toCSS()),i.textBaseline=\"middle\",i.textAlign=\"center\",t&&(n.textBaseline=\"middle\",n.textAlign=\"center\"),r&&i.fillText(o,0,(u?1:-1)*(0-s+m/2)),t&&n.fillText(o,0,(u?1:-1)*(0-s+m/2)),e.fill&&i.restore(),e.style&&(i.restore(),n.restore()),_=(l/2+p)/(s-m)*f,i.rotate(_),t&&n.rotate(_)})),i.restore(),t&&n.restore(),c&&(s-=m)})),i.restore(),t&&n.restore()}}_measure(e){return\"circular\"===this.textType?this._measureCircular(e):super._measure(e)}_measureCircular(e){const t=e.layer.context,i=this._renderer._ghostLayer.context,r=\"rtl\"==this.style.direction,n=this.style.oversizedBehavior,s=this.style.maxWidth,a=L.isNumber(s)&&\"truncate\"==n,o=this.style.ellipsis||\"\";let l;this.textVisible=!0,this._textInfo=[],this._textReversed=!1,t.save(),i.save(),this._prerender(e,!0);const u=this.text.toString().replace(/\\r/g,\"\").split(/\\n/);let c=!0,d=0,p=0;return h.each(u,((e,n)=>{let u,f,g,m=C.V.chunk(e,!1,this.style.ignoreFormatting),b={offsetY:p,ascent:0,width:0,height:0,left:0,right:0,textChunks:[]};h.each(m,((e,n)=>{if(\"format\"==e.type){if(\"[/]\"==e.text)c||(t.restore(),i.restore(),c=!0),f=void 0,u=void 0,g=void 0;else{let r=C.V.getTextStyle(e.text);const n=this._getFontStyle(r);t.save(),i.save(),t.font=n,u=n,r.fill&&(f=r.fill),r.width&&(g=L.toNumber(r.width)),c=!1}a&&(l=this._measureText(o,t))}else if(\"value\"==e.type){const i=e.text.match(/./gu)||[];r&&i.reverse();for(let e=0;e<i.length;e++){const n=i[e],h=this._measureText(n,t);let c=h.width;u&&g&&g>c&&(c=g);const p=h.actualBoundingBoxAscent+h.actualBoundingBoxDescent;if(p>b.height&&(b.height=p),h.actualBoundingBoxAscent>b.ascent&&(b.ascent=h.actualBoundingBoxAscent),d+=c,a){l||(l=this._measureText(o,t));const e=l.actualBoundingBoxLeft+l.actualBoundingBoxRight;if(d+e>s){1==b.textChunks.length?this.textVisible=!1:(b.width+=e,b.left+=l.actualBoundingBoxLeft,b.right+=l.actualBoundingBoxRight,b.textChunks.push({style:u,fill:f,text:o,width:e,height:p+l.actualBoundingBoxDescent,left:l.actualBoundingBoxLeft,right:l.actualBoundingBoxRight,ascent:l.actualBoundingBoxAscent,offsetX:0,offsetY:p,textDecoration:void 0}));break}}if(b.width+=c,b.left+=h.actualBoundingBoxLeft,b.right+=h.actualBoundingBoxRight,b.textChunks.push({style:u,fill:f,text:n,width:c,height:p+h.actualBoundingBoxDescent,left:h.actualBoundingBoxLeft,right:h.actualBoundingBoxRight,ascent:h.actualBoundingBoxAscent,offsetX:0,offsetY:p,textDecoration:void 0}),r)break}}})),this.style.lineHeight instanceof N.gG?b.height*=this.style.lineHeight.value:b.height*=this.style.lineHeight||1.2,this._textInfo.push(b),p+=b.height})),c||(t.restore(),i.restore()),\"hide\"==n&&d>s&&(this.textVisible=!1),h.each(this._textInfo,(e=>{h.each(e.textChunks,(t=>{t.offsetY+=Math.round((e.height-t.height+(e.ascent-t.ascent))/2)}))})),t.restore(),i.restore(),{left:0,top:0,right:0,bottom:0}}}class Pe extends q{constructor(e,t){super(e),Object.defineProperty(this,\"width\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"height\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"image\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"tainted\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowColor\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowBlur\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowOffsetX\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowOffsetY\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"shadowOpacity\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_imageMask\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.image=t}_dispose(){super._dispose(),this._imageMask&&$(this._imageMask)}getLocalBounds(){if(!this._localBounds){let e=0,t=0;this.width&&(e=this.width),this.height&&(t=this.height),this._localBounds={left:0,top:0,right:e,bottom:t},this._addBounds(this._localBounds)}return this._localBounds}_render(e){if(super._render(e),this.image){if(void 0===this.tainted&&(this.tainted=X(this.image),e.layer.tainted=!0),this.tainted&&this._renderer._omitTainted)return;if(e.layer.dirty){this.shadowColor&&(e.layer.context.shadowColor=this.shadowColor.toCSS(this.shadowOpacity||1)),this.shadowBlur&&(e.layer.context.shadowBlur=this.shadowBlur),this.shadowOffsetX&&(e.layer.context.shadowOffsetX=this.shadowOffsetX),this.shadowOffsetY&&(e.layer.context.shadowOffsetY=this.shadowOffsetY);const t=this.width||this.image.naturalWidth,i=this.height||this.image.naturalHeight;e.layer.context.drawImage(this.image,0,0,t,i)}if(this.interactive&&this._isInteractive(e)){const e=this._getMask(this.image);this._renderer._ghostLayer.context.drawImage(e,0,0)}}}clear(){super.clear(),this.image=void 0,this._imageMask=void 0}_getMask(e){if(void 0===this._imageMask){const t=this.width||e.naturalWidth,i=this.height||e.naturalHeight,r=document.createElement(\"canvas\");r.width=t,r.height=i;const n=r.getContext(\"2d\");n.imageSmoothingEnabled=!1,n.fillStyle=this._getColorId(),n.fillRect(0,0,t,i),X(e)||(n.globalCompositeOperation=\"destination-in\",n.drawImage(e,0,0,t,i)),this._imageMask=r}return this._imageMask}}class De{constructor(e,t,i,r){Object.defineProperty(this,\"event\",{enumerable:!0,configurable:!0,writable:!0,value:e}),Object.defineProperty(this,\"originalPoint\",{enumerable:!0,configurable:!0,writable:!0,value:t}),Object.defineProperty(this,\"point\",{enumerable:!0,configurable:!0,writable:!0,value:i}),Object.defineProperty(this,\"bbox\",{enumerable:!0,configurable:!0,writable:!0,value:r}),Object.defineProperty(this,\"id\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"simulated\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"native\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),u.supports(\"touchevents\")&&e instanceof Touch?this.id=e.identifier:this.id=null}}class ke extends l.rk{constructor(e){if(super(),Object.defineProperty(this,\"view\",{enumerable:!0,configurable:!0,writable:!0,value:document.createElement(\"div\")}),Object.defineProperty(this,\"_layerDom\",{enumerable:!0,configurable:!0,writable:!0,value:document.createElement(\"div\")}),Object.defineProperty(this,\"layers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_dirtyLayers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"defaultLayer\",{enumerable:!0,configurable:!0,writable:!0,value:this.getLayer(0)}),Object.defineProperty(this,\"_ghostLayer\",{enumerable:!0,configurable:!0,writable:!0,value:new Te}),Object.defineProperty(this,\"_patternCanvas\",{enumerable:!0,configurable:!0,writable:!0,value:document.createElement(\"canvas\")}),Object.defineProperty(this,\"_patternContext\",{enumerable:!0,configurable:!0,writable:!0,value:this._patternCanvas.getContext(\"2d\")}),Object.defineProperty(this,\"_realWidth\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_realHeight\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_calculatedWidth\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_calculatedHeight\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"resolution\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"interactionsEnabled\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"_listeners\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_events\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_colorId\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_colorMap\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_forceInteractive\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_omitTainted\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_hovering\",{enumerable:!0,configurable:!0,writable:!0,value:new Set}),Object.defineProperty(this,\"_dragging\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_mousedown\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_lastPointerMoveEvent\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"tapToActivate\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"tapToActivateTimeout\",{enumerable:!0,configurable:!0,writable:!0,value:3e3}),Object.defineProperty(this,\"_touchActive\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_touchActiveTimeout\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.resolution=null==e?window.devicePixelRatio:e,this.view.style.position=\"absolute\",this.view.setAttribute(\"aria-hidden\",\"true\"),this.view.appendChild(this._layerDom),this._disposers.push(new l.ku((()=>{O.each(this._events,((e,t)=>{t.disposer.dispose()})),h.each(this.layers,(e=>{$(e.view),e.exportableView&&$(e.exportableView)})),$(this._ghostLayer.view),$(this._patternCanvas)}))),this._disposers.push(u.onZoom((()=>{null==e&&(this.resolution=window.devicePixelRatio)}))),u.supports(\"touchevents\")){const e=e=>{0!==this._dragging.length&&h.eachContinue(this._dragging,(t=>!t.value.shouldCancelTouch()||(e.preventDefault(),!1))),this._touchActiveTimeout&&this._delayTouchDeactivate()};this._disposers.push(u.addEventListener(window,\"touchstart\",e,{passive:!1})),this._disposers.push(u.addEventListener(this.view,\"touchstart\",e,{passive:!1})),this._disposers.push(u.addEventListener(this.view,\"touchmove\",(()=>{this._touchActiveTimeout&&this._delayTouchDeactivate()}),{passive:!0})),this._disposers.push(u.addEventListener(window,\"click\",(e=>{this._touchActive=!1}),{passive:!0})),this._disposers.push(u.addEventListener(this.view,\"click\",(e=>{window.setTimeout((()=>{this._touchActive=!0,this._delayTouchDeactivate()}),100)}),{passive:!0}))}u.supports(\"wheelevents\")&&this._disposers.push(u.addEventListener(this.view,\"wheel\",(e=>{let t=!1;this._hovering.forEach((e=>{if(e.wheelable)return t=!0,!1})),t&&e.preventDefault()}),{passive:!1}))}_delayTouchDeactivate(){this._touchActiveTimeout&&clearTimeout(this._touchActiveTimeout),this.tapToActivateTimeout>0&&(this._touchActiveTimeout=window.setTimeout((()=>{this._touchActive=!1}),this.tapToActivateTimeout))}get debugGhostView(){return!!this._ghostLayer.view.parentNode}set debugGhostView(e){e?this._ghostLayer.view.parentNode||this.view.appendChild(this._ghostLayer.view):this._ghostLayer.view.parentNode&&this._ghostLayer.view.parentNode.removeChild(this._ghostLayer.view)}createLinearGradient(e,t,i,r){return this.defaultLayer.context.createLinearGradient(e,t,i,r)}createRadialGradient(e,t,i,r,n,s){return this.defaultLayer.context.createRadialGradient(e,t,i,r,n,s)}createPattern(e,t,i,r,n){return this._patternCanvas.width=r,this._patternCanvas.height=n,this._patternContext.clearRect(0,0,r,n),t.renderDetached(this._patternContext),e.renderDetached(this._patternContext),this._patternContext.createPattern(this._patternCanvas,i)}makeContainer(){return new Q(this)}makeGraphics(){return new ye(this)}makeText(e,t){return new we(this,e,t)}makeTextStyle(){return new xe}makeRadialText(e,t){return new Oe(this,e,t)}makePicture(e){return new Pe(this,e)}resizeLayer(e){e.resize(this._calculatedWidth,this._calculatedHeight,this._calculatedWidth,this._calculatedHeight,this.resolution)}resizeGhost(){this._ghostLayer.resize(this._calculatedWidth,this._calculatedHeight,this._calculatedWidth,this._calculatedHeight,this.resolution)}resize(e,t,i,r){this._realWidth=e,this._realHeight=t,this._calculatedWidth=i,this._calculatedHeight=r,h.each(this.layers,(e=>{e&&(e.dirty=!0,this.resizeLayer(e))})),this.resizeGhost(),this.view.style.width=i+\"px\",this.view.style.height=r+\"px\"}createDetachedLayer(e=!1){const t=document.createElement(\"canvas\"),i=t.getContext(\"2d\",{willReadFrequently:e}),r=new Me(t,i);return t.style.position=\"absolute\",t.style.top=\"0px\",t.style.left=\"0px\",r}getLayerByOrder(e){const t=this.layers,i=t.length;for(let r=0;r<i;r++){const i=t[r];if(i.order==e)return i}}getLayer(e,t=!0){let i=this.getLayerByOrder(e);if(i)return i;const r=this.createDetachedLayer(99==e);r.order=e,r.visible=t,r.view.className=\"am5-layer-\"+e,r.visible&&this.resizeLayer(r);const n=this.layers;n.push(r),n.sort(((e,t)=>e.order>t.order?1:e.order<t.order?-1:0));const s=n.length;let a;for(let e=h.indexOf(n,r)+1;e<s;e++)if(n[e].visible){a=n[e];break}return r.visible&&(void 0===a?this._layerDom.appendChild(r.view):this._layerDom.insertBefore(r.view,a.view)),r}render(e){if(this._dirtyLayers.length=0,h.each(this.layers,(e=>{e&&e.dirty&&e.visible&&(this._dirtyLayers.push(e),e.clear())})),this._ghostLayer.clear(),e.render({inactive:null,layer:this.defaultLayer}),this._ghostLayer.context.restore(),h.each(this.layers,(e=>{if(e){const t=e.context;t.beginPath(),t.moveTo(0,0),t.stroke()}})),h.each(this._dirtyLayers,(e=>{e.context.restore(),e.dirty=!1})),this._hovering.size&&this._lastPointerMoveEvent){const{events:e,target:t,native:i}=this._lastPointerMoveEvent;h.each(e,(e=>{this._dispatchGlobalMousemove(e,t,i)}))}}paintId(e){const t=function(e){const t=[0,0,0];for(let i=0;i<24;i++)t[i%3]<<=1,t[i%3]|=1&e,e>>=1;return(0|t[0])+(t[1]<<8)+(t[2]<<16)}(++this._colorId),i=E.Il.fromHex(t).toCSS();return this._colorMap[i]=e,i}_removeObject(e){void 0!==e._colorId&&delete this._colorMap[e._colorId]}_adjustBoundingBox(e){const t=this._ghostLayer.margin;return new DOMRect(-t.left,-t.top,e.width+t.left+t.right,e.height+t.top+t.bottom)}getEvent(e,t=!0){const i=this.view.getBoundingClientRect(),r=e.clientX||0,n=e.clientY||0,s=this._calculatedWidth/this._realWidth,a=this._calculatedHeight/this._realHeight,o={x:r-i.left,y:n-i.top},l={x:(r-(t?i.left:0))*s,y:(n-(t?i.top:0))*a};return new De(e,o,l,this._adjustBoundingBox(i))}_getHitTarget(e,t,i){if(0===t.width||0===t.height||e.x<t.left||e.x>t.right||e.y<t.top||e.y>t.bottom)return;if(!i||!this._layerDom.contains(i))return;const r=this._ghostLayer.getImageData(e,t);if(0===r.data[0]&&0===r.data[1]&&0===r.data[2])return!1;const n=E.Il.fromRGB(r.data[0],r.data[1],r.data[2]).toCSS();return this._colorMap[n]}getObjectAtPoint(e){const t=this._adjustBoundingBox(this.view.getBoundingClientRect());return this._getHitTarget(e,t,this._layerDom)||void 0}_withEvents(e,t){const i=this._events[e];if(void 0!==i){i.dispatching=!0;try{t(i)}finally{i.dispatching=!1,i.cleanup&&(i.cleanup=!1,h.keepIf(i.callbacks,(e=>!e.disposed)),0===i.callbacks.length&&(i.disposer.dispose(),delete this._events[e]))}}}_dispatchEventAll(e,t){this.interactionsEnabled&&this._withEvents(e,(e=>{h.each(e.callbacks,(e=>{e.disposed||e.callback.call(e.context,t)}))}))}_dispatchEvent(e,t,i){if(!this.interactionsEnabled)return!1;let r=!1;return this._withEvents(e,(e=>{h.each(e.callbacks,(e=>{e.disposed||e.object!==t||(e.callback.call(e.context,i),r=!0)}))})),r}_dispatchMousedown(e,t){const i=e.button;if(0!=i&&2!=i&&1!=i&&void 0!==i)return;const r=this.getEvent(e),n=this._getHitTarget(r.originalPoint,r.bbox,t);if(n){const e=r.id;let t=!1;Y(n,(i=>{const n={id:e,value:i};return this._mousedown.push(n),!t&&this._dispatchEvent(\"pointerdown\",i,r)&&(t=!0,this._dragging.some((t=>t.value===i&&t.id===e))||this._dragging.push(n)),!0}))}}_dispatchGlobalMousemove(e,t,i){const r=this.getEvent(e),n=this._getHitTarget(r.originalPoint,r.bbox,t);r.native=i,n?(this._hovering.forEach((e=>{e.contains(n)||(this._hovering.delete(e),e.cursorOverStyle&&u.setStyle(document.body,\"cursor\",e._replacedCursorStyle),this._dispatchEvent(\"pointerout\",e,r))})),r.native&&Y(n,(e=>(this._hovering.has(e)||(this._hovering.add(e),e.cursorOverStyle&&(e._replacedCursorStyle=u.getStyle(document.body,\"cursor\"),u.setStyle(document.body,\"cursor\",e.cursorOverStyle)),this._dispatchEvent(\"pointerover\",e,r)),!0)))):(this._hovering.forEach((e=>{e.cursorOverStyle&&u.setStyle(document.body,\"cursor\",e._replacedCursorStyle),this._dispatchEvent(\"pointerout\",e,r)})),this._hovering.clear()),this._dispatchEventAll(\"globalpointermove\",r)}removeHovering(e){this._hovering.delete(e),e.cursorOverStyle&&u.setStyle(document.body,\"cursor\",e._replacedCursorStyle)}_dispatchGlobalMouseup(e,t){const i=this.getEvent(e);i.native=t,this._dispatchEventAll(\"globalpointerup\",i)}_dispatchDragMove(e){if(0!==this._dragging.length){const t=this.getEvent(e),i=t.id;this._dragging.forEach((e=>{e.id===i&&this._dispatchEvent(\"pointermove\",e.value,t)}))}}_dispatchDragEnd(e,t){const i=e.button;let r;if(0==i||void 0===i)r=\"click\";else if(2==i)r=\"rightclick\";else{if(1!=i)return;r=\"middleclick\"}const n=this.getEvent(e),s=n.id;if(0!==this._mousedown.length){const e=this._getHitTarget(n.originalPoint,n.bbox,t);e&&this._mousedown.forEach((t=>{t.id===s&&t.value.contains(e)&&this._dispatchEvent(r,t.value,n)})),this._mousedown.length=0}0!==this._dragging.length&&(this._dragging.forEach((e=>{e.id===s&&this._dispatchEvent(\"pointerup\",e.value,n)})),this._dragging.length=0)}_dispatchDoubleClick(e,t){const i=this.getEvent(e),r=this._getHitTarget(i.originalPoint,i.bbox,t);r&&Y(r,(e=>!this._dispatchEvent(\"dblclick\",e,i)))}_dispatchWheel(e,t){const i=this.getEvent(e),r=this._getHitTarget(i.originalPoint,i.bbox,t);r&&Y(r,(e=>!this._dispatchEvent(\"wheel\",e,i)))}_makeSharedEvent(e,t){if(void 0===this._listeners[e]){const i=t();this._listeners[e]=new l.DM((()=>{delete this._listeners[e],i.dispose()}))}return this._listeners[e].increment()}_onPointerEvent(e,t){let i=!1,r=null;function n(){r=null,i=!1}return new l.FV([new l.ku((()=>{null!==r&&clearTimeout(r),n()})),u.addEventListener(this.view,u.getRendererEvent(e),(e=>{i=!0,null!==r&&clearTimeout(r),r=window.setTimeout(n,0)})),W(window,e,((e,n)=>{null!==r&&(clearTimeout(r),r=null),t(e,n,i),i=!1}))])}_initEvent(e){switch(e){case\"globalpointermove\":case\"pointerover\":case\"pointerout\":return this._makeSharedEvent(\"pointermove\",(()=>{const e=(e,t,i)=>{this._lastPointerMoveEvent={events:e,target:t,native:i},h.each(e,(e=>{this._dispatchGlobalMousemove(e,t,i)}))};return new l.FV([this._onPointerEvent(\"pointerdown\",e),this._onPointerEvent(\"pointermove\",e)])}));case\"globalpointerup\":return this._makeSharedEvent(\"pointerup\",(()=>{const e=this._onPointerEvent(\"pointerup\",((e,t,i)=>{h.each(e,(e=>{this._dispatchGlobalMouseup(e,i)})),this._lastPointerMoveEvent={events:e,target:t,native:i}})),t=this._onPointerEvent(\"pointercancel\",((e,t,i)=>{h.each(e,(e=>{this._dispatchGlobalMouseup(e,i)})),this._lastPointerMoveEvent={events:e,target:t,native:i}}));return new l.ku((()=>{e.dispose(),t.dispose()}))}));case\"click\":case\"rightclick\":case\"middleclick\":case\"pointerdown\":case\"pointermove\":case\"pointerup\":return this._makeSharedEvent(\"pointerdown\",(()=>{const e=this._onPointerEvent(\"pointerdown\",((e,t)=>{h.each(e,(e=>{this._dispatchMousedown(e,t)}))})),t=this._onPointerEvent(\"pointermove\",(e=>{h.each(e,(e=>{this._dispatchDragMove(e)}))})),i=this._onPointerEvent(\"pointerup\",((e,t)=>{h.each(e,(e=>{this._dispatchDragEnd(e,t)}))})),r=this._onPointerEvent(\"pointercancel\",((e,t)=>{h.each(e,(e=>{this._dispatchDragEnd(e,t)}))}));return new l.ku((()=>{e.dispose(),t.dispose(),i.dispose(),r.dispose()}))}));case\"dblclick\":return this._makeSharedEvent(\"dblclick\",(()=>this._onPointerEvent(\"dblclick\",((e,t)=>{h.each(e,(e=>{this._dispatchDoubleClick(e,t)}))}))));case\"wheel\":return this._makeSharedEvent(\"wheel\",(()=>u.addEventListener(window,u.getRendererEvent(\"wheel\"),(e=>{this._dispatchWheel(e,u.getEventTarget(e))}),{passive:!1})))}}_addEvent(e,t,i,r){let n=this._events[t];void 0===n&&(n=this._events[t]={disposer:this._initEvent(t),callbacks:[],dispatching:!1,cleanup:!1});const s={object:e,context:r,callback:i,disposed:!1};return n.callbacks.push(s),new l.ku((()=>{s.disposed=!0,n.dispatching?n.cleanup=!0:(h.removeFirst(n.callbacks,s),0===n.callbacks.length&&(n.disposer.dispose(),delete this._events[t]))}))}getCanvas(e,t){this.render(e),t||(t={});let i=this.resolution,r=Math.floor(this._calculatedWidth*this.resolution),n=Math.floor(this._calculatedHeight*this.resolution);if(t.minWidth&&t.minWidth>r){let e=t.minWidth/r;e>i&&(i=e*this.resolution)}if(t.minHeight&&t.minHeight>n){let e=t.minHeight/n;e>i&&(i=e*this.resolution)}if(t.maxWidth&&t.maxWidth<r){let e=t.maxWidth/r;e<i&&(i=e*this.resolution)}if(t.maxHeight&&t.maxHeight>n){let e=t.maxHeight/n;e<i&&(i=e*this.resolution)}t.maintainPixelRatio&&(i/=this.resolution);const s=[];let a=!1;const o=document.createElement(\"canvas\");i!=this.resolution&&(a=!0,r=r*i/this.resolution,n=n*i/this.resolution),o.width=r,o.height=n,o.style.position=\"fixed\",o.style.top=\"-10000px\",this.view.appendChild(o),s.push(o);const l=o.getContext(\"2d\");let u=0,c=0,d=!1;return h.each(this.layers,(e=>{if(e&&e.visible&&(e.tainted||a)){d=!0,e.exportableView=e.view,e.exportableContext=e.context,e.view=document.createElement(\"canvas\"),e.view.style.position=\"fixed\",e.view.style.top=\"-10000px\",this.view.appendChild(e.view),s.push(e.view);let t=0,a=0;e.margin&&(t+=e.margin.left||0+e.margin.right||0,a+=e.margin.top||0+e.margin.bottom||0),e.view.width=r+t,e.view.height=n+a,e.context=e.view.getContext(\"2d\"),e.dirty=!0,e.scale=i}})),d&&(this._omitTainted=!0,this.render(e),this._omitTainted=!1),h.each(this.layers,(e=>{if(e&&e.visible){let t=0,i=0;e.margin&&(t=-(e.margin.left||0)*this.resolution,i=-(e.margin.top||0)*this.resolution),l.drawImage(e.view,t,i),e.exportableView&&(e.view=e.exportableView,e.exportableView=void 0),e.exportableContext&&(e.context=e.exportableContext,e.exportableContext=void 0),u<e.view.clientWidth&&(u=e.view.clientWidth),c<e.view.clientHeight&&(c=e.view.clientHeight),e.scale=void 0}})),o.style.width=u+\"px\",o.style.height=c+\"px\",h.each(s,(e=>{e.style.position=\"\",e.style.top=\"\",this.view.removeChild(e)})),o}}class Te{constructor(){Object.defineProperty(this,\"view\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"context\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"margin\",{enumerable:!0,configurable:!0,writable:!0,value:{left:0,right:0,top:0,bottom:0}}),Object.defineProperty(this,\"_width\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_height\",{enumerable:!0,configurable:!0,writable:!0,value:0}),this.view=document.createElement(\"canvas\"),this.context=this.view.getContext(\"2d\",{alpha:!1,willReadFrequently:!0}),this.context.imageSmoothingEnabled=!1,this.view.style.position=\"absolute\",this.view.style.top=\"0px\",this.view.style.left=\"0px\"}resize(e,t,i,r,n){e+=this.margin.left+this.margin.right,t+=this.margin.top+this.margin.bottom,i+=this.margin.left+this.margin.right,r+=this.margin.top+this.margin.bottom,this.view.style.left=-this.margin.left+\"px\",this.view.style.top=-this.margin.top+\"px\",this._width=Math.floor(e*n),this._height=Math.floor(t*n),this.view.width=this._width,this.view.style.width=i+\"px\",this.view.height=this._height,this.view.style.height=r+\"px\"}getImageData(e,t){return this.context.getImageData(Math.round((e.x-t.left)/t.width*this._width),Math.round((e.y-t.top)/t.height*this._height),1,1)}setMargin(e){this.margin.left=0,this.margin.right=0,this.margin.top=0,this.margin.bottom=0,h.each(e,(e=>{e.margin&&(this.margin.left=Math.max(this.margin.left,e.margin.left),this.margin.right=Math.max(this.margin.right,e.margin.right),this.margin.top=Math.max(this.margin.top,e.margin.top),this.margin.bottom=Math.max(this.margin.bottom,e.margin.bottom))}))}clear(){this.context.save(),this.context.fillStyle=\"#000\",this.context.fillRect(0,0,this._width,this._height)}}class Me{constructor(e,t){Object.defineProperty(this,\"view\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"context\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"tainted\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"margin\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"order\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"visible\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"width\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"height\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"scale\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"dirty\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"exportableView\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"exportableContext\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_width\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_height\",{enumerable:!0,configurable:!0,writable:!0,value:0}),this.view=e,this.context=t}resize(e,t,i,r,n){null!=this.width&&(e=this.width,i=this.width),null!=this.height&&(t=this.height,r=this.height),this.margin?(e+=this.margin.left+this.margin.right,t+=this.margin.top+this.margin.bottom,i+=this.margin.left+this.margin.right,r+=this.margin.top+this.margin.bottom,this.view.style.left=-this.margin.left+\"px\",this.view.style.top=-this.margin.top+\"px\"):(this.view.style.left=\"0px\",this.view.style.top=\"0px\"),this._width=Math.floor(e*n),this._height=Math.floor(t*n),this.view.width=this._width,this.view.style.width=i+\"px\",this.view.height=this._height,this.view.style.height=r+\"px\"}clear(){this.context.save(),this.context.clearRect(0,0,this._width,this._height)}}var Ee=i(2132),Se=i(3145),Ne=i(3540);function Ce(e,t){null==e?requestAnimationFrame(t):setTimeout((()=>{requestAnimationFrame(t)}),1e3/e)}class Le{constructor(e,t={},i){if(Object.defineProperty(this,\"dom\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_inner\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_settings\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_isDirty\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_isDirtyParents\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_dirty\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_dirtyParents\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_dirtyBounds\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_dirtyPositions\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_ticker\",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,\"_tickers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_updateTick\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"events\",{enumerable:!0,configurable:!0,writable:!0,value:new k.p}),Object.defineProperty(this,\"animationTime\",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,\"_animations\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_renderer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_rootContainer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"container\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"tooltipContainer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltipContainerSettings\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltip\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"language\",{enumerable:!0,configurable:!0,writable:!0,value:D.new(this,{})}),Object.defineProperty(this,\"locale\",{enumerable:!0,configurable:!0,writable:!0,value:P.Z}),Object.defineProperty(this,\"utc\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"timezone\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"fps\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"numberFormatter\",{enumerable:!0,configurable:!0,writable:!0,value:v.e.new(this,{})}),Object.defineProperty(this,\"dateFormatter\",{enumerable:!0,configurable:!0,writable:!0,value:y.C.new(this,{})}),Object.defineProperty(this,\"durationFormatter\",{enumerable:!0,configurable:!0,writable:!0,value:w.$.new(this,{})}),Object.defineProperty(this,\"tabindex\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_tabindexes\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_a11yD\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_focusElementDirty\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_focusElementContainer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_focusedSprite\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_isShift\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_keyboardDragPoint\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltipElementContainer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_readerAlertElement\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_logo\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltipDiv\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"nonce\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"interfaceColors\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"verticalLayout\",{enumerable:!0,configurable:!0,writable:!0,value:a.Z.new(this,{})}),Object.defineProperty(this,\"horizontalLayout\",{enumerable:!0,configurable:!0,writable:!0,value:s.G.new(this,{})}),Object.defineProperty(this,\"gridLayout\",{enumerable:!0,configurable:!0,writable:!0,value:o.M.new(this,{})}),Object.defineProperty(this,\"_paused\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"autoResize\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"_fontHash\",{enumerable:!0,configurable:!0,writable:!0,value:\"\"}),Object.defineProperty(this,\"_isDisposed\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_disposers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_resizeSensorDisposer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltips\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_htmlElementContainer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_htmlEnabledContainers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),!i)throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");let r,n;if(this._settings=t,0==t.accessible&&(this._a11yD=!0),null==t.useSafeResolution&&(t.useSafeResolution=!0),t.useSafeResolution&&(r=u.getSafeResolution()),this._renderer=new ke(r),n=e instanceof HTMLElement?e:document.getElementById(e),h.each(Se.i_.rootElements,(e=>{if(e.dom===n)throw new Error(\"You cannot have multiple Roots on the same DOM node\")})),this.interfaceColors=g.v.new(this,{}),null===n)throw new Error(\"Could not find HTML element with id `\"+e+\"`\");this.dom=n;let l=document.createElement(\"div\");l.style.position=\"relative\",l.style.width=\"100%\",l.style.height=\"100%\",n.appendChild(l);const c=t.tooltipContainerBounds;c&&(this._tooltipContainerSettings=c),this._inner=l,this._updateComputedStyles(),Se.i_.rootElements.push(this)}static new(e,t){const i=new Le(e,t,!0);return i._init(),i}moveDOM(e){let t;if(t=e instanceof HTMLElement?e:document.getElementById(e),t){for(;this.dom.childNodes.length>0;)t.appendChild(this.dom.childNodes[0]);this.dom=t,this._initResizeSensor(),this.resize()}}_handleLogo(){if(this._logo){const e=this.dom.offsetWidth,t=this.dom.offsetHeight;e<=150||t<=60?this._logo.hide():this._logo.show()}}_showBranding(){if(!this._logo){const e=this.tooltipContainer.children.push(r.W.new(this,{interactive:!0,interactiveChildren:!1,position:\"absolute\",setStateOnChildren:!0,paddingTop:9,paddingRight:9,paddingBottom:9,paddingLeft:9,scale:.6,y:(0,N.aQ)(100),centerY:N.AQ,tooltipText:\"Created using amCharts 5\",tooltipX:N.AQ,cursorOverStyle:\"pointer\",background:b.A.new(this,{fill:(0,E.$_)(4671320),fillOpacity:0,tooltipY:5})})),t=_.u.new(this,{pointerOrientation:\"horizontal\",paddingTop:4,paddingRight:7,paddingBottom:4,paddingLeft:7});t.label.setAll({fontSize:12}),t.get(\"background\").setAll({fill:this.interfaceColors.get(\"background\"),stroke:this.interfaceColors.get(\"grid\"),strokeOpacity:.3}),e.set(\"tooltip\",t),e.events.on(\"click\",(()=>{window.open(\"https://www.amcharts.com/\",\"_blank\")})),e.states.create(\"hover\",{}),e.children.push(m.T.new(this,{stroke:(0,E.$_)(13421772),strokeWidth:3,svgPath:\"M5 25 L13 25h13.6c3.4 0 6 0 10.3-4.3s5.2-12 8.6-12c3.4 0 4.3 8.6 7.7 8.6M83.4 25H79.8c-3.4 0-6 0-10.3-4.3s-5.2-12-8.6-12-4.3 8.6-7.7 8.6\"})).states.create(\"hover\",{stroke:(0,E.$_)(3976191)}),e.children.push(m.T.new(this,{stroke:(0,E.$_)(8947848),strokeWidth:3,svgPath:\"M83.4 25h-31C37 25 39.5 4.4 28.4 4.4S18.9 24.2 4.3 25H0\"})).states.create(\"hover\",{stroke:(0,E.$_)(4671320)}),this._logo=e,this._handleLogo()}}_getRealSize(){return this.dom.getBoundingClientRect()}_getCalculatedSize(e){return this._settings.calculateSize?this._settings.calculateSize(e):{width:e.width,height:e.height}}_init(){const e=this._settings;!1!==e.accessible&&(e.focusable&&(this._inner.setAttribute(\"focusable\",\"true\"),this._inner.setAttribute(\"tabindex\",this.tabindex+\"\")),e.ariaLabel&&this._inner.setAttribute(\"aria-label\",e.ariaLabel),e.role&&this._inner.setAttribute(\"role\",e.role));const t=this._renderer,i=this._getRealSize(),n=this._getCalculatedSize(i),s=Math.floor(n.width),a=Math.floor(n.height),o=Math.floor(i.width),l=Math.floor(i.height),h=r.W.new(this,{visible:!0,width:s,height:a});this._rootContainer=h,this._rootContainer._defaultThemes.push(T.X.new(this));const c=h.children.push(r.W.new(this,{visible:!0,width:N.AQ,height:N.AQ}));this.container=c,t.resize(o,l,s,a),this._inner.appendChild(t.view),this._initResizeSensor();const d=document.createElement(\"div\");if(this._htmlElementContainer=d,d.className=\"am5-html-container\",d.style.position=\"absolute\",d.style.pointerEvents=\"none\",this._tooltipContainerSettings||(d.style.overflow=\"hidden\"),this._inner.appendChild(d),!0!==this._a11yD){const e=document.createElement(\"div\");e.className=\"am5-reader-container\",e.setAttribute(\"role\",\"alert\"),e.style.position=\"absolute\",e.style.width=\"1px\",e.style.height=\"1px\",e.style.overflow=\"hidden\",e.style.clip=\"rect(1px, 1px, 1px, 1px)\",this._readerAlertElement=e,this._inner.appendChild(this._readerAlertElement);const i=document.createElement(\"div\");i.className=\"am5-focus-container\",i.style.position=\"absolute\",i.style.pointerEvents=\"none\",i.style.top=\"0px\",i.style.left=\"0px\",i.style.overflow=\"hidden\",i.style.width=s+\"px\",i.style.height=a+\"px\",i.setAttribute(\"role\",\"graphics-document\"),u.setInteractive(i,!1),this._focusElementContainer=i,this._inner.appendChild(this._focusElementContainer);const r=document.createElement(\"div\");this._tooltipElementContainer=r,r.className=\"am5-tooltip-container\",this._inner.appendChild(r),u.supports(\"keyboardevents\")&&(this._disposers.push(u.addEventListener(window,\"keydown\",(e=>{16==e.keyCode?this._isShift=!0:9==e.keyCode&&(this._isShift=e.shiftKey)}))),this._disposers.push(u.addEventListener(window,\"keyup\",(e=>{16==e.keyCode&&(this._isShift=!1)}))),this._disposers.push(u.addEventListener(i,\"click\",(()=>{const e=this._focusedSprite;if(e){const i=t.getEvent(new MouseEvent(\"click\"));e.events.dispatch(\"click\",{type:\"click\",originalEvent:i.event,point:i.point,simulated:!0,target:e})}}))),this._disposers.push(u.addEventListener(i,\"keydown\",(e=>{const i=this._focusedSprite;if(i){27==e.keyCode&&(u.blur(),this._focusedSprite=void 0);let r=0,n=0;switch(e.keyCode){case 13:e.preventDefault();const s=t.getEvent(new MouseEvent(\"click\"));return void i.events.dispatch(\"click\",{type:\"click\",originalEvent:s.event,point:s.point,simulated:!0,target:i});case 37:r=-6;break;case 39:r=6;break;case 38:n=-6;break;case 40:n=6;break;default:return}if(0!=r||0!=n){if(e.preventDefault(),!i.isDragging()){this._keyboardDragPoint={x:0,y:0};const e=t.getEvent(new MouseEvent(\"mousedown\",{clientX:0,clientY:0}));i.events.isEnabled(\"pointerdown\")&&i.events.dispatch(\"pointerdown\",{type:\"pointerdown\",originalEvent:e.event,point:e.point,simulated:!0,target:i})}const s=this._keyboardDragPoint;s.x+=r,s.y+=n;const a=t.getEvent(new MouseEvent(\"mousemove\",{clientX:s.x,clientY:s.y}),!1);i.events.isEnabled(\"globalpointermove\")&&i.events.dispatch(\"globalpointermove\",{type:\"globalpointermove\",originalEvent:a.event,point:a.point,simulated:!0,target:i})}}}))),this._disposers.push(u.addEventListener(i,\"keyup\",(e=>{if(this._focusedSprite){const i=this._focusedSprite,r=e.keyCode;switch(r){case 37:case 39:case 38:case 40:if(i.isDragging()){const e=this._keyboardDragPoint,r=t.getEvent(new MouseEvent(\"mouseup\",{clientX:e.x,clientY:e.y}));return i.events.isEnabled(\"globalpointerup\")&&i.events.dispatch(\"globalpointerup\",{type:\"globalpointerup\",originalEvent:r.event,point:r.point,simulated:!0,target:i}),void(this._keyboardDragPoint=void 0)}if(i.get(\"focusableGroup\")){const e=i.get(\"focusableGroup\"),t=this._tabindexes.filter((t=>t.get(\"focusableGroup\")==e&&!1!==t.getPrivate(\"focusable\")));let n=t.indexOf(i);const s=t.length-1;n+=39==r||40==r?1:-1,n<0?n=s:n>s&&(n=0),u.focus(t[n].getPrivate(\"focusElement\").dom)}}}}))))}this._startTicker(),this.setThemes([]),this._addTooltip(),this._hasLicense()||this._showBranding()}_initResizeSensor(){this._resizeSensorDisposer&&this._resizeSensorDisposer.dispose(),this._resizeSensorDisposer=new f(this.dom,(()=>{this.autoResize&&this.resize()})),this._disposers.push(this._resizeSensorDisposer)}resize(){const e=this._getRealSize(),t=this._getCalculatedSize(e),i=Math.floor(t.width),r=Math.floor(t.height);if(i>0&&r>0){const t=Math.floor(e.width),n=Math.floor(e.height),s=this._htmlElementContainer;if(s.style.width=i+\"px\",s.style.height=r+\"px\",!0!==this._a11yD){const e=this._focusElementContainer;e.style.width=i+\"px\",e.style.height=r+\"px\"}this._renderer.resize(t,n,i,r);const a=this._rootContainer;a.setPrivate(\"width\",i),a.setPrivate(\"height\",r),this._render(),this._handleLogo()}}_render(){this._renderer.render(this._rootContainer._display),this._focusElementDirty&&(this._updateCurrentFocus(),this._focusElementDirty=!1)}_runTickers(e){h.each(this._tickers,(t=>{t(e)}))}_runAnimations(e){h.keepIf(this._animations,(t=>t._runAnimation(e)))}_runDirties(){let e={};for(;this._isDirtyParents;)this._isDirtyParents=!1,O.keys(this._dirtyParents).forEach((t=>{const i=this._dirtyParents[t];delete this._dirtyParents[t],i.isDisposed()||(e[i.uid]=i,i._prepareChildren())}));O.keys(e).forEach((t=>{e[t]._updateChildren()}));const t=[];O.keys(this._dirty).forEach((e=>{const i=this._dirty[e];i.isDisposed()?delete this._dirty[i.uid]:(t.push(i),i._beforeChanged())})),t.forEach((e=>{e._changed(),delete this._dirty[e.uid],e._clearDirty()})),this._isDirty=!1;const i={},r=[];O.keys(this._dirtyBounds).forEach((e=>{const t=this._dirtyBounds[e];delete this._dirtyBounds[e],t.isDisposed()||(i[t.uid]=t.depth(),r.push(t))})),this._positionHTMLElements(),r.sort(((e,t)=>Ne.qu(i[t.uid],i[e.uid]))),r.forEach((e=>{e._updateBounds()}));const n=this._dirtyPositions;O.keys(n).forEach((e=>{const t=n[e];delete n[e],t.isDisposed()||t._updatePosition()})),t.forEach((e=>{e._afterChanged()}))}_renderFrame(e){return!this._updateTick||(this.events.isEnabled(\"framestarted\")&&this.events.dispatch(\"framestarted\",{type:\"framestarted\",target:this,timestamp:e}),this._checkComputedStyles(),this._runTickers(e),this._runAnimations(e),this._runDirties(),this._render(),this._positionHTMLElements(),this.events.isEnabled(\"frameended\")&&this.events.dispatch(\"frameended\",{type:\"frameended\",target:this,timestamp:e}),0===this._tickers.length&&0===this._animations.length&&!this._isDirty)}_runTicker(e,t){this.isDisposed()||(this.animationTime=e,this._renderFrame(e)?(this._ticker=null,this.animationTime=null):this._paused||(t?this._ticker:Ce(this.fps,this._ticker)))}_runTickerNow(e=1e4){if(!this.isDisposed()){const t=performance.now()+e;for(;;){const e=performance.now();if(e>=t){this.animationTime=null;break}if(this.animationTime=e,this._renderFrame(e)){this.animationTime=null;break}}}}_startTicker(){null===this._ticker&&(this.animationTime=null,this._ticker=e=>{this._runTicker(e)},Ce(this.fps,this._ticker))}get updateTick(){return this._updateTick}set updateTick(e){this._updateTick=e,e&&this._startTicker()}_addDirtyEntity(e){void 0===this._dirty[e.uid]&&(this._isDirty=!0,this._dirty[e.uid]=e,this._startTicker())}_addDirtyParent(e){void 0===this._dirtyParents[e.uid]&&(this._isDirty=!0,this._isDirtyParents=!0,this._dirtyParents[e.uid]=e,this._startTicker())}_addDirtyBounds(e){void 0===this._dirtyBounds[e.uid]&&(this._isDirty=!0,this._dirtyBounds[e.uid]=e,this._startTicker())}_addDirtyPosition(e){void 0===this._dirtyPositions[e.uid]&&(this._isDirty=!0,this._dirtyPositions[e.uid]=e,this._startTicker())}_addAnimation(e){-1===this._animations.indexOf(e)&&(this._animations.push(e),this._startTicker())}_markDirty(){this._isDirty=!0}_markDirtyRedraw(){this.events.once(\"frameended\",(()=>{this._isDirty=!0,this._startTicker()}))}eachFrame(e){return this._tickers.push(e),this._startTicker(),new l.ku((()=>{h.removeFirst(this._tickers,e)}))}markDirtyGlobal(e){e||(e=this.container),e.walkChildren((e=>{e instanceof r.W&&this.markDirtyGlobal(e),e.markDirty(),e.markDirtyBounds()}))}width(){return Math.floor(this._getCalculatedSize(this._getRealSize()).width)}height(){return Math.floor(this._getCalculatedSize(this._getRealSize()).height)}dispose(){this._isDisposed||(this._isDisposed=!0,this._rootContainer.dispose(),this._renderer.dispose(),this.horizontalLayout.dispose(),this.verticalLayout.dispose(),this.interfaceColors.dispose(),h.each(this._disposers,(e=>{e.dispose()})),this._inner&&u.removeElement(this._inner),h.remove(Se.i_.rootElements,this))}isDisposed(){return this._isDisposed}readerAlert(e){!0!==this._a11yD&&(this._readerAlertElement.innerHTML=u.stripTags(e))}setThemes(e){this._rootContainer.set(\"themes\",e);const t=this.tooltipContainer;t&&t._applyThemes();const i=this.interfaceColors;i&&i._applyThemes()}_addTooltip(){if(!this.tooltipContainer){const e=this._tooltipContainerSettings,t=this._rootContainer.children.push(r.W.new(this,{position:\"absolute\",isMeasured:!1,width:N.AQ,height:N.AQ,layer:e?35:30,layerMargin:e||void 0}));this.tooltipContainer=t;const i=_.u.new(this,{});this.container.set(\"tooltip\",i),i.hide(0),this._tooltip=i}}_registerTabindexOrder(e){1!=this._a11yD&&(e.get(\"focusable\")?h.pushOne(this._tabindexes,e):h.remove(this._tabindexes,e),this._invalidateTabindexes())}_unregisterTabindexOrder(e){1!=this._a11yD&&(h.remove(this._tabindexes,e),this._invalidateTabindexes())}_invalidateTabindexes(){if(1==this._a11yD)return;this._tabindexes.sort(((e,t)=>{const i=e.get(\"tabindexOrder\",0),r=t.get(\"tabindexOrder\",0);return i==r?0:i>r?1:-1}));const e=[];h.each(this._tabindexes,((t,i)=>{t.getPrivate(\"focusElement\")?this._moveFocusElement(i,t):this._makeFocusElement(i,t);const r=t.get(\"focusableGroup\");r&&!1!==t.getPrivate(\"focusable\")&&(-1!==e.indexOf(r)?t.getPrivate(\"focusElement\").dom.setAttribute(\"tabindex\",\"-1\"):e.push(r))}))}_updateCurrentFocus(){1!=this._a11yD&&this._focusedSprite&&(this._decorateFocusElement(this._focusedSprite),this._positionFocusElement(this._focusedSprite))}_decorateFocusElement(e,t){if(1==this._a11yD)return;if(t||(t=e.getPrivate(\"focusElement\").dom),!t)return;const i=e.get(\"role\");i?t.setAttribute(\"role\",i):t.removeAttribute(\"role\");const r=e.get(\"ariaLabel\");if(r){const i=(0,Ee.q)(e,r);t.setAttribute(\"aria-label\",i)}else t.removeAttribute(\"aria-label\");const n=e.get(\"ariaLive\");n?t.setAttribute(\"aria-live\",n):t.removeAttribute(\"aria-live\");const s=e.get(\"ariaChecked\");null!=s?t.setAttribute(\"aria-checked\",s?\"true\":\"false\"):t.removeAttribute(\"aria-checked\"),e.get(\"ariaHidden\")?t.setAttribute(\"aria-hidden\",\"true\"):t.removeAttribute(\"aria-hidden\");const a=e.get(\"ariaOrientation\");a?t.setAttribute(\"aria-orientation\",a):t.removeAttribute(\"aria-orientation\");const o=e.get(\"ariaValueNow\");o?t.setAttribute(\"aria-valuenow\",o):t.removeAttribute(\"aria-valuenow\");const l=e.get(\"ariaValueMin\");l?t.setAttribute(\"aria-valuemin\",l):t.removeAttribute(\"aria-valuemin\");const h=e.get(\"ariaValueMax\");h?t.setAttribute(\"aria-valuemax\",h):t.removeAttribute(\"aria-valuemax\");const u=e.get(\"ariaValueText\");u?t.setAttribute(\"aria-valuetext\",u):t.removeAttribute(\"aria-valuetext\");const c=e.get(\"ariaControls\");c?t.setAttribute(\"aria-controls\",c):t.removeAttribute(\"aria-controls\"),e.get(\"visible\")&&0!==e.get(\"opacity\")&&\"tooltip\"!=e.get(\"role\")&&!e.isHidden()&&!1!==e.getPrivate(\"focusable\")?(\"-1\"!=t.getAttribute(\"tabindex\")&&t.setAttribute(\"tabindex\",\"\"+this.tabindex),t.removeAttribute(\"aria-hidden\")):(t.removeAttribute(\"tabindex\"),t.setAttribute(\"aria-hidden\",\"true\"))}_makeFocusElement(e,t){if(t.getPrivate(\"focusElement\")||1==this._a11yD)return;const i=document.createElement(\"div\");\"tooltip\"!=t.get(\"role\")&&(i.tabIndex=this.tabindex),i.style.position=\"absolute\",u.setInteractive(i,!1);const r=[];t.setPrivate(\"focusElement\",{dom:i,disposers:r}),this._decorateFocusElement(t),r.push(u.addEventListener(i,\"focus\",(t=>{this._handleFocus(t,e)}))),r.push(u.addEventListener(i,\"blur\",(t=>{this._handleBlur(t,e)}))),this._moveFocusElement(e,t)}_removeFocusElement(e){if(1==this._a11yD)return;h.remove(this._tabindexes,e);const t=e.getPrivate(\"focusElement\");t&&(this._focusElementContainer.removeChild(t.dom),h.each(t.disposers,(e=>{e.dispose()})))}_hideFocusElement(e){1!=this._a11yD&&(e.getPrivate(\"focusElement\").dom.style.display=\"none\")}_moveFocusElement(e,t){if(1==this._a11yD)return;const i=this._focusElementContainer,r=t.getPrivate(\"focusElement\").dom;if(r===this._focusElementContainer.children[e])return;const n=this._focusElementContainer.children[e+1];n?i.insertBefore(r,n):i.append(r)}_positionFocusElement(e){if(1==this._a11yD||null==e)return;const t=e.globalBounds();let i=t.right==t.left?e.width():t.right-t.left,r=t.top==t.bottom?e.height():t.bottom-t.top;const n=void 0!==this._settings.focusPadding?this._settings.focusPadding:2;let s=t.left-n,a=t.top-n;i<0&&(s+=i,i=Math.abs(i)),r<0&&(a+=r,r=Math.abs(r));const o=e.getPrivate(\"focusElement\").dom;o.style.top=a+\"px\",o.style.left=s+\"px\",o.style.width=i+2*n+\"px\",o.style.height=r+2*n+\"px\"}_handleFocus(e,t){if(1==this._a11yD)return;const i=this._tabindexes[t];i.isVisibleDeep()?(this._positionFocusElement(i),this._focusedSprite=i,i.events.isEnabled(\"focus\")&&i.events.dispatch(\"focus\",{type:\"focus\",originalEvent:e,target:i})):this._focusNext(e.target,this._isShift?-1:1)}_focusNext(e,t){if(1==this._a11yD)return;const i=Array.from(document.querySelectorAll([\"a[href]\",\"area[href]\",\"button:not([disabled])\",\"details\",\"input:not([disabled])\",\"iframe:not([disabled])\",\"select:not([disabled])\",\"textarea:not([disabled])\",'[contentEditable=\"\"]','[contentEditable=\"true\"]','[contentEditable=\"TRUE\"]','[tabindex]:not([tabindex^=\"-\"])'].join(\",\")));let r=i.indexOf(e)+t;r<0?r=i.length-1:r>=i.length&&(r=0),i[r].focus()}_handleBlur(e,t){if(1==this._a11yD)return;const i=this._focusedSprite;i&&!i.isDisposed()&&i.events.isEnabled(\"blur\")&&i.events.dispatch(\"blur\",{type:\"blur\",originalEvent:e,target:i}),this._focusedSprite=void 0}updateTooltip(e){if(1==this._a11yD)return;const t=u.stripTags(e._getText());let i=e.getPrivate(\"tooltipElement\");\"tooltip\"==e.get(\"role\")&&\"\"!=t?(i||(i=this._makeTooltipElement(e)),i.innerHTML!=t&&(i.innerHTML=t)):i&&(i.remove(),e.removePrivate(\"tooltipElement\"))}_makeTooltipElement(e){const t=this._tooltipElementContainer,i=document.createElement(\"div\");return i.style.position=\"absolute\",i.style.width=\"1px\",i.style.height=\"1px\",i.style.overflow=\"hidden\",i.style.clip=\"rect(1px, 1px, 1px, 1px)\",u.setInteractive(i,!1),this._decorateFocusElement(e,i),t.append(i),e.setPrivate(\"tooltipElement\",i),i}_removeTooltipElement(e){if(1==this._a11yD)return;const t=e.getPrivate(\"tooltipElement\");if(t){const e=t.parentElement;e&&e.removeChild(t)}}_invalidateAccessibility(e){if(1==this._a11yD)return;this._focusElementDirty=!0;const t=e.getPrivate(\"focusElement\");e.get(\"focusable\")?t&&(this._decorateFocusElement(e),this._positionFocusElement(e)):t&&this._removeFocusElement(e)}focused(e){return this._focusedSprite===e}documentPointToRoot(e){const t=this._getRealSize(),i=this._getCalculatedSize(t),r=i.width/t.width,n=i.height/t.height;return{x:(e.x-t.left)*r,y:(e.y-t.top)*n}}rootPointToDocument(e){const t=this._getRealSize(),i=this._getCalculatedSize(t),r=i.width/t.width,n=i.height/t.height;return{x:e.x/r+t.left,y:e.y/n+t.top}}addDisposer(e){return this._disposers.push(e),e}_updateComputedStyles(){const e=window.getComputedStyle(this.dom);let t=\"\";O.each(e,((e,i)=>{L.isString(e)&&e.match(/^font/)&&(t+=i)}));const i=t!=this._fontHash;return i&&(this._fontHash=t),i}_checkComputedStyles(){this._updateComputedStyles()&&this._invalidateLabelBounds(this.container)}_invalidateLabelBounds(e){e instanceof r.W?e.children.each((e=>{this._invalidateLabelBounds(e)})):e instanceof n.x&&e.markDirtyBounds()}_hasLicense(){for(let e=0;e<Se.i_.licenses.length;e++)if(Se.i_.licenses[e].match(/^AM5C.{5,}/i))return!0;return!1}_licenseApplied(){this._logo&&this._logo.set(\"forceHidden\",!0)}get debugGhostView(){return this._renderer.debugGhostView}set debugGhostView(e){this._renderer.debugGhostView=e}set tapToActivate(e){this._renderer.tapToActivate=e}get tapToActivate(){return this._renderer.tapToActivate}set tapToActivateTimeout(e){this._renderer.tapToActivateTimeout=e}get tapToActivateTimeout(){return this._renderer.tapToActivateTimeout}_makeHTMLElement(e){const t=this._htmlElementContainer,i=document.createElement(\"div\");return e.setPrivate(\"htmlElement\",i),i.style.position=\"absolute\",i.style.overflow=\"auto\",i.style.boxSizing=\"border-box\",u.setInteractive(i,e.get(\"interactive\",!1)),e.events.isEnabled(\"click\")&&(u.setInteractive(i,!0),this._disposers.push(u.addEventListener(i,\"click\",(t=>{const i=this._renderer.getEvent(t);e.events.dispatch(\"click\",{type:\"click\",originalEvent:i.event,point:i.point,simulated:!1,target:e})})))),this._positionHTMLElement(e),t.append(i),h.pushOne(this._htmlEnabledContainers,e),i}_positionHTMLElements(){h.each(this._htmlEnabledContainers,(e=>{this._positionHTMLElement(e)}))}_positionHTMLElement(e){const t=e.getPrivate(\"htmlElement\");if(t){const i=[\"paddingTop\",\"paddingRight\",\"paddingBottom\",\"paddingLeft\",\"minWidth\",\"minHeight\",\"maxWidth\",\"maxHeight\"];h.each(i,(i=>{const r=e.get(i);t.style[i]=r?r+\"px\":\"\"}));const r=e.compositeOpacity();setTimeout((()=>{t.style.opacity=r+\"\"}),10);const n=e.isVisibleDeep();n&&(t.style.display=\"block\");const s=e.globalBounds();t.style.top=s.top+\"px\",t.style.left=s.left+\"px\";const a=e.get(\"width\"),o=e.get(\"height\");let l=0,u=0;if(a&&(l=e.width()),o&&(u=e.height()),a&&o)e.removePrivate(\"minWidth\"),e.removePrivate(\"minHeight\");else{t.style.position=\"fixed\",t.style.width=\"\",t.style.height=\"\";const i=t.getBoundingClientRect();t.style.position=\"absolute\",l=i.width,u=i.height,e._adjustedLocalBounds={left:0,right:0,top:0,bottom:0},e.setPrivate(\"minWidth\",l),e.setPrivate(\"minHeight\",u)}l>0&&(t.style.minWidth=l+\"px\"),u>0&&(t.style.minHeight=u+\"px\"),n&&0!=r||(t.style.display=\"none\")}}_setHTMLContent(e,t){let i=e.getPrivate(\"htmlElement\");i||(i=this._makeHTMLElement(e)),i.innerHTML!=t&&(i.innerHTML=t)}_removeHTMLContent(e){let t=e.getPrivate(\"htmlElement\");t&&(this._htmlElementContainer.removeChild(t),e.removePrivate(\"htmlElement\")),h.remove(this._htmlEnabledContainers,e)}}},3409:function(e,t,i){\"use strict\";i.d(t,{Q:function(){return a}});var r=i(5769),n=i(3540),s=i(5071);class a{constructor(e,t){if(Object.defineProperty(this,\"_root\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_rules\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),this._root=e,!t)throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\")}static new(e){const t=new this(e,!0);return t.setupDefaultRules(),t}setupDefaultRules(){}_lookupRules(e){return this._rules[e]}ruleRaw(e,t=[]){let i=this._rules[e];i||(i=this._rules[e]=[]),t.sort(n.qu);const{index:a,found:o}=s.getSortedIndex(i,(e=>{const i=n.qu(e.tags.length,t.length);return 0===i?n.wq(e.tags,t,n.qu):i}));if(o)return i[a].template;{const e=r.YS.new({});return i.splice(a,0,{tags:t,template:e}),e}}rule(e,t=[]){return this.ruleRaw(e,t)}}},5108:function(e,t,i){\"use strict\";i.d(t,{g:function(){return n}});var r=i(6331);class n extends r.JH{constructor(){super(...arguments),Object.defineProperty(this,\"_index\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"series\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){super._afterNewApplyThemes()}_beforeChanged(){if(super._beforeChanged(),this.isDirty(\"sprite\")){const e=this.get(\"sprite\");e&&(e.setAll({position:\"absolute\",role:\"figure\"}),this._disposers.push(e))}(this.isDirty(\"locationX\")||this.isDirty(\"locationY\"))&&this.series&&this.series._positionBullet(this)}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Bullet\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([n.className])})},8054:function(e,t,i){\"use strict\";i.d(t,{z:function(){return a}});var r=i(3497),n=i(8777),s=i(7652);class a extends n.W{_afterNew(){this._settings.themeTags=s.mergeTags(this._settings.themeTags,[\"button\"]),super._afterNew(),this._settings.background||this.set(\"background\",r.c.new(this._root,{themeTags:s.mergeTags(this._settings.themeTags,[\"background\"])})),this.setPrivate(\"trustBounds\",!0)}_prepareChildren(){if(super._prepareChildren(),this.isDirty(\"icon\")){const e=this._prevSettings.icon,t=this.get(\"icon\");t!==e&&(this._disposeProperty(\"icon\"),e&&e.dispose(),t&&this.children.push(t),this._prevSettings.icon=t)}if(this.isDirty(\"label\")){const e=this._prevSettings.label,t=this.get(\"label\");t!==e&&(this._disposeProperty(\"label\"),e&&e.dispose(),t&&this.children.push(t),this._prevSettings.label=t)}}}Object.defineProperty(a,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Button\"}),Object.defineProperty(a,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:n.W.classNames.concat([a.className])})},1337:function(e,t,i){\"use strict\";i.d(t,{k:function(){return s}});var r=i(8777),n=i(6245);class s extends r.W{constructor(){super(...arguments),Object.defineProperty(this,\"chartContainer\",{enumerable:!0,configurable:!0,writable:!0,value:this.children.push(r.W.new(this._root,{width:n.AQ,height:n.AQ,interactiveChildren:!1}))}),Object.defineProperty(this,\"bulletsContainer\",{enumerable:!0,configurable:!0,writable:!0,value:r.W.new(this._root,{interactiveChildren:!1,isMeasured:!1,position:\"absolute\",width:n.AQ,height:n.AQ})})}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Chart\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.W.classNames.concat([s.className])})},8035:function(e,t,i){\"use strict\";i.d(t,{C:function(){return n}});var r=i(1479);class n extends r.T{_afterNew(){super._afterNew(),this._display.isMeasured=!0,this.setPrivateRaw(\"trustBounds\",!0)}_beforeChanged(){super._beforeChanged(),this.isDirty(\"radius\")&&(this._clear=!0)}_changed(){super._changed(),this._clear&&this._display.drawCircle(0,0,this.get(\"radius\",10))}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Circle\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([n.className])})},9361:function(e,t,i){\"use strict\";i.d(t,{w:function(){return u},z:function(){return h}});var r=i(7582),n=i(6331),s=i(8777),a=i(9582),o=i(5071),l=i(256);class h extends n.Zr{constructor(e,t,i){super(i),Object.defineProperty(this,\"component\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"dataContext\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"bullets\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"open\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"close\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.dataContext=t,this.component=e,this._settings.visible=!0,this._checkDirty()}markDirty(){this.component.markDirtyValues(this)}_startAnimation(){this.component._root._addAnimation(this)}_animationTime(){return this.component._root.animationTime}_dispose(){this.component&&this.component.disposeDataItem(this),super._dispose()}show(e){this.setRaw(\"visible\",!0),this.component&&this.component.showDataItem(this,e)}hide(e){this.setRaw(\"visible\",!1),this.component&&this.component.hideDataItem(this,e)}isHidden(){return!this.get(\"visible\")}}class u extends s.W{constructor(){super(...arguments),Object.defineProperty(this,\"_data\",{enumerable:!0,configurable:!0,writable:!0,value:new a.k}),Object.defineProperty(this,\"_dataItems\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_mainDataItems\",{enumerable:!0,configurable:!0,writable:!0,value:this._dataItems}),Object.defineProperty(this,\"valueFields\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"fields\",{enumerable:!0,configurable:!0,writable:!0,value:[\"id\"]}),Object.defineProperty(this,\"_valueFields\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_valueFieldsF\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_fields\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_fieldsF\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_valuesDirty\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_dataChanged\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_dataGrouped\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"inited\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}set data(e){e.incrementRef(),this._data.decrementRef(),this._data=e}get data(){return this._data}_dispose(){super._dispose(),this._data.decrementRef()}_onDataClear(){}_afterNew(){super._afterNew(),this._data.incrementRef(),this._updateFields(),this._disposers.push(this.data.events.onAll((e=>{const t=this._mainDataItems;if(this.markDirtyValues(),this._markDirtyGroup(),this._dataChanged=!0,\"clear\"===e.type)o.each(t,(e=>{e.dispose()})),t.length=0,this._onDataClear();else if(\"push\"===e.type){const i=new h(this,e.newValue,this._makeDataItem(e.newValue));t.push(i),this.processDataItem(i)}else if(\"setIndex\"===e.type){const i=t[e.index],r=this._makeDataItem(e.newValue);i.bullets&&0==i.bullets.length&&(i.bullets=void 0),l.keys(r).forEach((e=>{i.animate({key:e,to:r[e],duration:this.get(\"interpolationDuration\",0),easing:this.get(\"interpolationEasing\")})})),i.dataContext=e.newValue}else if(\"insertIndex\"===e.type){const i=new h(this,e.newValue,this._makeDataItem(e.newValue));t.splice(e.index,0,i),this.processDataItem(i)}else if(\"removeIndex\"===e.type)t[e.index].dispose(),t.splice(e.index,1);else{if(\"moveIndex\"!==e.type)throw new Error(\"Unknown IStreamEvent type\");{const i=t[e.oldIndex];t.splice(e.oldIndex,1),t.splice(e.newIndex,0,i)}}this._afterDataChange()})))}_updateFields(){this.valueFields&&(this._valueFields=[],this._valueFieldsF={},o.each(this.valueFields,(e=>{this.get(e+\"Field\")&&(this._valueFields.push(e),this._valueFieldsF[e]={fieldKey:e+\"Field\",workingKey:e+\"Working\"})}))),this.fields&&(this._fields=[],this._fieldsF={},o.each(this.fields,(e=>{this.get(e+\"Field\")&&(this._fields.push(e),this._fieldsF[e]=e+\"Field\")})))}get dataItems(){return this._dataItems}processDataItem(e){}_makeDataItem(e){const t={};return this._valueFields&&o.each(this._valueFields,(i=>{const r=this.get(this._valueFieldsF[i].fieldKey);t[i]=e[r],t[this._valueFieldsF[i].workingKey]=t[i]})),this._fields&&o.each(this._fields,(i=>{const r=this.get(this._fieldsF[i]);t[i]=e[r]})),t}makeDataItem(e){let t=new h(this,void 0,e);return this.processDataItem(t),t}pushDataItem(e){const t=this.makeDataItem(e);return this._mainDataItems.push(t),t}disposeDataItem(e){}showDataItem(e,t){return(0,r.mG)(this,void 0,void 0,(function*(){e.set(\"visible\",!0)}))}hideDataItem(e,t){return(0,r.mG)(this,void 0,void 0,(function*(){e.set(\"visible\",!1)}))}_clearDirty(){super._clearDirty(),this._valuesDirty=!1}_afterDataChange(){}_afterChanged(){if(super._afterChanged(),this._dataChanged){const e=\"datavalidated\";this.events.isEnabled(e)&&this.events.dispatch(e,{type:e,target:this}),this._dataChanged=!1}this.inited=!0}markDirtyValues(e){this.markDirty(),this._valuesDirty=!0}_markDirtyGroup(){this._dataGrouped=!1}markDirtySize(){this._sizeDirty=!0,this.markDirty()}}Object.defineProperty(u,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Component\"}),Object.defineProperty(u,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:s.W.classNames.concat([u.className])})},8777:function(e,t,i){\"use strict\";i.d(t,{W:function(){return g}});var r=i(7144),n=i(5071);class s extends r.aV{constructor(e){super(),Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_container\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_events\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._container=e,this._events=this.events.onAll((e=>{if(\"clear\"===e.type)n.each(e.oldValues,(e=>{this._onRemoved(e)}));else if(\"push\"===e.type)this._onInserted(e.newValue);else if(\"setIndex\"===e.type)this._onRemoved(e.oldValue),this._onInserted(e.newValue,e.index);else if(\"insertIndex\"===e.type)this._onInserted(e.newValue,e.index);else if(\"removeIndex\"===e.type)this._onRemoved(e.oldValue);else{if(\"moveIndex\"!==e.type)throw new Error(\"Unknown IListEvent type\");this._onRemoved(e.value),this._onInserted(e.value,e.newIndex)}}))}_onInserted(e,t){e._setParent(this._container,!0);const i=this._container._childrenDisplay;void 0===t?i.addChild(e._display):i.addChildAt(e._display,t)}_onRemoved(e){this._container._childrenDisplay.removeChild(e._display),this._container.markDirtyBounds(),this._container.markDirty()}isDisposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this._events.dispose(),n.each(this.values,(e=>{e.dispose()})))}}var a=i(6245),o=i(4596),l=i(7142),h=i(4431),u=i(1706),c=i(6881),d=i(2132),p=i(5040),f=i(7652);class g extends o.j{constructor(){super(...arguments),Object.defineProperty(this,\"_display\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeContainer()}),Object.defineProperty(this,\"_childrenDisplay\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeContainer()}),Object.defineProperty(this,\"children\",{enumerable:!0,configurable:!0,writable:!0,value:new s(this)}),Object.defineProperty(this,\"_percentageSizeChildren\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_percentagePositionChildren\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_prevWidth\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_prevHeight\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_contentWidth\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_contentHeight\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_contentMask\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_vsbd0\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_vsbd1\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){super._afterNew(),this._display.addChild(this._childrenDisplay)}_dispose(){n.eachReverse(this.allChildren(),(e=>{e.dispose()})),this.getPrivate(\"htmlElement\")&&this._root._removeHTMLContent(this),super._dispose()}_changed(){if(super._changed(),this.isDirty(\"interactiveChildren\")&&(this._display.interactiveChildren=this.get(\"interactiveChildren\",!1)),this.isDirty(\"layout\")&&(this._prevWidth=0,this._prevHeight=0,this.markDirtyBounds(),this._prevSettings.layout&&this.children.each((e=>{e.removePrivate(\"x\"),e.removePrivate(\"y\")}))),(this.isDirty(\"paddingTop\")||this.isDirty(\"paddingBottom\")||this.isDirty(\"paddingLeft\")||this.isDirty(\"paddingRight\"))&&this.children.each((e=>{e.markDirtyPosition()})),this.isDirty(\"maskContent\")){const e=this._childrenDisplay;let t=this._contentMask;this.get(\"maskContent\")?t||(t=l.A.new(this._root,{x:-.5,y:-.5,width:this.width()+1,height:this.height()+1}),this._contentMask=t,e.addChildAt(t._display,0),e.mask=t._display):t&&(e.removeChild(t._display),e.mask=null,t.dispose(),this._contentMask=void 0)}}_updateSize(){super._updateSize(),n.each(this._percentageSizeChildren,(e=>{e._updateSize()})),n.each(this._percentagePositionChildren,(e=>{e.markDirtyPosition(),e._updateSize()})),this.updateBackground()}updateBackground(){const e=this.get(\"background\");let t=this._localBounds;if(t&&!this.isHidden()){let i=t.left,r=t.top,n=t.right-i,s=t.bottom-r,a=this.get(\"maxWidth\"),o=this.get(\"maxHeight\");o&&s>o&&(s=o),a&&n>a&&(n=a);let l=this.width(),h=this.height();e&&(e.setAll({width:n,height:s,x:i,y:r}),this._display.interactive&&(e._display.interactive=!0));const u=this._contentMask;u&&u.setAll({width:l+1,height:h+1});const c=this.get(\"verticalScrollbar\");if(c){c.set(\"height\",h),c.set(\"x\",l-c.width()-c.get(\"marginRight\",0)),c.set(\"end\",c.get(\"start\",0)+h/this._contentHeight);const e=c.get(\"background\");e&&e.setAll({width:c.width(),height:h});let t=!0;this._contentHeight<=h&&(t=!1),c.setPrivate(\"visible\",t)}}}_applyThemes(e=!1){return!!super._applyThemes(e)&&(this.eachChildren((t=>{t._applyThemes(e)})),!0)}_applyState(e){super._applyState(e),this.get(\"setStateOnChildren\")&&this.eachChildren((t=>{t.states.apply(e)}))}_applyStateAnimated(e,t){super._applyStateAnimated(e,t),this.get(\"setStateOnChildren\")&&this.eachChildren((i=>{i.states.applyAnimate(e,t)}))}innerWidth(){return this.width()-this.get(\"paddingRight\",0)-this.get(\"paddingLeft\",0)}innerHeight(){return this.height()-this.get(\"paddingTop\",0)-this.get(\"paddingBottom\",0)}_getBounds(){let e=this.get(\"width\"),t=this.get(\"height\"),i=this.getPrivate(\"width\"),r=this.getPrivate(\"height\"),n={left:0,top:0,right:this.width(),bottom:this.height()},s=this.get(\"layout\"),a=!1,o=!1;if((s instanceof h.G||s instanceof c.M)&&(a=!0),s instanceof u.Z&&(o=!0),null==e&&null==i||null==t&&null==r||this.get(\"verticalScrollbar\")){let e=Number.MAX_VALUE,t=e,i=-e,r=e,s=-e;const l=this.get(\"paddingLeft\",0),h=this.get(\"paddingTop\",0),u=this.get(\"paddingRight\",0),c=this.get(\"paddingBottom\",0);this.children.each((e=>{if(\"absolute\"!=e.get(\"position\")&&e.get(\"isMeasured\")){let n=e.adjustedLocalBounds(),l=e.x(),h=e.y(),u=l+n.left,c=l+n.right,d=h+n.top,p=h+n.bottom;a&&(u-=e.get(\"marginLeft\",0),c+=e.get(\"marginRight\",0)),o&&(d-=e.get(\"marginTop\",0),p+=e.get(\"marginBottom\",0)),u<t&&(t=u),c>i&&(i=c),d<r&&(r=d),p>s&&(s=p)}})),t==e&&(t=0),i==-e&&(i=0),r==e&&(r=0),s==-e&&(s=0),n.left=t-l,n.top=r-h,n.right=i+u,n.bottom=s+c;const d=this.get(\"minWidth\");p.isNumber(d)&&d>0&&n.right-n.left<d&&(n.right>=d?n.left=n.right-d:n.right=n.left+d);const f=this.get(\"minHeight\");p.isNumber(f)&&f>0&&n.bottom-n.top<f&&(n.bottom>=f?n.top=n.bottom-f:n.bottom=n.top+f)}this._contentWidth=n.right-n.left,this._contentHeight=n.bottom-n.top,p.isNumber(e)&&(n.left=0,n.right=e),p.isNumber(i)&&(n.left=0,n.right=i),p.isNumber(t)&&(n.top=0,n.bottom=t),p.isNumber(r)&&(n.top=0,n.bottom=r),this._localBounds=n}_updateBounds(){const e=this.get(\"layout\");e&&e.updateContainer(this),super._updateBounds(),this.updateBackground()}markDirty(){super.markDirty(),this._root._addDirtyParent(this)}_prepareChildren(){const e=this.innerWidth(),t=this.innerHeight();if(e!=this._prevWidth||t!=this._prevHeight){let i=this.get(\"layout\"),r=!1,s=!1;i&&((i instanceof h.G||i instanceof c.M)&&(r=!0),i instanceof u.Z&&(s=!0)),n.each(this._percentageSizeChildren,(i=>{if(!r){let t=i.get(\"width\");t instanceof a.gG&&i.setPrivate(\"width\",t.value*e)}if(!s){let e=i.get(\"height\");e instanceof a.gG&&i.setPrivate(\"height\",e.value*t)}})),n.each(this._percentagePositionChildren,(e=>{e.markDirtyPosition(),e.markDirtyBounds()})),this._prevWidth=e,this._prevHeight=t,this._sizeDirty=!0,this.updateBackground()}this._handleStates()}_updateChildren(){if(this.isDirty(\"html\")){const e=this.get(\"html\");e&&\"\"!==e?this._root._setHTMLContent(this,(0,d.q)(this,this.get(\"html\",\"\"))):this._root._removeHTMLContent(this),this._root._positionHTMLElement(this)}if(this.isDirty(\"verticalScrollbar\")){const e=this.get(\"verticalScrollbar\");if(e){e._setParent(this),e.startGrip.setPrivate(\"visible\",!1),e.endGrip.setPrivate(\"visible\",!1),this.set(\"maskContent\",!0),this.set(\"paddingRight\",e.width()+e.get(\"marginRight\",0)+e.get(\"marginLeft\",0));let t=this.get(\"background\");t||(t=this.set(\"background\",l.A.new(this._root,{themeTags:[\"background\"],fillOpacity:0,fill:this._root.interfaceColors.get(\"alternativeBackground\")}))),this._vsbd0=this.events.on(\"wheel\",(t=>{const i=t.originalEvent;if(!f.isLocalEvent(i,this))return;i.preventDefault();let r=i.deltaY/5e3;const n=e.get(\"start\",0),s=e.get(\"end\",1);n+r<=0&&(r=-n),s+r>=1&&(r=1-s),n+r>=0&&s+r<=1&&(e.set(\"start\",n+r),e.set(\"end\",s+r))})),this._disposers.push(this._vsbd0),this._vsbd1=e.events.on(\"rangechanged\",(()=>{let t=this._contentHeight;const i=this._childrenDisplay,r=this._contentMask;i.y=-e.get(\"start\",0)*t,i.markDirtyLayer(),r&&(r._display.y=-i.y,i.mask=r._display)})),this._disposers.push(this._vsbd1),this._display.addChild(e._display)}else{const e=this._prevSettings.verticalScrollbar;e&&(this._display.removeChild(e._display),this._vsbd0&&this._vsbd0.dispose(),this._vsbd1&&this._vsbd1.dispose(),this._childrenDisplay.y=0,this.setPrivate(\"height\",void 0),this.set(\"maskContent\",!1),this.set(\"paddingRight\",void 0))}}if(this.isDirty(\"background\")){const e=this._prevSettings.background;e&&this._display.removeChild(e._display);const t=this.get(\"background\");t instanceof o.j&&(t.set(\"isMeasured\",!1),t._setParent(this),this._display.addChildAt(t._display,0))}if(this.isDirty(\"mask\")){const e=this.get(\"mask\"),t=this._prevSettings.mask;if(t&&(this._display.removeChild(t._display),t!=e&&t.dispose()),e){const t=e.parent;t&&t.children.removeValue(e),e._setParent(this),this._display.addChildAt(e._display,0),this._childrenDisplay.mask=e._display}}}_processTemplateField(){super._processTemplateField(),this.children.each((e=>{e._processTemplateField()}))}walkChildren(e){this.children.each((t=>{t instanceof g&&t.walkChildren(e),e(t)}))}eachChildren(e){const t=this.get(\"background\");t&&e(t);const i=this.get(\"verticalScrollbar\");i&&e(i);const r=this.get(\"mask\");r&&e(r),this.children.values.forEach((t=>{e(t)}))}allChildren(){const e=[];return this.eachChildren((t=>{e.push(t)})),e}_setDataItem(e){const t=e!==this._dataItem;super._setDataItem(e);const i=this.get(\"html\",\"\");i&&\"\"!==i&&t&&this._root._setHTMLContent(this,(0,d.q)(this,i))}}Object.defineProperty(g,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Container\"}),Object.defineProperty(g,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:o.j.classNames.concat([g.className])})},2433:function(e,t,i){\"use strict\";i.d(t,{P:function(){return n}});var r=i(1479);class n extends r.T{_beforeChanged(){super._beforeChanged(),(this.isDirty(\"radiusX\")||this.isDirty(\"radiusY\")||this.isDirty(\"rotation\"))&&(this._clear=!0)}_changed(){super._changed(),this._clear&&this._display.drawEllipse(0,0,Math.abs(this.get(\"radiusX\")),Math.abs(this.get(\"radiusY\")))}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Ellipse\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([n.className])})},1479:function(e,t,i){\"use strict\";i.d(t,{T:function(){return h},u:function(){return l}});var r=i(4429),n=i(4596),s=i(4680),a=i(5040),o=i(5071);const l=[\"fill\",\"fillOpacity\",\"stroke\",\"strokeWidth\",\"strokeOpacity\",\"fillPattern\",\"strokePattern\",\"fillGradient\",\"strokeGradient\",\"strokeDasharray\",\"strokeDashoffset\",\"shadowBlur\",\"shadowColor\",\"shadowOpacity\",\"shadowOffsetX\",\"shadowOffsetY\",\"blur\",\"sepia\",\"invert\",\"brightness\",\"hue\",\"contrast\",\"saturate\"];class h extends n.j{constructor(){super(...arguments),Object.defineProperty(this,\"_display\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeGraphics()}),Object.defineProperty(this,\"_clear\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_beforeChanged(){if(super._beforeChanged(),(this.isDirty(\"draw\")||this.isDirty(\"svgPath\"))&&this.markDirtyBounds(),(this.isDirty(\"fill\")||this.isDirty(\"stroke\")||this.isDirty(\"visible\")||this.isDirty(\"forceHidden\")||this.isDirty(\"scale\")||this.isDirty(\"fillGradient\")||this.isDirty(\"strokeGradient\")||this.isDirty(\"fillPattern\")||this.isDirty(\"strokePattern\")||this.isDirty(\"fillOpacity\")||this.isDirty(\"strokeOpacity\")||this.isDirty(\"strokeWidth\")||this.isDirty(\"draw\")||this.isDirty(\"blendMode\")||this.isDirty(\"strokeDasharray\")||this.isDirty(\"strokeDashoffset\")||this.isDirty(\"svgPath\")||this.isDirty(\"lineJoin\")||this.isDirty(\"shadowColor\")||this.isDirty(\"shadowBlur\")||this.isDirty(\"shadowOffsetX\")||this.isDirty(\"shadowOffsetY\"))&&(this._clear=!0),this._display.crisp=this.get(\"crisp\",!1),this.isDirty(\"fillGradient\")){const e=this.get(\"fillGradient\");if(e){this._display.isMeasured=!0;const t=e.get(\"target\");t&&(this._disposers.push(t.events.on(\"boundschanged\",(()=>{this._markDirtyKey(\"fill\")}))),this._disposers.push(t.events.on(\"positionchanged\",(()=>{this._markDirtyKey(\"fill\")}))))}}if(this.isDirty(\"strokeGradient\")){const e=this.get(\"strokeGradient\");if(e){this._display.isMeasured=!0;const t=e.get(\"target\");t&&(this._disposers.push(t.events.on(\"boundschanged\",(()=>{this._markDirtyKey(\"stroke\")}))),this._disposers.push(t.events.on(\"positionchanged\",(()=>{this._markDirtyKey(\"stroke\")}))))}}}_changed(){if(super._changed(),this._clear){this.markDirtyBounds(),this.markDirtyLayer(),this._display.clear();let e=this.get(\"strokeDasharray\");a.isNumber(e)&&(e=e<.5?[0]:[e]),this._display.setLineDash(e);const t=this.get(\"strokeDashoffset\");t&&this._display.setLineDashOffset(t);const i=this.get(\"blendMode\",s.b.NORMAL);this._display.blendMode=i;const r=this.get(\"draw\");r&&r(this._display,this);const n=this.get(\"svgPath\");null!=n&&this._display.svgPath(n)}}_afterChanged(){if(super._afterChanged(),this._clear){const e=this.get(\"fill\"),t=this.get(\"fillGradient\"),i=this.get(\"fillPattern\"),n=this.get(\"fillOpacity\"),s=this.get(\"stroke\"),a=this.get(\"strokeGradient\"),l=this.get(\"strokePattern\"),h=this.get(\"shadowColor\"),u=this.get(\"shadowBlur\"),c=this.get(\"shadowOffsetX\"),d=this.get(\"shadowOffsetY\"),p=this.get(\"shadowOpacity\");if(h&&(u||c||d)&&this._display.shadow(h,u,c,d,p),e&&!t&&(this._display.beginFill(e,n),this._display.endFill()),t){if(e){const i=t.get(\"stops\",[]);i.length&&o.each(i,(t=>{t.color&&!t.colorInherited||!e||(t.color=e,t.colorInherited=!0),(null==t.opacity||t.opacityInherited)&&(t.opacity=n,t.opacityInherited=!0)}))}const i=t.getFill(this);i&&(this._display.beginFill(i,n),this._display.endFill())}if(i){const e=i.pattern;e&&(this._display.beginFill(e,n),this._display.endFill(),i instanceof r.v&&i.events.once(\"loaded\",(()=>{this._clear=!0,this.markDirty()})))}if(s||a||l){const e=this.get(\"strokeOpacity\");let t=this.get(\"strokeWidth\",1);this.get(\"nonScalingStroke\")&&(t/=this.get(\"scale\",1)),this.get(\"crisp\")&&(t/=this._root._renderer.resolution);const i=this.get(\"lineJoin\");if(s&&!a&&(this._display.lineStyle(t,s,e,i),this._display.endStroke()),a){const r=a.get(\"stops\",[]);r.length&&o.each(r,(t=>{t.color&&!t.colorInherited||!s||(t.color=s,t.colorInherited=!0),(null==t.opacity||t.opacityInherited)&&(t.opacity=e,t.opacityInherited=!0)}));const n=a.getFill(this);n&&(this._display.lineStyle(t,n,e,i),this._display.endStroke())}if(l){let n=l.pattern;n&&(this._display.lineStyle(t,n,e,i),this._display.endStroke(),l instanceof r.v&&l.events.once(\"loaded\",(()=>{this._clear=!0,this.markDirty()})))}}this.getPrivate(\"showingTooltip\")&&this.showTooltip()}this._clear=!1}}Object.defineProperty(h,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Graphics\"}),Object.defineProperty(h,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:n.j.classNames.concat([h.className])})},6881:function(e,t,i){\"use strict\";i.d(t,{M:function(){return a}});var r=i(2010),n=i(5071),s=i(751);class a extends r.A{_afterNew(){this._setRawDefault(\"maxColumns\",Number.MAX_VALUE),super._afterNew()}updateContainer(e){let t=e.get(\"paddingLeft\",0),i=e.get(\"paddingRight\",0),n=e.get(\"paddingTop\",0),a=e.maxWidth()-t-i,o=a,l=1;(0,r.j)(e,(e=>{if(e.get(\"visible\")&&e.getPrivate(\"visible\")&&!e.get(\"forceHidden\")&&\"absolute\"!=e.get(\"position\")){let t=e.width();t<o&&(o=t),t>l&&(l=t)}})),o=s.fitToRange(o,1,a),l=s.fitToRange(l,1,a);let h=1;h=this.get(\"fixedWidthGrid\")?a/l:a/o,h=Math.max(1,Math.floor(h)),h=Math.min(this.get(\"maxColumns\",Number.MAX_VALUE),h);let u=this.getColumnWidths(e,h,l,a),c=n,d=0,p=0;h=u.length;let f=t;(0,r.j)(e,(e=>{if(\"relative\"==e.get(\"position\")&&e.isVisible()){const i=e.get(\"marginTop\",0),r=e.get(\"marginBottom\",0);let n=e.adjustedLocalBounds(),s=e.get(\"marginLeft\",0),a=e.get(\"marginRight\",0),o=f+s-n.left,l=c+i-n.top;e.setPrivate(\"x\",o),e.setPrivate(\"y\",l),f+=u[d]+a,p=Math.max(p,e.height()+i+r),d++,d>=h&&(d=0,f=t,c+=p)}}))}getColumnWidths(e,t,i,s){let a=0,o=[],l=0;return(0,r.j)(e,(r=>{let n=r.adjustedLocalBounds();\"absolute\"!=r.get(\"position\")&&r.isVisible()&&(this.get(\"fixedWidthGrid\")?o[l]=i:o[l]=Math.max(0|o[l],n.right-n.left+r.get(\"marginLeft\",0)+r.get(\"marginRight\",0)),l<e.children.length-1&&(l++,l==t&&(l=0)))})),n.each(o,(e=>{a+=e})),a>s?t>2?(t-=1,this.getColumnWidths(e,t,i,s)):[s]:o}}Object.defineProperty(a,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"GridLayout\"}),Object.defineProperty(a,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.A.classNames.concat([a.className])})},4431:function(e,t,i){\"use strict\";i.d(t,{G:function(){return a}});var r=i(2010),n=i(5040),s=i(6245);class a extends r.A{updateContainer(e){let t=e.get(\"paddingLeft\",0),i=e.innerWidth(),a=0;(0,r.j)(e,(e=>{if(e.isVisible()&&\"relative\"==e.get(\"position\")){let t=e.get(\"width\");if(t instanceof s.gG){a+=t.value;let r=i*t.value,n=e.get(\"minWidth\",e.getPrivate(\"minWidth\",-1/0));n>r&&(i-=n,a-=t.value);let s=e.get(\"maxWidth\",e.getPrivate(\"maxWidth\",1/0));r>s&&(i-=s,a-=t.value)}else n.isNumber(t)||(t=e.width()),i-=t+e.get(\"marginLeft\",0)+e.get(\"marginRight\",0)}})),(i<=0||i==1/0)&&(i=.1),(0,r.j)(e,(e=>{if(e.isVisible()&&\"relative\"==e.get(\"position\")){let t=e.get(\"width\");if(t instanceof s.gG){let r=i*t.value/a-e.get(\"marginLeft\",0)-e.get(\"marginRight\",0),n=e.get(\"minWidth\",e.getPrivate(\"minWidth\",-1/0)),s=e.get(\"maxWidth\",e.getPrivate(\"maxWidth\",1/0));r=Math.min(Math.max(n,r),s),e.setPrivate(\"width\",r)}else e._prevSettings.width instanceof s.gG&&e.setPrivate(\"width\",void 0)}}));let o=t;(0,r.j)(e,(e=>{if(\"relative\"==e.get(\"position\"))if(e.isVisible()){let t=e.adjustedLocalBounds(),i=e.get(\"marginLeft\",0),r=e.get(\"marginRight\",0),n=e.get(\"maxWidth\"),s=t.left,a=t.right;n&&a-s>n&&(a=s+n);let l=o+i-s;e.setPrivate(\"x\",l),o=l+a+r}else e.setPrivate(\"x\",void 0)}))}}Object.defineProperty(a,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"HorizontalLayout\"}),Object.defineProperty(a,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.A.classNames.concat([a.className])})},962:function(e,t,i){\"use strict\";i.d(t,{_:function(){return l}});var r=i(2036),n=i(6245),s=i(8777),a=i(5071),o=i(5040);class l extends s.W{constructor(){super(...arguments),Object.defineProperty(this,\"_text\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_textKeys\",{enumerable:!0,configurable:!0,writable:!0,value:[\"text\",\"fill\",\"fillOpacity\",\"textAlign\",\"fontFamily\",\"fontSize\",\"fontStyle\",\"fontWeight\",\"fontStyle\",\"fontVariant\",\"textDecoration\",\"shadowColor\",\"shadowBlur\",\"shadowOffsetX\",\"shadowOffsetY\",\"shadowOpacity\",\"lineHeight\",\"baselineRatio\",\"direction\",\"textBaseline\",\"oversizedBehavior\",\"breakWords\",\"ellipsis\",\"minScale\",\"populateText\",\"role\",\"ignoreFormatting\",\"maxChars\"]})}get text(){return this._text}_afterNew(){super._afterNew(),this._makeText(),a.each(this._textKeys,(e=>{const t=this.get(e);null!=t&&this._text.set(e,t)})),\"\"!==this.get(\"html\",\"\")&&this._text.set(\"text\",\"\"),this.onPrivate(\"maxWidth\",(()=>{this._setMaxDimentions()})),this.onPrivate(\"maxHeight\",(()=>{this._setMaxDimentions()}))}_makeText(){this._text=this.children.push(r.x.new(this._root,{}))}_updateChildren(){if(super._updateChildren(),a.each(this._textKeys,(e=>{this._text.set(e,this.get(e))})),this.isDirty(\"maxWidth\")&&this._setMaxDimentions(),this.isDirty(\"maxHeight\")&&this._setMaxDimentions(),this.isDirty(\"rotation\")&&this._setMaxDimentions(),\"\"!==this.get(\"html\",\"\")?this._text.set(\"text\",\"\"):this._text.set(\"text\",this.get(\"text\")),this.isDirty(\"textAlign\")||this.isDirty(\"width\")){const e=this.get(\"textAlign\");let t;null!=this.get(\"width\")?t=\"right\"==e?n.AQ:\"center\"==e?n.CI:0:\"left\"==e||\"start\"==e?t=this.get(\"paddingLeft\"):\"right\"!=e&&\"end\"!=e||(t=-this.get(\"paddingRight\")),this.text.set(\"x\",t)}}_setMaxDimentions(){const e=this.get(\"rotation\"),t=90==e||270==e||-90==e,i=this.get(\"maxWidth\",this.getPrivate(\"maxWidth\",1/0));o.isNumber(i)?this.text.set(t?\"maxHeight\":\"maxWidth\",i-this.get(\"paddingLeft\",0)-this.get(\"paddingRight\",0)):this.text.set(t?\"maxHeight\":\"maxWidth\",void 0);const r=this.get(\"maxHeight\",this.getPrivate(\"maxHeight\",1/0));o.isNumber(r)?this.text.set(t?\"maxWidth\":\"maxHeight\",r-this.get(\"paddingTop\",0)-this.get(\"paddingBottom\",0)):this.text.set(t?\"maxWidth\":\"maxHeight\",void 0)}_setDataItem(e){super._setDataItem(e),this._markDirtyKey(\"text\"),this.text.get(\"populateText\")&&this.text.markDirtyText()}getText(){return this._text._getText()}}Object.defineProperty(l,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Label\"}),Object.defineProperty(l,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:s.W.classNames.concat([l.className])})},2010:function(e,t,i){\"use strict\";i.d(t,{A:function(){return s},j:function(){return n}});var r=i(6331);function n(e,t){e.get(\"reverseChildren\",!1)?e.children.eachReverse(t):e.children.each(t)}class s extends r.JH{}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Layout\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([s.className])})},3105:function(e,t,i){\"use strict\";i.d(t,{D:function(){return u}});var r=i(3399),n=i(8777),s=i(962),a=i(3497),o=i(5769),l=i(7144),h=i(7652);class u extends r.F{constructor(){super(...arguments),Object.defineProperty(this,\"itemContainers\",{enumerable:!0,configurable:!0,writable:!0,value:new l.o(o.YS.new({}),(()=>n.W._new(this._root,{themeTags:h.mergeTags(this.itemContainers.template.get(\"themeTags\",[]),[\"legend\",\"item\"]),themeTagsSelf:h.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\",[]),[\"itemcontainer\"]),background:a.c.new(this._root,{themeTags:h.mergeTags(this.itemContainers.template.get(\"themeTags\",[]),[\"legend\",\"item\",\"background\"]),themeTagsSelf:h.mergeTags(this.itemContainers.template.get(\"themeTagsSelf\",[]),[\"itemcontainer\"])})},[this.itemContainers.template])))}),Object.defineProperty(this,\"markers\",{enumerable:!0,configurable:!0,writable:!0,value:new l.o(o.YS.new({}),(()=>n.W._new(this._root,{themeTags:h.mergeTags(this.markers.template.get(\"themeTags\",[]),[\"legend\",\"marker\"])},[this.markers.template])))}),Object.defineProperty(this,\"labels\",{enumerable:!0,configurable:!0,writable:!0,value:new l.o(o.YS.new({}),(()=>s._._new(this._root,{themeTags:h.mergeTags(this.labels.template.get(\"themeTags\",[]),[\"legend\",\"label\"])},[this.labels.template])))}),Object.defineProperty(this,\"valueLabels\",{enumerable:!0,configurable:!0,writable:!0,value:new l.o(o.YS.new({}),(()=>s._._new(this._root,{themeTags:h.mergeTags(this.valueLabels.template.get(\"themeTags\",[]),[\"legend\",\"label\",\"value\"])},[this.valueLabels.template])))}),Object.defineProperty(this,\"markerRectangles\",{enumerable:!0,configurable:!0,writable:!0,value:new l.o(o.YS.new({}),(()=>a.c._new(this._root,{themeTags:h.mergeTags(this.markerRectangles.template.get(\"themeTags\",[]),[\"legend\",\"marker\",\"rectangle\"])},[this.markerRectangles.template])))})}_afterNew(){this._settings.themeTags=h.mergeTags(this._settings.themeTags,[\"legend\"]),this.fields.push(\"name\",\"stroke\",\"fill\"),super._afterNew()}makeItemContainer(e){const t=this.children.push(this.itemContainers.make());return t._setDataItem(e),this.itemContainers.push(t),t.states.create(\"disabled\",{}),t}makeMarker(){const e=this.markers.make();return this.markers.push(e),e.states.create(\"disabled\",{}),e}makeLabel(){const e=this.labels.make();return e.states.create(\"disabled\",{}),e}makeValueLabel(){const e=this.valueLabels.make();return e.states.create(\"disabled\",{}),e}makeMarkerRectangle(){const e=this.markerRectangles.make();return e.states.create(\"disabled\",{}),e}processDataItem(e){super.processDataItem(e);const t=this.makeItemContainer(e),i=this.get(\"nameField\"),r=this.get(\"fillField\"),n=this.get(\"strokeField\");if(t){const s=this.get(\"clickTarget\",\"itemContainer\"),a=e.dataContext;a&&a.set&&a.set(\"legendDataItem\",e),t._setDataItem(e),e.set(\"itemContainer\",t);const o=this.makeMarker();if(o){t.children.push(o),o._setDataItem(e),e.set(\"marker\",o);const i=this.get(\"useDefaultMarker\"),s=o.children.push(this.makeMarkerRectangle());let l=e.get(\"fill\"),h=e.get(\"stroke\");e.set(\"markerRectangle\",s),a&&a.get&&(l=a.get(r,l),h=a.get(n,h)),h||(h=l),i?a.on&&(a.on(r,(()=>{s.set(\"fill\",a.get(r))})),a.on(n,(()=>{s.set(\"stroke\",a.get(n))}))):a&&a.createLegendMarker&&a.createLegendMarker(),s.setAll({fill:l,stroke:h});const u=a.component;u&&u.updateLegendMarker&&u.updateLegendMarker(a)}const l=this.makeLabel();if(l){t.children.push(l),l._setDataItem(e),e.set(\"label\",l),l.text.on(\"text\",(()=>{t.setRaw(\"ariaLabel\",l.text._getText()+(\"none\"!==this.get(\"clickTarget\")?\"; \"+this._t(\"Press ENTER to toggle\"):\"\")),t.markDirtyAccessibility()})),a&&a.get&&e.set(\"name\",a.get(i));let r=e.get(\"name\");r&&l.set(\"text\",r)}const h=this.makeValueLabel();if(h&&(t.children.push(h),h._setDataItem(e),e.set(\"valueLabel\",h)),a&&a.show&&(a.on(\"visible\",(e=>{t.set(\"disabled\",!e)})),a.get(\"visible\")||t.set(\"disabled\",!0),\"none\"!=s)){let i=t;\"marker\"==s&&(i=o),this._addClickEvents(i,a,e)}this.children.values.sort(((e,t)=>{const i=e.dataItem.dataContext,r=t.dataItem.dataContext;if(i&&r){const e=this.data.indexOf(i),t=this.data.indexOf(r);if(e>t)return 1;if(e<t)return-1}return 0})),a&&a.updateLegendValue&&a.updateLegendValue()}}_addClickEvents(e,t,i){e.set(\"cursorOverStyle\",\"pointer\"),e.events.on(\"pointerover\",(()=>{const e=t.component;e&&e.hoverDataItem&&e.hoverDataItem(t)})),e.events.on(\"pointerout\",(()=>{const e=t.component;e&&e.hoverDataItem&&e.unhoverDataItem(t)})),e.events.on(\"click\",(()=>{const r=i.get(\"label\").text._getText();t.show&&t.isHidden&&(t.isHidden()||!1===t.get(\"visible\"))?(t.show(),e.set(\"disabled\",!1),this._root.readerAlert(this._t(\"%1 shown\",this._root.locale,r))):t.hide&&(t.hide(),e.set(\"disabled\",!0),this._root.readerAlert(this._t(\"%1 hidden\",this._root.locale,r)))}))}disposeDataItem(e){super.disposeDataItem(e);const t=e.dataContext;t&&t.get&&t.get(\"legendDataItem\")==e&&t.set(\"legendDataItem\",void 0);let i=e.get(\"itemContainer\");i&&(this.itemContainers.removeValue(i),i.dispose());let r=e.get(\"marker\");r&&(this.markers.removeValue(r),r.dispose());let n=e.get(\"markerRectangle\");n&&(this.markerRectangles.removeValue(n),n.dispose());let s=e.get(\"label\");s&&(this.labels.removeValue(s),s.dispose());let a=e.get(\"valueLabel\");a&&(this.valueLabels.removeValue(a),a.dispose())}}Object.defineProperty(u,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Legend\"}),Object.defineProperty(u,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.F.classNames.concat([u.className])})},2077:function(e,t,i){\"use strict\";i.d(t,{x:function(){return a}});var r=i(1479);function n(e,t){for(let i=0,r=t.length;i<r;i++){const r=t[i];if(r.length>0){let t=r[0];if(t.length>0){let i=t[0];e.moveTo(i.x,i.y);for(let t=0,i=r.length;t<i;t++)s(e,r[t])}}}}function s(e,t){for(let i=0,r=t.length;i<r;i++){const r=t[i];e.lineTo(r.x,r.y)}}class a extends r.T{_beforeChanged(){super._beforeChanged(),(this.isDirty(\"points\")||this.isDirty(\"segments\")||this._sizeDirty||this.isPrivateDirty(\"width\")||this.isPrivateDirty(\"height\"))&&(this._clear=!0)}_changed(){if(super._changed(),this._clear){const e=this.get(\"points\"),t=this.get(\"segments\");if(e&&e.length>0){let t=e[0];this._display.moveTo(t.x,t.y),n(this._display,[[e]])}else if(t)n(this._display,t);else if(!this.get(\"draw\")){let e=this.width(),t=this.height();this._display.moveTo(0,0),this._display.lineTo(e,t)}}}}Object.defineProperty(a,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Line\"}),Object.defineProperty(a,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([a.className])})},8289:function(e,t,i){\"use strict\";i.d(t,{G:function(){return n}});class r{constructor(e,t){Object.defineProperty(this,\"_line\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_point\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_context\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_x0\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_x1\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_y0\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_y1\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_t0\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_tension\",{enumerable:!0,configurable:!0,writable:!0,value:0}),this._context=e,this._tension=t}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0}lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:l(this,this._t0,o(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(e,t){let i=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;break;case 2:this._point=3,l(this,o(this,i=a(this,e,t)),i);break;default:l(this,this._t0,i=a(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=i}}}function n(e){return function(t){return new r(t,e)}}function s(e){return e<0?-1:1}function a(e,t,i){let r=e._x1-e._x0,n=t-e._x1,a=(e._y1-e._y0)/(r||n<0&&-0),o=(i-e._y1)/(n||r<0&&-0),l=(a*n+o*r)/(r+n);return(s(a)+s(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(l))||0}function o(e,t){let i=e._x1-e._x0;return i?(3*(e._y1-e._y0)/i-t)/2:t}function l(e,t,i){let r=e._x0,n=e._y0,s=e._x1,a=e._y1,o=(s-r)/1.5*(1-e._tension);e._context.bezierCurveTo(r+o,n+o*t,s-o,a-o*i,s,a)}},5892:function(e,t,i){\"use strict\";i.d(t,{$:function(){return n}});class r{constructor(e,t){Object.defineProperty(this,\"_line\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_point\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_context\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_x0\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_x1\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_y0\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_y1\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_t0\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_tension\",{enumerable:!0,configurable:!0,writable:!0,value:0}),this._context=e,this._tension=t}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0}lineEnd(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:l(this,this._t0,o(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(e,t){[e,t]=[t,e];let i=NaN;if(t=+t,(e=+e)!==this._x1||t!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,l(this,o(this,i=a(this,e,t)),i);break;default:l(this,this._t0,i=a(this,e,t))}this._x0=this._x1,this._x1=e,this._y0=this._y1,this._y1=t,this._t0=i}}}function n(e){function t(t){return new r(t,e)}return t.tension=function(e){return n(+e)},t}function s(e){return e<0?-1:1}function a(e,t,i){let r=e._x1-e._x0,n=t-e._x1,a=(e._y1-e._y0)/(r||n<0&&-0),o=(i-e._y1)/(n||r<0&&-0),l=(a*n+o*r)/(r+n);return(s(a)+s(o))*Math.min(Math.abs(a),Math.abs(o),.5*Math.abs(l))||0}function o(e,t){let i=e._x1-e._x0;return i?(3*(e._y1-e._y0)/i-t)/2:t}function l(e,t,i){let r=e._x0,n=e._y0,s=e._x1,a=e._y1,o=(s-r)/1.5*(1-e._tension);e._context.bezierCurveTo(n+o*t,r+o,a-o*i,s-o,a,s)}},5021:function(e,t,i){\"use strict\";i.d(t,{t:function(){return s}});var r=i(4596),n=i(5040);class s extends r.j{constructor(){super(...arguments),Object.defineProperty(this,\"_display\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makePicture(void 0)})}_changed(){if(super._changed(),this.isDirty(\"width\")){const e=this.get(\"width\");this._display.width=n.isNumber(e)?e:void 0}if(this.isDirty(\"height\")){const e=this.get(\"height\");this._display.height=n.isNumber(e)?e:void 0}if(this.isDirty(\"shadowColor\")){this._display.clear();const e=this.get(\"shadowColor\");this._display.shadowColor=null==e?void 0:e}this.isDirty(\"shadowBlur\")&&(this._display.clear(),this._display.shadowBlur=this.get(\"shadowBlur\")),this.isDirty(\"shadowOffsetX\")&&(this._display.clear(),this._display.shadowOffsetX=this.get(\"shadowOffsetX\")),this.isDirty(\"shadowOffsetY\")&&(this._display.clear(),this._display.shadowOffsetY=this.get(\"shadowOffsetY\")),this.isDirty(\"shadowOpacity\")&&(this._display.clear(),this._display.shadowOpacity=this.get(\"shadowOpacity\")),(this.isDirty(\"src\")||this.isDirty(\"cors\"))&&(this._display.clear(),this._load())}_load(){const e=this.get(\"src\");if(e){let t=\"loaded\";const i=new Image;i.crossOrigin=this.get(\"cors\",\"anonymous\"),i.src=e,i.decode().then((()=>{this._display.image=i,this._updateSize()})).catch((e=>{t=\"loaderror\"})),this.events.isEnabled(t)&&this.events.dispatch(t,{type:t,target:this})}}_updateSize(){super._updateSize();const e=this._display.image;if(e){let t=this.getPrivate(\"width\",this.get(\"width\")),i=this.getPrivate(\"height\",this.get(\"height\"));const r=e.width&&e.height?e.width/e.height:0;n.isNumber(t)&&n.isNumber(i)?(this._display.width=t,this._display.height=i):n.isNumber(t)&&r?i=t/r:n.isNumber(i)&&r?t=i*r:(t=e.width,i=e.height),n.isNumber(t)&&(this._display.width=t),n.isNumber(i)&&(this._display.height=i),this.markDirtyBounds(),this.markDirty()}}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Picture\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.j.classNames.concat([s.className])})},8931:function(e,t,i){\"use strict\";i.d(t,{i:function(){return s}});var r=i(1479),n=i(751);class s extends r.T{_beforeChanged(){super._beforeChanged(),(this.isDirty(\"pointerBaseWidth\")||this.isDirty(\"cornerRadius\")||this.isDirty(\"pointerLength\")||this.isDirty(\"pointerX\")||this.isDirty(\"pointerY\")||this.isDirty(\"width\")||this.isDirty(\"height\"))&&(this._clear=!0)}_changed(){if(super._changed(),this._clear){this.markDirtyBounds();let e=this.width(),t=this.height();if(e>0&&t>0){let i=this.get(\"cornerRadius\",8);i=n.fitToRange(i,0,Math.min(e/2,t/2));let r=this.get(\"pointerX\",0),s=this.get(\"pointerY\",0),a=this.get(\"pointerBaseWidth\",15)/2,o=0,l=0,h=0,u=(r-o)*(t-l)-(s-l)*(e-o),c=(r-h)*(0-t)-(s-t)*(e-h);const d=this._display;if(d.moveTo(i,0),u>0&&c>0){let t=Math.round(n.fitToRange(r,i+a,e-a-i));s=n.fitToRange(s,-1/0,0),d.lineTo(t-a,0),d.lineTo(r,s),d.lineTo(t+a,0)}if(d.lineTo(e-i,0),d.arcTo(e,0,e,i,i),u>0&&c<0){let o=Math.round(n.fitToRange(s,i+a,t-a-i));r=n.fitToRange(r,e,1/0),d.lineTo(e,i),d.lineTo(e,Math.max(o-a,i)),d.lineTo(r,s),d.lineTo(e,o+a)}if(d.lineTo(e,t-i),d.arcTo(e,t,e-i,t,i),u<0&&c<0){let o=Math.round(n.fitToRange(r,i+a,e-a-i));s=n.fitToRange(s,t,1/0),d.lineTo(e-i,t),d.lineTo(o+a,t),d.lineTo(r,s),d.lineTo(o-a,t)}if(d.lineTo(i,t),d.arcTo(0,t,0,t-i,i),u<0&&c>0){let e=Math.round(n.fitToRange(s,i+a,t-i-a));r=n.fitToRange(r,-1/0,0),d.lineTo(0,t-i),d.lineTo(0,e+a),d.lineTo(r,s),d.lineTo(0,Math.max(e-a,i))}d.lineTo(0,i),d.arcTo(0,0,i,0,i),d.closePath()}}}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"PointedRectangle\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([s.className])})},7770:function(e,t,i){\"use strict\";i.d(t,{m:function(){return s}});var r=i(1479),n=i(5071);class s extends r.T{constructor(){super(...arguments),Object.defineProperty(this,\"morphAnimation\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_beforeChanged(){if(super._beforeChanged(),this.isDirty(\"coordinates\")){const e=[],t=this.get(\"coordinates\");t&&n.each(t,(t=>{e.push({x:t[0],y:t[1]})})),this.set(\"points\",e)}if(this.isPrivateDirty(\"points\")&&(this._clear=!0),this.isDirty(\"points\")){this._clear=!0;const e=this.get(\"points\"),t=this._prevSettings.points;if(t){if(e){let i=n.copy(e),r=n.copy(t),s=i.length,a=r.length;if(s>a){let e=n.copy(i);for(let t=0;t<s;t++){let i=Math.floor(t/s*a);e[t]={x:r[i].x,y:r[i].y}}r=e}else if(a>s){let e=n.copy(r);for(let t=0;t<a;t++){let r=Math.floor(t/a*s);e[t]={x:i[r].x,y:i[r].y}}i=e}this.setPrivateRaw(\"previousPoints\",r),this.setPrivateRaw(\"points\",i),this.morphAnimation=this.animatePrivate({key:\"morphProgress\",from:0,to:1,duration:this.get(\"animationDuration\",0),easing:this.get(\"animationEasing\")}),this._root.events.once(\"frameended\",(()=>{this._markDirtyPrivateKey(\"morphProgress\")}))}}else this.setPrivateRaw(\"previousPoints\",e),this.setPrivateRaw(\"points\",e);let i=1/0,r=-1/0,s=1/0,a=-1/0;if(e)for(let t=1,n=e.length;t<n;t++){const n=e[t];i=Math.min(i,n.x),r=Math.max(r,n.x),s=Math.min(s,n.y),a=Math.max(a,n.y)}this.setPrivate(\"minX\",i),this.setPrivate(\"maxX\",r),this.setPrivate(\"minY\",s),this.setPrivate(\"maxY\",s)}this.isPrivateDirty(\"morphProgress\")&&(this._clear=!0)}_changed(){super._changed(),this._clear&&this._draw()}_draw(){const e=this.getPrivate(\"previousPoints\"),t=this.getPrivate(\"points\"),i=this.getPrivate(\"morphProgress\",1);if(t&&e){const r=t[0],n=e[0];r&&this._display.moveTo(n.x+(r.x-n.x)*i,n.y+(r.y-n.y)*i);for(let r=1,n=t.length;r<n;r++){const n=t[r],s=e[r];this._display.lineTo(s.x+(n.x-s.x)*i,s.y+(n.y-s.y)*i)}this._display.closePath()}}_updateSize(){this.markDirty(),this._clear=!0}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Polygon\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([s.className])})},815:function(e,t,i){\"use strict\";i.d(t,{x:function(){return l}});var r=i(6245),n=i(962),s=i(4244),a=i(751),o=i(7652);class l extends n._{constructor(){super(...arguments),Object.defineProperty(this,\"_flipped\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_afterNew(){this._textKeys.push(\"textType\",\"kerning\"),super._afterNew()}_makeText(){this._text=this.children.push(s.f.new(this._root,{}))}baseRadius(){const e=this.getPrivate(\"radius\",0),t=this.getPrivate(\"innerRadius\",0),i=this.get(\"baseRadius\",0);return t+o.relativeToValue(i,e-t)}radius(){const e=this.get(\"inside\",!1);return this.baseRadius()+this.get(\"radius\",0)*(e?-1:1)}_updateChildren(){if(super._updateChildren(),this.isDirty(\"baseRadius\")||this.isPrivateDirty(\"radius\")||this.isPrivateDirty(\"innerRadius\")||this.isDirty(\"labelAngle\")||this.isDirty(\"radius\")||this.isDirty(\"inside\")||this.isDirty(\"orientation\")||this.isDirty(\"textType\")){const e=this.get(\"textType\",\"adjusted\"),t=this.get(\"inside\",!1),i=this.get(\"orientation\");let n=a.normalizeAngle(this.get(\"labelAngle\",0));this._text.set(\"startAngle\",this.get(\"labelAngle\",0)),this._text.set(\"inside\",t);const s=a.sin(n),o=a.cos(n);let l=this.baseRadius(),h=this.radius();if(this._display.angle=0,\"circular\"==e)this.setAll({paddingTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0}),this._text.set(\"orientation\",i),this._text.set(\"radius\",h);else{0==l&&(n=0,h=0);let t=h*o,a=h*s;\"radial\"==e?(this.setRaw(\"x\",t),this.setRaw(\"y\",a),n<90||n>270||\"auto\"!=i?(this._display.angle=n,this._flipped=!1):(this._display.angle=n+180,this._flipped=!0),this._dirty.rotation=!1):\"adjusted\"==e?(this.setRaw(\"centerX\",r.CI),this.setRaw(\"centerY\",r.CI),this.setRaw(\"x\",t),this.setRaw(\"y\",a)):\"regular\"==e&&(this.setRaw(\"x\",t),this.setRaw(\"y\",a))}this.markDirtyPosition(),this.markDirtyBounds()}}_updatePosition(){const e=this.get(\"textType\",\"regular\"),t=this.get(\"inside\",!1);let i=0,n=0,s=this.get(\"labelAngle\",0),o=this.localBounds(),l=o.right-o.left,h=o.bottom-o.top;if(\"radial\"==e){if(this._flipped){let e=this.get(\"centerX\");e instanceof r.gG&&(l*=1-2*e.value),i=l*a.cos(s),n=l*a.sin(s)}}else t||\"adjusted\"!=e||(i=l/2*a.cos(s),n=h/2*a.sin(s));this.setRaw(\"dx\",i),this.setRaw(\"dy\",n),super._updatePosition()}get text(){return this._text}}Object.defineProperty(l,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"RadialLabel\"}),Object.defineProperty(l,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:n._.classNames.concat([l.className])})},4244:function(e,t,i){\"use strict\";i.d(t,{f:function(){return s}});var r=i(2036),n=i(751);class s extends r.x{constructor(){super(...arguments),Object.defineProperty(this,\"_display\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeRadialText(\"\",this.textStyle)})}_afterNew(){super._afterNew()}_beforeChanged(){super._beforeChanged(),this._display.clear(),this.isDirty(\"textType\")&&(this._display.textType=this.get(\"textType\"),this.markDirtyBounds()),this.isDirty(\"radius\")&&(this._display.radius=this.get(\"radius\"),this.markDirtyBounds()),this.isDirty(\"startAngle\")&&(this._display.startAngle=(this.get(\"startAngle\",0)+90)*n.RADIANS,this.markDirtyBounds()),this.isDirty(\"inside\")&&(this._display.inside=this.get(\"inside\"),this.markDirtyBounds()),this.isDirty(\"orientation\")&&(this._display.orientation=this.get(\"orientation\"),this.markDirtyBounds()),this.isDirty(\"kerning\")&&(this._display.kerning=this.get(\"kerning\"),this.markDirtyBounds())}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"RadialText\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.x.classNames.concat([s.className])})},7142:function(e,t,i){\"use strict\";i.d(t,{A:function(){return n}});var r=i(1479);class n extends r.T{_afterNew(){super._afterNew(),this._display.isMeasured=!0,this.setPrivateRaw(\"trustBounds\",!0)}_beforeChanged(){super._beforeChanged(),(this.isDirty(\"width\")||this.isDirty(\"height\")||this.isPrivateDirty(\"width\")||this.isPrivateDirty(\"height\"))&&(this._clear=!0)}_changed(){super._changed(),this._clear&&!this.get(\"draw\")&&this._draw()}_draw(){this._display.drawRect(0,0,this.width(),this.height())}_updateSize(){this.markDirty(),this._clear=!0}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Rectangle\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([n.className])})},3497:function(e,t,i){\"use strict\";i.d(t,{c:function(){return o}});var r=i(5040),n=i(751),s=i(7652),a=i(7142);class o extends a.A{_beforeChanged(){super._beforeChanged(),(this.isDirty(\"cornerRadiusTL\")||this.isDirty(\"cornerRadiusTR\")||this.isDirty(\"cornerRadiusBR\")||this.isDirty(\"cornerRadiusBL\"))&&(this._clear=!0)}_draw(){let e=this.width(),t=this.height(),i=e,a=t,o=i/Math.abs(e),l=a/Math.abs(t);if(r.isNumber(i)&&r.isNumber(a)){let e=Math.min(i,a)/2,t=s.relativeToValue(this.get(\"cornerRadiusTL\",8),e),r=s.relativeToValue(this.get(\"cornerRadiusTR\",8),e),h=s.relativeToValue(this.get(\"cornerRadiusBR\",8),e),u=s.relativeToValue(this.get(\"cornerRadiusBL\",8),e),c=Math.min(Math.abs(i/2),Math.abs(a/2));t=n.fitToRange(t,0,c),r=n.fitToRange(r,0,c),h=n.fitToRange(h,0,c),u=n.fitToRange(u,0,c);const d=this._display;d.moveTo(t*o,0),d.lineTo(i-r*o,0),r>0&&d.arcTo(i,0,i,r*l,r),d.lineTo(i,a-h*l),h>0&&d.arcTo(i,a,i-h*o,a,h),d.lineTo(u*o,a),u>0&&d.arcTo(0,a,0,a-u*l,u),d.lineTo(0,t*l),t>0&&d.arcTo(0,0,t*o,0,t),d.closePath()}}}Object.defineProperty(o,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"RoundedRectangle\"}),Object.defineProperty(o,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:a.A.classNames.concat([o.className])})},6001:function(e,t,i){\"use strict\";i.d(t,{L:function(){return h}});var r=i(3497),n=i(8777),s=i(1479),a=i(8054),o=i(5040),l=i(7652);class h extends n.W{constructor(){super(...arguments),Object.defineProperty(this,\"thumb\",{enumerable:!0,configurable:!0,writable:!0,value:this._makeThumb()}),Object.defineProperty(this,\"startGrip\",{enumerable:!0,configurable:!0,writable:!0,value:this._makeButton()}),Object.defineProperty(this,\"endGrip\",{enumerable:!0,configurable:!0,writable:!0,value:this._makeButton()}),Object.defineProperty(this,\"_thumbBusy\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_startDown\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_endDown\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_thumbDown\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_gripDown\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_addOrientationClass(){this._settings.themeTags=l.mergeTags(this._settings.themeTags,[\"scrollbar\",this._settings.orientation]),this._settings.background||(this._settings.background=r.c.new(this._root,{themeTags:l.mergeTags(this._settings.themeTags,[\"main\",\"background\"])}))}_makeButton(){return this.children.push(a.z.new(this._root,{themeTags:[\"resize\",\"button\",this.get(\"orientation\")],icon:s.T.new(this._root,{themeTags:[\"icon\"]})}))}_makeThumb(){return this.children.push(r.c.new(this._root,{themeTags:[\"thumb\",this.get(\"orientation\")]}))}_handleAnimation(e){e&&this._disposers.push(e.events.on(\"stopped\",(()=>{this.setPrivateRaw(\"isBusy\",!1),this._thumbBusy=!1})))}_afterNew(){this._addOrientationClass(),super._afterNew();const e=this.startGrip,t=this.endGrip,i=this.thumb,r=this.get(\"background\");r&&this._disposers.push(r.events.on(\"click\",(e=>{this.setPrivateRaw(\"isBusy\",!0);const t=this._display.toLocal(e.point),r=this.width(),n=this.height(),s=this.get(\"orientation\");let a,o,l;a=\"vertical\"==s?(t.y-i.height()/2)/n:(t.x-i.width()/2)/r,\"vertical\"==s?(o=a*n,l=\"y\"):(o=a*r,l=\"x\");const h=this.get(\"animationDuration\",0);h>0?(this._thumbBusy=!0,this._handleAnimation(this.thumb.animate({key:l,to:o,duration:h,easing:this.get(\"animationEasing\")}))):(this.thumb.set(l,o),this._root.events.once(\"frameended\",(()=>{this.setPrivateRaw(\"isBusy\",!1)})))}))),this._disposers.push(i.events.on(\"dblclick\",(e=>{if(!l.isLocalEvent(e.originalEvent,this))return;const t=this.get(\"animationDuration\",0),i=this.get(\"animationEasing\");this.animate({key:\"start\",to:0,duration:t,easing:i}),this.animate({key:\"end\",to:1,duration:t,easing:i})}))),this._disposers.push(e.events.on(\"pointerdown\",(()=>{this.setPrivateRaw(\"isBusy\",!0),this._startDown=!0,this._gripDown=\"start\"}))),this._disposers.push(t.events.on(\"pointerdown\",(()=>{this.setPrivateRaw(\"isBusy\",!0),this._endDown=!0,this._gripDown=\"end\"}))),this._disposers.push(i.events.on(\"pointerdown\",(()=>{this.setPrivateRaw(\"isBusy\",!0),this._thumbDown=!0,this._gripDown=void 0}))),this._disposers.push(e.events.on(\"globalpointerup\",(()=>{this._startDown&&this.setPrivateRaw(\"isBusy\",!1),this._startDown=!1}))),this._disposers.push(t.events.on(\"globalpointerup\",(()=>{this._endDown&&this.setPrivateRaw(\"isBusy\",!1),this._endDown=!1}))),this._disposers.push(i.events.on(\"globalpointerup\",(()=>{this._thumbDown&&this.setPrivateRaw(\"isBusy\",!1),this._thumbDown=!1}))),this._disposers.push(e.on(\"x\",(()=>{this._updateThumb()}))),this._disposers.push(t.on(\"x\",(()=>{this._updateThumb()}))),this._disposers.push(e.on(\"y\",(()=>{this._updateThumb()}))),this._disposers.push(t.on(\"y\",(()=>{this._updateThumb()}))),this._disposers.push(i.events.on(\"positionchanged\",(()=>{this._updateGripsByThumb()}))),\"vertical\"==this.get(\"orientation\")?(e.set(\"x\",0),t.set(\"x\",0),this._disposers.push(i.adapters.add(\"y\",(e=>Math.max(Math.min(Number(e),this.height()-i.height()),0)))),this._disposers.push(i.adapters.add(\"x\",(e=>this.width()/2))),this._disposers.push(e.adapters.add(\"x\",(e=>this.width()/2))),this._disposers.push(t.adapters.add(\"x\",(e=>this.width()/2))),this._disposers.push(e.adapters.add(\"y\",(e=>Math.max(Math.min(Number(e),this.height()),0)))),this._disposers.push(t.adapters.add(\"y\",(e=>Math.max(Math.min(Number(e),this.height()),0))))):(e.set(\"y\",0),t.set(\"y\",0),this._disposers.push(i.adapters.add(\"x\",(e=>Math.max(Math.min(Number(e),this.width()-i.width()),0)))),this._disposers.push(i.adapters.add(\"y\",(e=>this.height()/2))),this._disposers.push(e.adapters.add(\"y\",(e=>this.height()/2))),this._disposers.push(t.adapters.add(\"y\",(e=>this.height()/2))),this._disposers.push(e.adapters.add(\"x\",(e=>Math.max(Math.min(Number(e),this.width()),0)))),this._disposers.push(t.adapters.add(\"x\",(e=>Math.max(Math.min(Number(e),this.width()),0)))))}_updateChildren(){super._updateChildren(),(this.isDirty(\"end\")||this.isDirty(\"start\")||this._sizeDirty)&&this.updateGrips()}_changed(){if(super._changed(),this.isDirty(\"start\")||this.isDirty(\"end\")){const e=\"rangechanged\";this.events.isEnabled(e)&&this.events.dispatch(e,{type:e,target:this,start:this.get(\"start\",0),end:this.get(\"end\",1),grip:this._gripDown})}}updateGrips(){const e=this.startGrip,t=this.endGrip,i=this.get(\"orientation\"),r=this.height(),n=this.width();\"vertical\"==i?(e.set(\"y\",r*this.get(\"start\",0)),t.set(\"y\",r*this.get(\"end\",1))):(e.set(\"x\",n*this.get(\"start\",0)),t.set(\"x\",n*this.get(\"end\",1)));const s=this.getPrivate(\"positionTextFunction\"),a=Math.round(100*this.get(\"start\",0)),o=Math.round(100*this.get(\"end\",0));let l,h;s?(l=s.call(this,this.get(\"start\",0)),h=s.call(this,this.get(\"end\",0))):(l=a+\"%\",h=o+\"%\"),e.set(\"ariaLabel\",this._t(\"From %1\",void 0,l)),e.set(\"ariaValueNow\",\"\"+a),e.set(\"ariaValueText\",a+\"%\"),e.set(\"ariaValueMin\",\"0\"),e.set(\"ariaValueMax\",\"100\"),t.set(\"ariaLabel\",this._t(\"To %1\",void 0,h)),t.set(\"ariaValueNow\",\"\"+o),t.set(\"ariaValueText\",o+\"%\"),t.set(\"ariaValueMin\",\"0\"),t.set(\"ariaValueMax\",\"100\")}_updateThumb(){const e=this.thumb,t=this.startGrip,i=this.endGrip,r=this.height(),n=this.width();let s=t.x(),a=i.x(),l=t.y(),h=i.y(),u=0,c=1;\"vertical\"==this.get(\"orientation\")?o.isNumber(l)&&o.isNumber(h)&&(this._thumbBusy||e.isDragging()||(e.set(\"height\",h-l),e.set(\"y\",l)),u=l/r,c=h/r):o.isNumber(s)&&o.isNumber(a)&&(this._thumbBusy||e.isDragging()||(e.set(\"width\",a-s),e.set(\"x\",s)),u=s/n,c=a/n),!this.getPrivate(\"isBusy\")||this.get(\"start\")==u&&this.get(\"end\")==c||(this.set(\"start\",u),this.set(\"end\",c));const d=this.getPrivate(\"positionTextFunction\"),p=Math.round(100*this.get(\"start\",0)),f=Math.round(100*this.get(\"end\",0));let g,m;d?(g=d.call(this,this.get(\"start\",0)),m=d.call(this,this.get(\"end\",0))):(g=p+\"%\",m=f+\"%\"),e.set(\"ariaLabel\",this._t(\"From %1 to %2\",void 0,g,m)),e.set(\"ariaValueNow\",\"\"+p),e.set(\"ariaValueText\",p+\"%\")}_updateGripsByThumb(){const e=this.thumb,t=this.startGrip,i=this.endGrip;if(\"vertical\"==this.get(\"orientation\")){const r=e.height();t.set(\"y\",e.y()),i.set(\"y\",e.y()+r)}else{const r=e.width();t.set(\"x\",e.x()),i.set(\"x\",e.x()+r)}}}Object.defineProperty(h,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Scrollbar\"}),Object.defineProperty(h,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:n.W.classNames.concat([h.className])})},5829:function(e,t,i){\"use strict\";i.d(t,{j:function(){return l}});var r=i(1337),n=i(8777),s=i(7144),a=i(6245),o=i(5071);class l extends r.k{constructor(){super(...arguments),Object.defineProperty(this,\"seriesContainer\",{enumerable:!0,configurable:!0,writable:!0,value:n.W.new(this._root,{width:a.AQ,height:a.AQ,isMeasured:!1})}),Object.defineProperty(this,\"series\",{enumerable:!0,configurable:!0,writable:!0,value:new s.dn})}_afterNew(){super._afterNew(),this._disposers.push(this.series);const e=this.seriesContainer.children;this._disposers.push(this.series.events.onAll((t=>{if(\"clear\"===t.type){o.each(t.oldValues,(e=>{this._removeSeries(e)}));const e=this.get(\"colors\");e&&e.reset()}else if(\"push\"===t.type)e.moveValue(t.newValue),this._processSeries(t.newValue);else if(\"setIndex\"===t.type)e.setIndex(t.index,t.newValue),this._processSeries(t.newValue);else if(\"insertIndex\"===t.type)e.insertIndex(t.index,t.newValue),this._processSeries(t.newValue);else if(\"removeIndex\"===t.type)this._removeSeries(t.oldValue);else{if(\"moveIndex\"!==t.type)throw new Error(\"Unknown IListEvent type\");e.moveValue(t.value,t.newIndex),this._processSeries(t.value)}})))}_processSeries(e){e.chart=this,e._placeBulletsContainer(this)}_removeSeries(e){e.isDisposed()||(this.seriesContainer.children.removeValue(e),e._removeBulletsContainer())}}Object.defineProperty(l,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"SerialChart\"}),Object.defineProperty(l,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.k.classNames.concat([l.className])})},3399:function(e,t,i){\"use strict\";i.d(t,{F:function(){return f}});var r=i(7582),n=i(9361),s=i(7144),a=i(1112),o=i(6490),l=i(6245),h=i(5071),u=i(5040),c=i(1926),d=i(8777),p=i(962);class f extends n.w{constructor(){super(...arguments),Object.defineProperty(this,\"_aggregatesCalculated\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_selectionAggregatesCalculated\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_dataProcessed\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_psi\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_pei\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"chart\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"bullets\",{enumerable:!0,configurable:!0,writable:!0,value:new s.aV}),Object.defineProperty(this,\"bulletsContainer\",{enumerable:!0,configurable:!0,writable:!0,value:d.W.new(this._root,{width:l.AQ,height:l.AQ,position:\"absolute\"})})}_afterNew(){this.valueFields.push(\"value\",\"customValue\"),super._afterNew(),this.setPrivate(\"customData\",{}),this._disposers.push(this.bullets.events.onAll((e=>{if(\"clear\"===e.type)this._handleBullets(this.dataItems);else if(\"push\"===e.type)this._handleBullets(this.dataItems);else if(\"setIndex\"===e.type)this._handleBullets(this.dataItems);else if(\"insertIndex\"===e.type)this._handleBullets(this.dataItems);else if(\"removeIndex\"===e.type)this._handleBullets(this.dataItems);else{if(\"moveIndex\"!==e.type)throw new Error(\"Unknown IListEvent type\");this._handleBullets(this.dataItems)}})))}_dispose(){this.bulletsContainer.dispose(),super._dispose()}startIndex(){let e=this.dataItems.length;return Math.min(this.getPrivate(\"startIndex\",0),e)}endIndex(){let e=this.dataItems.length;return Math.min(this.getPrivate(\"endIndex\",e),e)}_handleBullets(e){h.each(e,(e=>{const t=e.bullets;t&&(h.each(t,(e=>{e.dispose()})),e.bullets=void 0)})),this.markDirtyValues()}getDataItemById(e){return h.find(this.dataItems,(t=>t.get(\"id\")==e))}_makeBullets(e){this._shouldMakeBullet(e)&&(e.bullets=[],this.bullets.each((t=>{this._makeBullet(e,t)})))}_shouldMakeBullet(e){return!0}_makeBullet(e,t,i){const r=t(this._root,this,e);return r&&(r._index=i,this._makeBulletReal(e,r)),r}_makeBulletReal(e,t){let i=t.get(\"sprite\");i&&(i._setDataItem(e),i.setRaw(\"position\",\"absolute\"),this.bulletsContainer.children.push(i)),t.series=this,e.bullets.push(t)}addBullet(e,t){e.bullets||(e.bullets=[]),t&&this._makeBulletReal(e,t)}_clearDirty(){super._clearDirty(),this._aggregatesCalculated=!1,this._selectionAggregatesCalculated=!1}_prepareChildren(){super._prepareChildren();let e=this.startIndex(),t=this.endIndex();if(this.isDirty(\"name\")&&this.updateLegendValue(),this.isDirty(\"heatRules\")&&(this._valuesDirty=!0),this.isPrivateDirty(\"baseValueSeries\")){const e=this.getPrivate(\"baseValueSeries\");e&&this._disposers.push(e.onPrivate(\"startIndex\",(()=>{this.markDirtyValues()})))}if(this.get(\"calculateAggregates\")&&(this._valuesDirty&&!this._dataProcessed&&(this._aggregatesCalculated||(this._calculateAggregates(0,this.dataItems.length),this._aggregatesCalculated=!0,0!=e&&(this._psi=void 0))),this._psi==e&&this._pei==t||this._selectionAggregatesCalculated||(0===e&&t===this.dataItems.length&&this._aggregatesCalculated||this._calculateAggregates(e,t),this._selectionAggregatesCalculated=!0)),this.isDirty(\"tooltip\")){let e=this.get(\"tooltip\");e&&(e.hide(0),e.set(\"tooltipTarget\",this))}if(this.isDirty(\"fill\")||this.isDirty(\"stroke\")){let e;const t=this.get(\"legendDataItem\");if(t&&(e=t.get(\"markerRectangle\"),e&&this.isVisible())){if(this.isDirty(\"stroke\")){let t=this.get(\"stroke\");e.set(\"stroke\",t)}if(this.isDirty(\"fill\")){let t=this.get(\"fill\");e.set(\"fill\",t)}}this.updateLegendMarker(void 0)}if(this.bullets.length>0){let e=this.startIndex(),t=this.endIndex();t<this.dataItems.length&&t++;for(let i=e;i<t;i++){let e=this.dataItems[i];e.bullets||this._makeBullets(e)}}}_calculateAggregates(e,t){let i=this._valueFields;if(!i)throw new Error(\"No value fields are set for the series.\");const r={},n={},s={},a={},o={},l={},u={},c={},d={};h.each(i,(e=>{r[e]=0,n[e]=0,s[e]=0})),h.each(i,(i=>{let h=i+\"Change\",p=i+\"ChangePercent\",f=i+\"ChangePrevious\",g=i+\"ChangePreviousPercent\",m=i+\"ChangeSelection\",b=i+\"ChangeSelectionPercent\",_=\"valueY\";\"valueX\"!=i&&\"openValueX\"!=i&&\"lowValueX\"!=i&&\"highValueX\"!=i||(_=\"valueX\");const v=this.getPrivate(\"baseValueSeries\");for(let y=e;y<t;y++){const t=this.dataItems[y];let w=t.get(i);null!=w&&(s[i]++,r[i]+=w,n[i]+=Math.abs(w),c[i]=r[i]/s[i],(a[i]>w||null==a[i])&&(a[i]=w),(o[i]<w||null==o[i])&&(o[i]=w),u[i]=w,null==l[i]&&(l[i]=w,d[i]=w,v&&(l[_]=v._getBase(_))),0===e&&(t.setRaw(h,w-l[_]),t.setRaw(p,(w-l[_])/l[_]*100)),t.setRaw(f,w-d[_]),t.setRaw(g,(w-d[_])/d[_]*100),t.setRaw(m,w-l[_]),t.setRaw(b,(w-l[_])/l[_]*100),d[i]=w)}})),h.each(i,(e=>{this.setPrivate(e+\"AverageSelection\",c[e]),this.setPrivate(e+\"CountSelection\",s[e]),this.setPrivate(e+\"SumSelection\",r[e]),this.setPrivate(e+\"AbsoluteSumSelection\",n[e]),this.setPrivate(e+\"LowSelection\",a[e]),this.setPrivate(e+\"HighSelection\",o[e]),this.setPrivate(e+\"OpenSelection\",l[e]),this.setPrivate(e+\"CloseSelection\",u[e])})),0===e&&t===this.dataItems.length&&h.each(i,(e=>{this.setPrivate(e+\"Average\",c[e]),this.setPrivate(e+\"Count\",s[e]),this.setPrivate(e+\"Sum\",r[e]),this.setPrivate(e+\"AbsoluteSum\",n[e]),this.setPrivate(e+\"Low\",a[e]),this.setPrivate(e+\"High\",o[e]),this.setPrivate(e+\"Open\",l[e]),this.setPrivate(e+\"Close\",u[e])}))}_updateChildren(){super._updateChildren(),this._psi=this.startIndex(),this._pei=this.endIndex(),this.isDirty(\"visible\")&&this.bulletsContainer.set(\"visible\",this.get(\"visible\"));const e=this.get(\"heatRules\");if(this._valuesDirty&&e&&e.length>0&&h.each(e,(e=>{const t=e.minValue||this.getPrivate(e.dataField+\"Low\")||0,i=e.maxValue||this.getPrivate(e.dataField+\"High\")||0;h.each(e.target._entities,(r=>{const n=r.dataItem.get(e.dataField);if(u.isNumber(n))if(e.customFunction)e.customFunction.call(this,r,t,i,n);else{let s,h;s=e.logarithmic?(Math.log(n)*Math.LOG10E-Math.log(t)*Math.LOG10E)/(Math.log(i)*Math.LOG10E-Math.log(t)*Math.LOG10E):(n-t)/(i-t),!u.isNumber(n)||u.isNumber(s)&&Math.abs(s)!=1/0||(s=.5),u.isNumber(e.min)?h=e.min+(e.max-e.min)*s:e.min instanceof a.Il?h=a.Il.interpolate(s,e.min,e.max):e.min instanceof l.gG&&(h=(0,o.Wn)(s,e.min,e.max)),r.set(e.key,h)}else e.neutral&&r.set(e.key,e.neutral)}))})),this.get(\"visible\")){let e=this.dataItems.length,t=this.startIndex(),i=this.endIndex();i<e&&i++,t>0&&t--;for(let e=0;e<t;e++)this._hideBullets(this.dataItems[e]);for(let e=t;e<i;e++)this._positionBullets(this.dataItems[e]);for(let t=i;t<e;t++)this._hideBullets(this.dataItems[t])}}_positionBullets(e){e.bullets&&h.each(e.bullets,(e=>{this._positionBullet(e);const t=e.get(\"sprite\");e.get(\"dynamic\")&&(t&&(t._markDirtyKey(\"fill\"),t.markDirtySize()),t instanceof d.W&&t.walkChildren((e=>{e._markDirtyKey(\"fill\"),e.markDirtySize(),e instanceof p._&&e.text.markDirtyText()}))),t instanceof p._&&t.get(\"populateText\")&&t.text.markDirtyText()}))}_hideBullets(e){e.bullets&&h.each(e.bullets,(e=>{let t=e.get(\"sprite\");t&&t.setPrivate(\"visible\",!1)}))}_positionBullet(e){}_placeBulletsContainer(e){e.bulletsContainer.children.moveValue(this.bulletsContainer)}_removeBulletsContainer(){const e=this.bulletsContainer;e.parent&&e.parent.children.removeValue(e)}disposeDataItem(e){const t=e.bullets;t&&h.each(t,(e=>{e.dispose()}))}_getItemReaderLabel(){return\"\"}showDataItem(e,t){const i=Object.create(null,{showDataItem:{get:()=>super.showDataItem}});return(0,r.mG)(this,void 0,void 0,(function*(){const r=[i.showDataItem.call(this,e,t)],n=e.bullets;n&&h.each(n,(e=>{const i=e.get(\"sprite\");i&&r.push(i.show(t))})),yield Promise.all(r)}))}hideDataItem(e,t){const i=Object.create(null,{hideDataItem:{get:()=>super.hideDataItem}});return(0,r.mG)(this,void 0,void 0,(function*(){const r=[i.hideDataItem.call(this,e,t)],n=e.bullets;n&&h.each(n,(e=>{const i=e.get(\"sprite\");i&&r.push(i.hide(t))})),yield Promise.all(r)}))}_sequencedShowHide(e,t){return(0,r.mG)(this,void 0,void 0,(function*(){if(this.get(\"sequencedInterpolation\"))if(u.isNumber(t)||(t=this.get(\"interpolationDuration\",0)),t>0){const i=this.startIndex(),n=this.endIndex();yield Promise.all(h.map(this.dataItems,((s,a)=>(0,r.mG)(this,void 0,void 0,(function*(){let r=t||0;(a<i-10||a>n+10)&&(r=0);let o=this.get(\"sequencedDelay\",0)+r/(n-i);yield c.sleep(o*(a-i)),e?yield this.showDataItem(s,r):yield this.hideDataItem(s,r)})))))}else yield Promise.all(h.map(this.dataItems,(t=>e?this.showDataItem(t,0):this.hideDataItem(t,0))))}))}updateLegendValue(e){if(e){const t=e.get(\"legendDataItem\");if(t){const i=t.get(\"valueLabel\");if(i){const t=i.text;let r=\"\";i._setDataItem(e),r=this.get(\"legendValueText\",t.get(\"text\",\"\")),i.set(\"text\",r),t.markDirtyText()}const r=t.get(\"label\");if(r){const t=r.text;let i=\"\";r._setDataItem(e),i=this.get(\"legendLabelText\",t.get(\"text\",\"\")),r.set(\"text\",i),t.markDirtyText()}}}}updateLegendMarker(e){}_onHide(){super._onHide();const e=this.getTooltip();e&&e.hide()}hoverDataItem(e){}unhoverDataItem(e){}_getBase(e){const t=this.dataItems[this.startIndex()];return t?t.get(e):0}}Object.defineProperty(f,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Series\"}),Object.defineProperty(f,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:n.w.classNames.concat([f.className])})},5863:function(e,t,i){\"use strict\";i.d(t,{p:function(){return l}});var r=i(1479),n=i(5040),s=i(6245),a=i(832),o=i(751);class l extends r.T{constructor(){super(...arguments),Object.defineProperty(this,\"ix\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"iy\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_generator\",{enumerable:!0,configurable:!0,writable:!0,value:(0,a.Z)()})}_getTooltipPoint(){let e=this.get(\"tooltipX\"),t=this.get(\"tooltipY\"),i=0,r=0;n.isNumber(e)&&(i=e),n.isNumber(t)&&(r=t);let a=this.get(\"radius\",0),o=this.get(\"innerRadius\",0);return a+=this.get(\"dRadius\",0),o+=this.get(\"dInnerRadius\",0),o<0&&(o=a+o),e instanceof s.gG&&(i=this.ix*(o+(a-o)*e.value)),t instanceof s.gG&&(r=this.iy*(o+(a-o)*t.value)),this.get(\"arc\")>=360&&0==o&&(i=0,r=0),{x:i,y:r}}_beforeChanged(){super._beforeChanged(),(this.isDirty(\"radius\")||this.isDirty(\"arc\")||this.isDirty(\"innerRadius\")||this.isDirty(\"startAngle\")||this.isDirty(\"dRadius\")||this.isDirty(\"dInnerRadius\")||this.isDirty(\"cornerRadius\")||this.isDirty(\"shiftRadius\"))&&(this._clear=!0)}_changed(){if(super._changed(),this._clear){let e=this.get(\"startAngle\",0),t=this.get(\"arc\",0);const i=this._generator;t<0&&(e+=t,t*=-1),t>.1&&i.cornerRadius(this.get(\"cornerRadius\",0)),i.context(this._display);let r=this.get(\"radius\",0),n=this.get(\"innerRadius\",0);r+=this.get(\"dRadius\",0),n+=this.get(\"dInnerRadius\",0),n<0&&(n=r+n),i({innerRadius:n,outerRadius:r,startAngle:(e+90)*o.RADIANS,endAngle:(e+t+90)*o.RADIANS});let s=e+t/2;this.ix=o.cos(s),this.iy=o.sin(s);const a=this.get(\"shiftRadius\",0);this.setRaw(\"dx\",this.ix*a),this.setRaw(\"dy\",this.iy*a),this.markDirtyPosition()}}}Object.defineProperty(l,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Slice\"}),Object.defineProperty(l,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.T.classNames.concat([l.className])})},4596:function(e,t,i){\"use strict\";i.d(t,{j:function(){return m}});var r=i(7582),n=i(6331),s=i(5769),a=i(6245),o=i(9770),l=i(7449),h=i(6490),u=i(7652),c=i(5071),d=i(5040),p=i(256),f=i(751);class g extends o.p{constructor(e){super(),Object.defineProperty(this,\"_sprite\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_rendererDisposers\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_dispatchParents\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),this._sprite=e}_makePointerEvent(e,t){return{type:e,originalEvent:t.event,point:t.point,simulated:t.simulated,native:t.native,target:this._sprite}}_onRenderer(e,t){this._sprite.set(\"interactive\",!0),this._sprite._display.interactive=!0;let i=this._rendererDisposers[e];if(void 0===i){const r=this._sprite._display.on(e,(e=>{t.call(this,e)}));i=this._rendererDisposers[e]=new l.DM((()=>{delete this._rendererDisposers[e],r.dispose()}))}return i.increment()}_on(e,t,i,r,n,s){const a=super._on(e,t,i,r,n,s),o=g.RENDERER_EVENTS[t];return void 0!==o&&(a.disposer=new l.FV([a.disposer,this._onRenderer(t,o)])),a}stopParentDispatch(){this._dispatchParents=!1}dispatchParents(e,t){const i=this._dispatchParents;this._dispatchParents=!0;try{this.dispatch(e,t),this._dispatchParents&&this._sprite.parent&&this._sprite.parent.events.dispatchParents(e,t)}finally{this._dispatchParents=i}}}Object.defineProperty(g,\"RENDERER_EVENTS\",{enumerable:!0,configurable:!0,writable:!0,value:{click:function(e){this.isEnabled(\"click\")&&!this._sprite.isDragging()&&this._sprite._hasDown()&&!this._sprite._hasMoved(this._makePointerEvent(\"click\",e))&&this.dispatch(\"click\",this._makePointerEvent(\"click\",e))},rightclick:function(e){this.isEnabled(\"rightclick\")&&this.dispatch(\"rightclick\",this._makePointerEvent(\"rightclick\",e))},middleclick:function(e){this.isEnabled(\"middleclick\")&&this.dispatch(\"middleclick\",this._makePointerEvent(\"middleclick\",e))},dblclick:function(e){this.dispatchParents(\"dblclick\",this._makePointerEvent(\"dblclick\",e))},pointerover:function(e){const t=this._sprite;let i=!0;if(t.getPrivate(\"trustBounds\")){t._getBounds();const r=t.globalBounds();f.inBounds(e.point,r)||(i=!1,t._root._renderer.removeHovering(t._display))}i&&this.isEnabled(\"pointerover\")&&this.dispatch(\"pointerover\",this._makePointerEvent(\"pointerover\",e))},pointerout:function(e){this.isEnabled(\"pointerout\")&&this.dispatch(\"pointerout\",this._makePointerEvent(\"pointerout\",e))},pointerdown:function(e){this.dispatchParents(\"pointerdown\",this._makePointerEvent(\"pointerdown\",e))},pointerup:function(e){this.isEnabled(\"pointerup\")&&this.dispatch(\"pointerup\",this._makePointerEvent(\"pointerup\",e))},globalpointerup:function(e){this.isEnabled(\"globalpointerup\")&&this.dispatch(\"globalpointerup\",this._makePointerEvent(\"globalpointerup\",e))},globalpointermove:function(e){this.isEnabled(\"globalpointermove\")&&this.dispatch(\"globalpointermove\",this._makePointerEvent(\"globalpointermove\",e))},wheel:function(e){this.dispatchParents(\"wheel\",{type:\"wheel\",target:this._sprite,originalEvent:e.event,point:e.point})}}});class m extends n.JH{constructor(){super(...arguments),Object.defineProperty(this,\"_adjustedLocalBounds\",{enumerable:!0,configurable:!0,writable:!0,value:{left:0,right:0,top:0,bottom:0}}),Object.defineProperty(this,\"_localBounds\",{enumerable:!0,configurable:!0,writable:!0,value:{left:0,right:0,top:0,bottom:0}}),Object.defineProperty(this,\"_parent\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_dataItem\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_templateField\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_sizeDirty\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_isDragging\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_dragEvent\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_dragPoint\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_isHidden\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_isShowing\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_isHiding\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_isDown\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_downPoint\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_downPoints\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_toggleDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_dragDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltipDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_hoverDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_focusDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltipMoveDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tooltipPointerDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_statesHandled\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_afterNew(){this.setPrivateRaw(\"visible\",!0),super._afterNew()}_markDirtyKey(e){super._markDirtyKey(e),\"x\"!=e&&\"y\"!=e&&\"dx\"!=e&&\"dy\"!=e||(this.markDirtyBounds(),this._addPercentagePositionChildren(),this.markDirtyPosition())}_markDirtyPrivateKey(e){super._markDirtyPrivateKey(e),\"x\"!=e&&\"y\"!=e||this.markDirtyPosition()}_removeTemplateField(){this._templateField&&this._templateField._removeObjectTemplate(this)}_createEvents(){return new g(this)}_processTemplateField(){let e;const t=this.get(\"templateField\");if(t){const i=this.dataItem;if(i){const r=i.dataContext;r&&(e=r[t],e instanceof s.YS||!e||(e=s.YS.new(e)))}}this._templateField!==e&&(this._removeTemplateField(),this._templateField=e,e&&e._setObjectTemplate(this),this._applyTemplates())}_setDataItem(e){const t=this._dataItem;this._dataItem=e,this._processTemplateField();const i=\"dataitemchanged\";e!=t&&this.events.isEnabled(i)&&this.events.dispatch(i,{type:i,target:this,oldDataItem:t,newDataItem:e})}set dataItem(e){this._setDataItem(e)}get dataItem(){if(this._dataItem)return this._dataItem;{let e=this._parent;for(;e;){if(e._dataItem)return e._dataItem;e=e._parent}}}_addPercentageSizeChildren(){let e=this.parent;e&&(this.get(\"width\")instanceof a.gG||this.get(\"height\")instanceof a.gG?c.pushOne(e._percentageSizeChildren,this):c.removeFirst(e._percentageSizeChildren,this))}_addPercentagePositionChildren(){let e=this.parent;e&&(this.get(\"x\")instanceof a.gG||this.get(\"y\")instanceof a.gG?c.pushOne(e._percentagePositionChildren,this):c.removeFirst(e._percentagePositionChildren,this))}markDirtyPosition(){this._root._addDirtyPosition(this)}updatePivotPoint(){const e=this._localBounds;if(e){const t=this.get(\"centerX\");null!=t&&(this._display.pivot.x=e.left+u.relativeToValue(t,e.right-e.left));const i=this.get(\"centerY\");null!=i&&(this._display.pivot.y=e.top+u.relativeToValue(i,e.bottom-e.top))}}_beforeChanged(){if(super._beforeChanged(),this._handleStates(),this.isDirty(\"tooltip\")){const e=this._prevSettings.tooltip;e&&e.dispose()}if((this.isDirty(\"layer\")||this.isDirty(\"layerMargin\"))&&(this._display.setLayer(this.get(\"layer\"),this.get(\"layerMargin\")),this.markDirtyLayer()),this.isDirty(\"tooltipPosition\")){const e=this._tooltipMoveDp;e&&(e.dispose(),this._tooltipMoveDp=void 0);const t=this._tooltipPointerDp;t&&(t.dispose(),this._tooltipPointerDp=void 0),\"pointer\"==this.get(\"tooltipPosition\")&&(this.isHover()&&(this._tooltipMoveDp=this.events.on(\"globalpointermove\",(e=>{this.showTooltip(e.point)}))),this._tooltipPointerDp=new l.FV([this.events.on(\"pointerover\",(()=>{this._tooltipMoveDp=this.events.on(\"globalpointermove\",(e=>{this.showTooltip(e.point)}))})),this.events.on(\"pointerout\",(()=>{const e=this._tooltipMoveDp;e&&(e.dispose(),this._tooltipMoveDp=void 0)}))]))}}_handleStates(){this._statesHandled||(this.isDirty(\"active\")&&(this.get(\"active\")?(this.states.applyAnimate(\"active\"),this.set(\"ariaChecked\",!0)):(this.isHidden()||this.states.applyAnimate(\"default\"),this.set(\"ariaChecked\",!1)),this.markDirtyAccessibility()),this.isDirty(\"disabled\")&&(this.get(\"disabled\")?(this.states.applyAnimate(\"disabled\"),this.set(\"ariaChecked\",!1)):(this.isHidden()||this.states.applyAnimate(\"default\"),this.set(\"ariaChecked\",!0)),this.markDirtyAccessibility()),this._statesHandled=!0)}_changed(){super._changed();const e=this._display,t=this.events;if(this.isDirty(\"draggable\")){const i=this.get(\"draggable\");i?(this.set(\"interactive\",!0),this._dragDp=new l.FV([t.on(\"pointerdown\",(e=>{this.dragStart(e)})),t.on(\"globalpointermove\",(e=>{this.dragMove(e)})),t.on(\"globalpointerup\",(e=>{this.dragStop(e)}))])):this._dragDp&&(this._dragDp.dispose(),this._dragDp=void 0),e.cancelTouch=!!i}if(this.isDirty(\"tooltipText\")||this.isDirty(\"tooltipHTML\")||this.isDirty(\"showTooltipOn\")){const e=this.get(\"tooltipText\"),i=this.get(\"tooltipHTML\"),r=this.get(\"showTooltipOn\",\"hover\");this._tooltipDp&&(this._tooltipDp.dispose(),this._tooltipDp=void 0),(e||i)&&(\"click\"==r?(this._tooltipDp=new l.FV([t.on(\"click\",(()=>{this.setTimeout((()=>this.showTooltip()),10)})),u.addEventListener(document,\"click\",(e=>{this.hideTooltip()}))]),this._disposers.push(this._tooltipDp)):\"always\"==r||(this._tooltipDp=new l.FV([t.on(\"pointerover\",(()=>{this.showTooltip()})),t.on(\"pointerout\",(()=>{this.hideTooltip()}))]),this._disposers.push(this._tooltipDp)))}if(this.isDirty(\"toggleKey\")){let e=this.get(\"toggleKey\");e&&\"none\"!=e?this._toggleDp=t.on(\"click\",(()=>{this._isDragging||this.set(e,!this.get(e))})):this._toggleDp&&(this._toggleDp.dispose(),this._toggleDp=void 0)}if(this.isDirty(\"opacity\")&&(e.alpha=Math.max(0,this.get(\"opacity\",1)),this.get(\"focusable\")&&this.markDirtyAccessibility()),this.isDirty(\"rotation\")&&(this.markDirtyBounds(),e.angle=this.get(\"rotation\",0)),this.isDirty(\"scale\")&&(this.markDirtyBounds(),e.scale=this.get(\"scale\",0)),(this.isDirty(\"centerX\")||this.isDirty(\"centerY\"))&&(this.markDirtyBounds(),this.updatePivotPoint()),(this.isDirty(\"visible\")||this.isPrivateDirty(\"visible\")||this.isDirty(\"forceHidden\"))&&(this.get(\"visible\")&&this.getPrivate(\"visible\")&&!this.get(\"forceHidden\")?e.visible=!0:(e.visible=!1,this.hideTooltip()),this.markDirtyBounds(),this.get(\"focusable\")&&this.markDirtyAccessibility()),this.isDirty(\"width\")||this.isDirty(\"height\")){this.markDirtyBounds(),this._addPercentageSizeChildren();const e=this.parent;e&&(this.isDirty(\"width\")&&this.get(\"width\")instanceof a.gG||this.isDirty(\"height\")&&this.get(\"height\")instanceof a.gG)&&(e.markDirty(),e._prevWidth=0),this._sizeDirty=!0}if((this.isDirty(\"maxWidth\")||this.isDirty(\"maxHeight\")||this.isPrivateDirty(\"width\")||this.isPrivateDirty(\"height\")||this.isDirty(\"minWidth\")||this.isDirty(\"minHeight\")||this.isPrivateDirty(\"maxWidth\")||this.isPrivateDirty(\"maxHeight\")||this.isPrivateDirty(\"minWidth\")||this.isPrivateDirty(\"minHeight\"))&&(this.markDirtyBounds(),this._sizeDirty=!0),this._sizeDirty&&this._updateSize(),this.isDirty(\"wheelable\")){const t=this.get(\"wheelable\");t&&this.set(\"interactive\",!0),e.wheelable=!!t}(this.isDirty(\"tabindexOrder\")||this.isDirty(\"focusableGroup\"))&&(this.get(\"focusable\")?this._root._registerTabindexOrder(this):this._root._unregisterTabindexOrder(this)),this.isDirty(\"filter\")&&(e.filter=this.get(\"filter\"));let i=this.get(\"filter\",\"\");if(this.isDirty(\"blur\")){const e=this.get(\"blur\",0);0!=e&&(i+=\" blur(\"+e+\"px)\")}if(this.isDirty(\"saturate\")){const e=this.get(\"saturate\",1);1!=e&&(i+=\" saturate(\"+e+\")\")}if(this.isDirty(\"brightness\")){const e=this.get(\"brightness\",1);1!=e&&(i+=\" brightness(\"+e+\")\")}if(this.isDirty(\"contrast\")){const e=this.get(\"contrast\",1);1!=e&&(i+=\" contrast(\"+e+\")\")}if(this.isDirty(\"sepia\")){const e=this.get(\"sepia\",0);0!=e&&(i+=\" sepia(\"+e+\")\")}if(this.isDirty(\"hue\")){const e=this.get(\"hue\",0);0!=e&&(i+=\" hue-rotate(\"+e+\"deg)\")}if(this.isDirty(\"invert\")){const e=this.get(\"invert\",0);0!=e&&(i+=\" invert(\"+e+\")\")}if(i&&(e.filter=i),this.isDirty(\"cursorOverStyle\")&&(e.cursorOverStyle=this.get(\"cursorOverStyle\")),this.isDirty(\"hoverOnFocus\")&&(this.get(\"hoverOnFocus\")?this._focusDp=new l.FV([t.on(\"focus\",(()=>{this.showTooltip()})),t.on(\"blur\",(()=>{this.hideTooltip()}))]):this._focusDp&&(this._focusDp.dispose(),this._focusDp=void 0)),this.isDirty(\"focusable\")&&(this.get(\"focusable\")?this._root._registerTabindexOrder(this):this._root._unregisterTabindexOrder(this),this.markDirtyAccessibility()),this.isPrivateDirty(\"focusable\")&&this.markDirtyAccessibility(),(this.isDirty(\"role\")||this.isDirty(\"ariaLive\")||this.isDirty(\"ariaChecked\")||this.isDirty(\"ariaHidden\")||this.isDirty(\"ariaOrientation\")||this.isDirty(\"ariaValueNow\")||this.isDirty(\"ariaValueMin\")||this.isDirty(\"ariaValueMax\")||this.isDirty(\"ariaValueText\")||this.isDirty(\"ariaLabel\")||this.isDirty(\"ariaControls\"))&&this.markDirtyAccessibility(),this.isDirty(\"exportable\")&&(e.exportable=this.get(\"exportable\")),this.isDirty(\"interactive\")){const e=this.events;this.get(\"interactive\")?this._hoverDp=new l.FV([e.on(\"click\",(e=>{u.isTouchEvent(e.originalEvent)&&(this.getPrivate(\"touchHovering\")||this.setTimeout((()=>{this._handleOver(),(this.get(\"tooltipText\")||this.get(\"tooltipHTML\"))&&this.showTooltip(),this.setPrivateRaw(\"touchHovering\",!0),this.events.dispatch(\"pointerover\",{type:\"pointerover\",target:e.target,originalEvent:e.originalEvent,point:e.point,simulated:e.simulated})}),10))})),e.on(\"globalpointerup\",(e=>{u.isTouchEvent(e.originalEvent)&&this.getPrivate(\"touchHovering\")&&(this._handleOut(),(this.get(\"tooltipText\")||this.get(\"tooltipHTML\"))&&this.hideTooltip(),this.setPrivateRaw(\"touchHovering\",!1),this.events.dispatch(\"pointerout\",{type:\"pointerout\",target:e.target,originalEvent:e.originalEvent,point:e.point,simulated:e.simulated})),this._isDown&&this._handleUp(e)})),e.on(\"pointerover\",(()=>{this._handleOver()})),e.on(\"pointerout\",(()=>{this._handleOut()})),e.on(\"pointerdown\",(e=>{this._handleDown(e)}))]):(this._display.interactive=!1,this._hoverDp&&(this._hoverDp.dispose(),this._hoverDp=void 0))}this.isDirty(\"forceInactive\")&&(this._display.inactive=this.get(\"forceInactive\",null)),\"always\"==this.get(\"showTooltipOn\")&&this._display.visible&&this.showTooltip()}dragStart(e){this._dragEvent=e,this.events.stopParentDispatch()}dragStop(e){if(this._dragEvent=void 0,this._dragPoint=void 0,this.events.stopParentDispatch(),this._isDragging){this._isDragging=!1;const t=\"dragstop\";this.events.isEnabled(t)&&this.events.dispatch(t,{type:t,target:this,originalEvent:e.originalEvent,point:e.point,simulated:e.simulated})}}_handleOver(){this.isHidden()||(this.get(\"active\")&&this.states.lookup(\"hoverActive\")?this.states.applyAnimate(\"hoverActive\"):this.get(\"disabled\")&&this.states.lookup(\"hoverDisabled\")?this.states.applyAnimate(\"hoverDisabled\"):this.states.applyAnimate(\"hover\"),this.get(\"draggable\")&&this._isDown&&this.states.lookup(\"down\")&&this.states.applyAnimate(\"down\"))}_handleOut(){this.isHidden()||(this.get(\"active\")&&this.states.lookup(\"active\")?this.states.applyAnimate(\"active\"):this.get(\"disabled\")&&this.states.lookup(\"disabled\")?this.states.applyAnimate(\"disabled\"):(this.states.lookup(\"hover\")||this.states.lookup(\"hoverActive\"))&&this.states.applyAnimate(\"default\"),this.get(\"draggable\")&&this._isDown&&this.states.lookup(\"down\")&&this.states.applyAnimate(\"down\"))}_handleUp(e){if(!this.isHidden()){this.get(\"active\")&&this.states.lookup(\"active\")?this.states.applyAnimate(\"active\"):this.get(\"disabled\")&&this.states.lookup(\"disabled\")?this.states.applyAnimate(\"disabled\"):this.states.lookup(\"down\")&&(this.isHover()?this.states.applyAnimate(\"hover\"):this.states.applyAnimate(\"default\")),this._downPoint=void 0;const t=u.getPointerId(e.originalEvent);delete this._downPoints[t],0==p.keys(this._downPoints).length&&(this._isDown=!1)}}_hasMoved(e){const t=u.getPointerId(e.originalEvent),i=this._downPoints[t];if(i){const t=Math.abs(i.x-e.point.x),r=Math.abs(i.y-e.point.y);return t>5||r>5}return!1}_hasDown(){return p.keys(this._downPoints).length>0}_handleDown(e){const t=this.parent;if(t&&!this.get(\"draggable\")&&t._handleDown(e),this.get(\"interactive\")&&!this.isHidden()){this.states.lookup(\"down\")&&this.states.applyAnimate(\"down\"),this._downPoint={x:e.point.x,y:e.point.y},this._isDown=!0;const t=u.getPointerId(e.originalEvent);this._downPoints[t]={x:e.point.x,y:e.point.y}}}dragMove(e){let t=this._dragEvent;if(t){if(t.simulated&&!e.simulated)return!0;let i=0,r=this.parent;for(;null!=r;)i+=r.get(\"rotation\",0),r=r.parent;let n=e.point.x-t.point.x,s=e.point.y-t.point.y;const a=this.events;if(t.simulated&&!this._isDragging){this._isDragging=!0,this._dragEvent=e,this._dragPoint={x:this.x(),y:this.y()};const t=\"dragstart\";a.isEnabled(t)&&a.dispatch(t,{type:t,target:this,originalEvent:e.originalEvent,point:e.point,simulated:e.simulated})}if(this._isDragging){let t=this._dragPoint;this.set(\"x\",t.x+n*f.cos(i)+s*f.sin(i)),this.set(\"y\",t.y+s*f.cos(i)-n*f.sin(i));const r=\"dragged\";a.isEnabled(r)&&a.dispatch(r,{type:r,target:this,originalEvent:e.originalEvent,point:e.point,simulated:e.simulated})}else if(Math.hypot(n,s)>5){this._isDragging=!0,this._dragEvent=e,this._dragPoint={x:this.x(),y:this.y()};const t=\"dragstart\";a.isEnabled(t)&&a.dispatch(t,{type:t,target:this,originalEvent:e.originalEvent,point:e.point,simulated:e.simulated})}}}_updateSize(){}_getBounds(){this._localBounds=this._display.getLocalBounds()}depth(){let e=this.parent,t=0;for(;;){if(!e)return t;++t,e=e.parent}}markDirtySize(){this._sizeDirty=!0,this.markDirty()}markDirtyBounds(){const e=this._display;if(this.get(\"isMeasured\")){this._root._addDirtyBounds(this),e.isMeasured=!0,e.invalidateBounds();const t=this.parent;t&&\"absolute\"!=this.get(\"position\")&&(null==t.get(\"width\")||null==t.get(\"height\")||t.get(\"layout\"))&&t.markDirtyBounds(),this.get(\"focusable\")&&this.isFocus()&&this.markDirtyAccessibility()}}markDirtyAccessibility(){this._root._invalidateAccessibility(this)}markDirtyLayer(){this._display.markDirtyLayer(!0)}markDirty(){super.markDirty(),this.markDirtyLayer()}_updateBounds(){const e=this._adjustedLocalBounds;let t;if(this.get(\"visible\")&&this.getPrivate(\"visible\")&&!this.get(\"forceHidden\")?(this._getBounds(),this._fixMinBounds(this._localBounds),this.updatePivotPoint(),this._adjustedLocalBounds=this._display.getAdjustedBounds(this._localBounds),t=this._adjustedLocalBounds):(t={left:0,right:0,top:0,bottom:0},this._localBounds=t,this._adjustedLocalBounds=t),!e||e.left!==t.left||e.top!==t.top||e.right!==t.right||e.bottom!==t.bottom){const e=\"boundschanged\";this.events.isEnabled(e)&&this.events.dispatch(e,{type:e,target:this}),this.parent&&(this.parent.markDirty(),this.parent.markDirtyBounds())}}_fixMinBounds(e){let t=this.get(\"minWidth\",this.getPrivate(\"minWidth\")),i=this.get(\"minHeight\",this.getPrivate(\"minHeight\"));d.isNumber(t)&&e.right-e.left<t&&(e.right=e.left+t),d.isNumber(i)&&e.bottom-e.top<i&&(e.bottom=e.top+i);let r=this.getPrivate(\"width\"),n=this.getPrivate(\"height\");d.isNumber(r)&&(r>0?e.right=e.left+r:e.left=e.right+r),d.isNumber(n)&&(n>0?e.bottom=e.top+n:e.top=e.bottom+n)}_removeParent(e){e&&(e.children.removeValue(this),c.removeFirst(e._percentageSizeChildren,this),c.removeFirst(e._percentagePositionChildren,this))}_clearDirty(){super._clearDirty(),this._sizeDirty=!1,this._statesHandled=!1}hover(){this.showTooltip(),this._handleOver()}unhover(){this.hideTooltip(),this._handleOut()}showTooltip(e){const t=this.getTooltip(),i=this.get(\"tooltipText\"),r=this.get(\"tooltipHTML\");if((i||r)&&t){const n=this.get(\"tooltipPosition\"),s=this.getPrivate(\"tooltipTarget\",this);\"fixed\"!=n&&e||(this._display._setMatrix(),e=this.toGlobal(s._getTooltipPoint())),t.set(\"pointTo\",e),t.set(\"tooltipTarget\",s),t.get(\"x\")||t.set(\"x\",e.x),t.get(\"y\")||t.set(\"y\",e.y),i&&t.label.set(\"text\",i),r&&t.label.set(\"html\",r);const a=this.dataItem;if(a&&t.label._setDataItem(a),\"always\"==this.get(\"showTooltipOn\")&&(e.x<0||e.x>this._root.width()||e.y<0||e.y>this._root.height()))return void this.hideTooltip();t.label.text.markDirtyText();const o=t.show();return this.setPrivateRaw(\"showingTooltip\",!0),o}}hideTooltip(){const e=this.getTooltip();if(e&&(e.get(\"tooltipTarget\")==this.getPrivate(\"tooltipTarget\",this)||this.get(\"tooltip\")==e)){let t=e.get(\"keepTargetHover\")&&0==e.get(\"stateAnimationDuration\",0)?400:void 0;const i=e.hide(t);return this.setPrivateRaw(\"showingTooltip\",!1),i}}_getTooltipPoint(){const e=this._localBounds;if(e){let t=0,i=0;return this.get(\"isMeasured\")?(t=e.left+u.relativeToValue(this.get(\"tooltipX\",0),e.right-e.left),i=e.top+u.relativeToValue(this.get(\"tooltipY\",0),e.bottom-e.top)):(t=u.relativeToValue(this.get(\"tooltipX\",0),this.width()),i=u.relativeToValue(this.get(\"tooltipY\",0),this.height())),{x:t,y:i}}return{x:0,y:0}}getTooltip(){let e=this.get(\"tooltip\");if(e)return e;{let e=this.parent;if(e)return e.getTooltip()}}_updatePosition(){const e=this.parent;let t=this.get(\"dx\",0),i=this.get(\"dy\",0),r=this.get(\"x\"),n=this.getPrivate(\"x\"),s=0,o=0;const l=this.get(\"position\");r instanceof a.gG&&(r=e?e.innerWidth()*r.value+e.get(\"paddingLeft\",0):0),d.isNumber(r)?s=r+t:null!=n?s=n:e&&\"relative\"==l&&(s=e.get(\"paddingLeft\",0)+t);let h=this.get(\"y\"),u=this.getPrivate(\"y\");h instanceof a.gG&&(h=e?e.innerHeight()*h.value+e.get(\"paddingTop\",0):0),d.isNumber(h)?o=h+i:null!=u?o=u:e&&\"relative\"==l&&(o=e.get(\"paddingTop\",0)+i);const c=this._display;if(c.x!=s||c.y!=o){c.invalidateBounds(),c.x=s,c.y=o;const e=\"positionchanged\";this.events.isEnabled(e)&&this.events.dispatch(e,{type:e,target:this})}this.getPrivate(\"showingTooltip\")&&this.showTooltip()}x(){let e=this.get(\"x\"),t=this.getPrivate(\"x\");const i=this.parent;return i?e instanceof a.gG?u.relativeToValue(e,i.innerWidth())+i.get(\"paddingLeft\",0):d.isNumber(e)?e:null!=t?t:i.get(\"paddingLeft\",this._display.x):this._display.x}y(){let e=this.getPrivate(\"y\");if(null!=e)return e;let t=this.get(\"y\");const i=this.parent;return i?t instanceof a.gG?u.relativeToValue(t,i.innerHeight())+i.get(\"paddingTop\",0):d.isNumber(t)?t:null!=e?e:i.get(\"paddingTop\",this._display.y):this._display.y}_dispose(){super._dispose(),this._display.dispose(),this._removeTemplateField(),this._removeParent(this.parent),this._root._removeFocusElement(this);const e=this.get(\"tooltip\");e&&e.dispose(),this.markDirty()}adjustedLocalBounds(){return this._fixMinBounds(this._adjustedLocalBounds),this._adjustedLocalBounds}localBounds(){return this._localBounds}bounds(){const e=this._adjustedLocalBounds,t=this.x(),i=this.y();return{left:e.left+t,right:e.right+t,top:e.top+i,bottom:e.bottom+i}}globalBounds(){const e=this.localBounds(),t=this.toGlobal({x:e.left,y:e.top}),i=this.toGlobal({x:e.right,y:e.top}),r=this.toGlobal({x:e.right,y:e.bottom}),n=this.toGlobal({x:e.left,y:e.bottom});return{left:Math.min(t.x,i.x,r.x,n.x),top:Math.min(t.y,i.y,r.y,n.y),right:Math.max(t.x,i.x,r.x,n.x),bottom:Math.max(t.y,i.y,r.y,n.y)}}_onShow(e){}_onHide(e){}appear(e,t){return(0,r.mG)(this,void 0,void 0,(function*(){return yield this.hide(0),t?new Promise(((i,r)=>{this.setTimeout((()=>{i(this.show(e))}),t)})):this.show(e)}))}show(e){return(0,r.mG)(this,void 0,void 0,(function*(){if(!this._isShowing){this._isHidden=!1,this._isShowing=!0,this._isHiding=!1,this.states.lookup(\"default\").get(\"visible\")&&this.set(\"visible\",!0),this._onShow(e);const t=this.states.applyAnimate(\"default\",e);yield(0,h.ne)(t),this._isShowing=!1}}))}hide(e){return(0,r.mG)(this,void 0,void 0,(function*(){if(!this._isHiding&&!this._isHidden){this._isHiding=!0,this._isShowing=!1;let t=this.states.lookup(\"hidden\");t||(t=this.states.create(\"hidden\",{opacity:0,visible:!1})),this._isHidden=!0,this._onHide(e);const i=this.states.applyAnimate(\"hidden\",e);yield(0,h.ne)(i),this._isHiding=!1}}))}isHidden(){return this._isHidden}isShowing(){return this._isShowing}isHiding(){return this._isHiding}isHover(){return this._display.hovering()}isFocus(){return this._root.focused(this)}isDragging(){return this._isDragging}isVisible(){return!(!this.get(\"visible\")||!this.getPrivate(\"visible\")||this.get(\"forceHidden\"))}isVisibleDeep(){return this._parent?this._parent.isVisibleDeep()&&this.isVisible():this.isVisible()}compositeOpacity(){const e=this.get(\"opacity\",1);return this._parent?this._parent.compositeOpacity()*e:e}width(){let e=this.get(\"width\"),t=this.get(\"maxWidth\",this.getPrivate(\"maxWidth\")),i=this.get(\"minWidth\",this.getPrivate(\"minWidth\")),r=this.getPrivate(\"width\"),n=0;if(d.isNumber(r))n=r;else if(null==e)this._adjustedLocalBounds&&(n=this._adjustedLocalBounds.right-this._adjustedLocalBounds.left);else if(e instanceof a.gG){const t=this.parent;n=t?t.innerWidth()*e.value:this._root.width()*e.value}else d.isNumber(e)&&(n=e);return d.isNumber(i)&&(n=Math.max(i,n)),d.isNumber(t)&&(n=Math.min(t,n)),n}maxWidth(){let e=this.get(\"maxWidth\",this.getPrivate(\"maxWidth\"));if(d.isNumber(e))return e;{let e=this.get(\"width\");if(d.isNumber(e))return e}const t=this.parent;return t?t.innerWidth():this._root.width()}maxHeight(){let e=this.get(\"maxHeight\",this.getPrivate(\"maxHeight\"));if(d.isNumber(e))return e;{let e=this.get(\"height\");if(d.isNumber(e))return e}const t=this.parent;return t?t.innerHeight():this._root.height()}height(){let e=this.get(\"height\"),t=this.get(\"maxHeight\",this.getPrivate(\"maxHeight\")),i=this.get(\"minHeight\",this.getPrivate(\"minHeight\")),r=this.getPrivate(\"height\"),n=0;if(d.isNumber(r))n=r;else if(null==e)this._adjustedLocalBounds&&(n=this._adjustedLocalBounds.bottom-this._adjustedLocalBounds.top);else if(e instanceof a.gG){const t=this.parent;n=t?t.innerHeight()*e.value:this._root.height()*e.value}else d.isNumber(e)&&(n=e);return d.isNumber(i)&&(n=Math.max(i,n)),d.isNumber(t)&&(n=Math.min(t,n)),n}_findStaticTemplate(e){return this._templateField&&e(this._templateField)?this._templateField:super._findStaticTemplate(e)}_walkParents(e){this._parent&&this._walkParent(e)}_walkParent(e){this._parent&&this._parent._walkParent(e),e(this)}get parent(){return this._parent}_setParent(e,t=!1){const i=this._parent;e!==i&&(this.markDirtyBounds(),e.markDirty(),this._parent=e,t&&(this._removeParent(i),e&&(this._addPercentageSizeChildren(),this._addPercentagePositionChildren())),this.markDirtyPosition(),this._applyThemes())}getNumberFormatter(){return this.get(\"numberFormatter\",this._root.numberFormatter)}getDateFormatter(){return this.get(\"dateFormatter\",this._root.dateFormatter)}getDurationFormatter(){return this.get(\"durationFormatter\",this._root.durationFormatter)}toGlobal(e){return this._display.toGlobal(e)}toLocal(e){return this._display.toLocal(e)}_getDownPoint(){const e=this._getDownPointId();if(e)return this._downPoints[e]}_getDownPointId(){if(this._downPoints)return p.keysOrdered(this._downPoints,((e,t)=>e>t?1:e<t?-1:0))[0]}toFront(){const e=this.parent;e&&e.children.moveValue(this,e.children.length-1)}toBack(){const e=this.parent;e&&e.children.moveValue(this,0)}}Object.defineProperty(m,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Sprite\"}),Object.defineProperty(m,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:n.JH.classNames.concat([m.className])})},1195:function(e,t,i){\"use strict\";i.d(t,{b:function(){return h}});var r=i(8777),n=i(6245),s=i(3497),a=i(7142),o=i(1112),l=i(751);class h extends r.W{constructor(){super(...arguments),Object.defineProperty(this,\"rectangle\",{enumerable:!0,configurable:!0,writable:!0,value:this.children.push(a.A.new(this._root,{themeTags:[\"rectangle\"],fillOpacity:0,fill:(0,o.$_)(16777215)}))}),Object.defineProperty(this,\"gripL\",{enumerable:!0,configurable:!0,writable:!0,value:this._createGrip(\"left\")}),Object.defineProperty(this,\"gripR\",{enumerable:!0,configurable:!0,writable:!0,value:this._createGrip(\"right\")}),Object.defineProperty(this,\"gripT\",{enumerable:!0,configurable:!0,writable:!0,value:this._createGrip(\"top\")}),Object.defineProperty(this,\"gripB\",{enumerable:!0,configurable:!0,writable:!0,value:this._createGrip(\"bottom\")}),Object.defineProperty(this,\"_is\",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,\"_ix\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_iw\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_positionDP\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_isHover\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_afterNew(){super._afterNew(),this.addTag(\"resizer\"),this.set(\"visible\",!1),this.gripL.events.on(\"dragged\",(e=>{this._resize(e.target,-1)})),this.gripR.events.on(\"dragged\",(e=>{this._resize(e.target,1)})),this.gripL.events.on(\"dragstart\",(e=>{this._resizeStart(e.target)})),this.gripR.events.on(\"dragstart\",(e=>{this._resizeStart(e.target)})),this.gripT.events.on(\"dragged\",(e=>{this._rotate(e,90)})),this.gripB.events.on(\"dragged\",(e=>{this._rotate(e,-90)})),this.gripT.events.on(\"dragstart\",(e=>{this._resizeStart(e.target)})),this.gripB.events.on(\"dragstart\",(e=>{this._resizeStart(e.target)}))}_resizeStart(e){const t=this.get(\"sprite\");t&&(this._is=t.get(\"scale\",1),this._ix=e.x(),this._iw=this.width()/2)}_resize(e,t){const i=this.get(\"sprite\"),r=this.get(\"spriteTemplate\");if(i){const n=Math.max(.01,this._is*(1+t*(e.x()-this._ix)/this._iw));r?r.set(\"scale\",n):i.set(\"scale\",n),i.states.lookup(\"default\").set(\"scale\",n),this._updatePositions()}}_rotate(e,t){const i=this.get(\"sprite\"),r=this.get(\"spriteTemplate\");if(i){const n=this.parent;if(n){const s=this.get(\"rotationStep\",10);let a=Math.round((l.getAngle({x:this.x(),y:this.y()},n.toLocal(e.point))+t)/s)*s;r?r.set(\"rotation\",a):i.set(\"rotation\",a),i.states.lookup(\"default\").set(\"rotation\",a),this._updatePositions()}}}_createGrip(e){const t=this.children.push(r.W.new(this._root,{themeTags:[\"grip\",e],setStateOnChildren:!0,draggable:!0}));return t.children.push(s.c.new(this._root,{themeTags:[\"outline\"],centerX:n.CI,centerY:n.CI})),t.children.push(s.c.new(this._root,{centerX:n.CI,centerY:n.CI})),t}_updateChildren(){if(super._updateChildren(),this.isDirty(\"sprite\")){const e=this.get(\"sprite\");if(e){this.show(0),this.setPrivate(\"visible\",!0),this._updatePositions();const t=e.parent;t&&t.children.moveValue(this,0),this._positionDP=e.events.on(\"positionchanged\",(()=>{this._updatePositions()}))}else this.hide(0),this.setPrivate(\"visible\",!1),this._positionDP&&this._positionDP.dispose()}(this.isDirty(\"width\")||this.isDirty(\"height\")||this.isDirty(\"rotation\"))&&this._updatePositions()}_updatePositions(){const e=this.get(\"sprite\");if(e){let t=e.localBounds(),i=e.get(\"scale\",1),r=20,s=(t.right-t.left)*i+r,a=(t.bottom-t.top)*i+r,o=e.get(\"rotation\",0);const h=this.rectangle;let u=e.get(\"centerX\",n.CI),c=e.get(\"centerY\",n.CI),d=0;u instanceof n.gG&&(d=u.value);let p=0;c instanceof n.gG&&(p=c.value),h.setAll({centerX:u,centerY:c,width:s,height:a}),this.setAll({x:e.x()+r*(d-.5)*l.cos(o)-r*(p-.5)*l.sin(o),y:e.y()+r*(p-.5)*l.cos(o)+r*(d-.5)*l.sin(o),width:s,height:a,rotation:o}),this.gripT.setAll({x:(.5-d)*s,y:-p*a}),this.gripB.setAll({x:(.5-d)*s,y:(1-p)*a}),this.gripL.setAll({x:-d*s,y:(.5-p)*a}),this.gripR.setAll({x:(1-d)*s,y:(.5-p)*a}),this.rectangle.setAll({width:s,height:a})}}}Object.defineProperty(h,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"SpriteResizer\"}),Object.defineProperty(h,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.W.classNames.concat([h.className])})},2036:function(e,t,i){\"use strict\";i.d(t,{x:function(){return l}});var r=i(4596),n=i(2132),s=i(5071),a=i(7652),o=i(7449);class l extends r.j{constructor(){super(...arguments),Object.defineProperty(this,\"textStyle\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeTextStyle()}),Object.defineProperty(this,\"_display\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeText(\"\",this.textStyle)}),Object.defineProperty(this,\"_textStyles\",{enumerable:!0,configurable:!0,writable:!0,value:[\"textAlign\",\"fontFamily\",\"fontSize\",\"fontStyle\",\"fontWeight\",\"fontStyle\",\"fontVariant\",\"textDecoration\",\"shadowColor\",\"shadowBlur\",\"shadowOffsetX\",\"shadowOffsetY\",\"shadowOpacity\",\"lineHeight\",\"baselineRatio\",\"direction\",\"textBaseline\",\"oversizedBehavior\",\"breakWords\",\"ellipsis\",\"minScale\",\"maxChars\"]}),Object.defineProperty(this,\"_originalScale\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_updateBounds(){if(this.get(\"text\"))super._updateBounds();else{let e={left:0,right:0,top:0,bottom:0};this._adjustedLocalBounds=e}}_changed(){super._changed(),this._display.clear();let e=this.textStyle;if(this.isDirty(\"opacity\")){let e=this.get(\"opacity\",1);this._display.alpha=e}if((this.isDirty(\"text\")||this.isDirty(\"populateText\"))&&(this._display.text=this._getText(),this.markDirtyBounds(),\"tooltip\"==this.get(\"role\")&&this._root.updateTooltip(this)),this.isPrivateDirty(\"tooltipElement\")&&this.getPrivate(\"tooltipElement\")&&this._disposers.push(new o.ku((()=>{this._root._removeTooltipElement(this)}))),this.isDirty(\"width\")&&(e.wordWrapWidth=this.width(),this.markDirtyBounds()),this.isDirty(\"oversizedBehavior\")&&(e.oversizedBehavior=this.get(\"oversizedBehavior\",\"none\"),this.markDirtyBounds()),this.isDirty(\"breakWords\")&&(e.breakWords=this.get(\"breakWords\",!1),this.markDirtyBounds()),this.isDirty(\"ellipsis\")&&(e.ellipsis=this.get(\"ellipsis\"),this.markDirtyBounds()),this.isDirty(\"ignoreFormatting\")&&(e.ignoreFormatting=this.get(\"ignoreFormatting\",!1),this.markDirtyBounds()),this.isDirty(\"minScale\")&&(e.minScale=this.get(\"minScale\",0),this.markDirtyBounds()),this.isDirty(\"fill\")){let t=this.get(\"fill\");t&&(e.fill=t)}if(this.isDirty(\"fillOpacity\")){let t=this.get(\"fillOpacity\",1);t&&(e.fillOpacity=t)}(this.isDirty(\"maxWidth\")||this.isPrivateDirty(\"maxWidth\"))&&(e.maxWidth=this.get(\"maxWidth\",this.getPrivate(\"maxWidth\")),this.markDirtyBounds()),(this.isDirty(\"maxHeight\")||this.isPrivateDirty(\"maxHeight\"))&&(e.maxHeight=this.get(\"maxHeight\",this.getPrivate(\"maxHeight\")),this.markDirtyBounds()),s.each(this._textStyles,(t=>{this._dirty[t]&&(e[t]=this.get(t),this.markDirtyBounds())})),e.fontSize=this.get(\"fontSize\"),e.fontFamily=this.get(\"fontFamily\"),this._display.style=e,this.isDirty(\"role\")&&\"tooltip\"==this.get(\"role\")&&this._root.updateTooltip(this)}_getText(){let e=this.get(\"text\",\"\");return this.get(\"maxChars\")&&(e=a.truncateTextWithEllipsis(e,this.get(\"maxChars\",1e8),this.get(\"breakWords\"),this.get(\"ellipsis\"))),this.get(\"populateText\")?(0,n.q)(this,e):e}markDirtyText(){this._display.text=this._getText(),\"tooltip\"==this.get(\"role\")&&this._root.updateTooltip(this),this.markDirtyBounds(),this.markDirty()}_setDataItem(e){super._setDataItem(e),this.get(\"populateText\")&&this.markDirtyText()}getNumberFormatter(){return this.parent?this.parent.getNumberFormatter():super.getNumberFormatter()}getDateFormatter(){return this.parent?this.parent.getDateFormatter():super.getDateFormatter()}getDurationFormatter(){return this.parent?this.parent.getDurationFormatter():super.getDurationFormatter()}}Object.defineProperty(l,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Text\"}),Object.defineProperty(l,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.j.classNames.concat([l.className])})},2438:function(e,t,i){\"use strict\";i.d(t,{d:function(){return n}});var r=i(2077);class n extends r.x{}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Tick\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.x.classNames.concat([n.className])})},2876:function(e,t,i){\"use strict\";i.d(t,{u:function(){return d}});var r=i(7449),n=i(962),s=i(8931),a=i(8777),o=i(6245),l=i(1112),h=i(751),u=i(5071),c=i(7652);class d extends a.W{constructor(e,t,i,r=[]){super(e,t,i,r),Object.defineProperty(this,\"_fx\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_fy\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_label\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_fillDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_strokeDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_labelDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_w\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_h\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_keepHoverDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_htmlContentHovered\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_afterNew(){this._settings.themeTags=c.mergeTags(this._settings.themeTags,[\"tooltip\"]),super._afterNew(),this.set(\"background\",s.i.new(this._root,{themeTags:[\"tooltip\",\"background\"]})),this._label=this.children.push(n._.new(this._root,{})),this._disposers.push(this._label.events.on(\"boundschanged\",(()=>{this._updateBackground()}))),this._disposers.push(this.on(\"bounds\",(()=>{this._updateBackground()}))),this._updateTextColor(),this._root.tooltipContainer.children.push(this),this.hide(0),this._disposers.push(this.label.onPrivate(\"htmlElement\",(e=>{e&&(c.addEventListener(e,\"pointerover\",(e=>{this._htmlContentHovered=!0})),c.addEventListener(e,\"pointerout\",(e=>{this._htmlContentHovered=!1})))}))),this._root._tooltips.push(this)}get label(){return this._label}dispose(){super.dispose(),u.remove(this._root._tooltips,this)}_updateChildren(){super._updateChildren(),(this.isDirty(\"pointerOrientation\")||this.isPrivateDirty(\"minWidth\")||this.isPrivateDirty(\"minHeight\"))&&this.get(\"background\")._markDirtyKey(\"width\"),null!=this.get(\"labelText\")&&this.label.set(\"text\",this.get(\"labelText\")),null!=this.get(\"labelHTML\")&&this.label.set(\"html\",this.get(\"labelHTML\"))}_changed(){if(super._changed(),(this.isDirty(\"pointTo\")||this.isDirty(\"pointerOrientation\"))&&this._updateBackground(),this.isDirty(\"tooltipTarget\")&&this.updateBackgroundColor(),this.isDirty(\"keepTargetHover\"))if(this.get(\"keepTargetHover\")){const e=this.get(\"background\");this._keepHoverDp=new r.FV([e.events.on(\"pointerover\",(e=>{let t=this.get(\"tooltipTarget\");t&&(t.parent&&t.parent.getPrivate(\"tooltipTarget\")==t&&(t=t.parent),t.hover())})),e.events.on(\"pointerout\",(e=>{let t=this.get(\"tooltipTarget\");t&&(t.parent&&t.parent.getPrivate(\"tooltipTarget\")==t&&(t=t.parent),this._htmlContentHovered||t.unhover())}))]),this.label.onPrivate(\"htmlElement\",(t=>{this._keepHoverDp&&t&&this._keepHoverDp.disposers.push(c.addEventListener(t,\"pointerleave\",(t=>{const i=this.root._renderer.getEvent(t);e.events.dispatch(\"pointerout\",{type:\"pointerout\",originalEvent:i.event,point:i.point,simulated:!1,target:e})})))}))}else this._keepHoverDp&&(this._keepHoverDp.dispose(),this._keepHoverDp=void 0)}_onShow(){super._onShow(),this.updateBackgroundColor()}updateBackgroundColor(){let e=this.get(\"tooltipTarget\");const t=this.get(\"background\");let i,r;e&&t&&(i=e.get(\"fill\"),r=e.get(\"stroke\"),null==i&&(i=r),this.get(\"getFillFromSprite\")&&(this._fillDp&&this._fillDp.dispose(),null!=i&&t.set(\"fill\",i),this._fillDp=e.on(\"fill\",(e=>{null!=e&&(t.set(\"fill\",e),this._updateTextColor(e))})),this._disposers.push(this._fillDp)),this.get(\"getStrokeFromSprite\")&&(this._strokeDp&&this._strokeDp.dispose(),null!=i&&t.set(\"stroke\",i),this._strokeDp=e.on(\"fill\",(e=>{null!=e&&t.set(\"stroke\",e)})),this._disposers.push(this._strokeDp)),this.get(\"getLabelFillFromSprite\")&&(this._labelDp&&this._labelDp.dispose(),null!=i&&this.label.set(\"fill\",i),this._labelDp=e.on(\"fill\",(e=>{null!=e&&this.label.set(\"fill\",e)})),this._disposers.push(this._labelDp))),this._updateTextColor(i)}_updateTextColor(e){this.get(\"autoTextColor\")&&(null==e&&(e=this.get(\"background\").get(\"fill\")),null==e&&(e=this._root.interfaceColors.get(\"background\")),e instanceof l.Il&&this.label.set(\"fill\",l.Il.alternative(e,this._root.interfaceColors.get(\"alternativeText\"),this._root.interfaceColors.get(\"text\"))))}_setDataItem(e){super._setDataItem(e),this.label._setDataItem(e)}_updateBackground(){super.updateBackground();const e=this._root.container;if(e){let t=.5,i=.5,r=this.get(\"centerX\");r instanceof o.gG&&(t=r.value);let n=this.get(\"centerY\");n instanceof o.gG&&(i=n.value);let a=e.width(),l=e.height(),u=this.parent,c=0,d=0;if(u){c=u.x(),d=u.y();const e=u.get(\"layerMargin\");e&&(c+=e.left||0,d+=e.top||0,a+=(e.left||0)+(e.right||0),l+=(e.top||0)+(e.bottom||0))}const p=this.get(\"bounds\",{left:-c,top:-d,right:a-c,bottom:l-d});this._updateBounds();let f=this.width(),g=this.height();0===f&&(f=this._w),0===g&&(g=this._h);let m=this.get(\"pointTo\",{x:a/2,y:l/2}),b=m.x,_=m.y,v=this.get(\"pointerOrientation\"),y=this.get(\"background\"),w=0,x=0,O=0;y instanceof s.i&&(w=y.get(\"pointerLength\",0),x=y.get(\"strokeWidth\",0)/2,O=x,y.set(\"width\",f),y.set(\"height\",g));let P=0,D=0,k=p.right-p.left,T=p.bottom-p.top;\"horizontal\"==v||\"left\"==v||\"right\"==v?(x=0,\"horizontal\"==v?b>p.left+k/2?(b-=f*(1-t)+w,O*=-1):b+=f*t+w:\"left\"==v?b+=f*(1-t)+w:(b-=f*t+w,O*=-1)):(O=0,\"vertical\"==v?_>p.top+g/2+w?_-=g*(1-i)+w:(_+=g*i+w,x*=-1):\"down\"==v?_-=g*(1-i)+w:(_+=g*i+w,x*=-1)),b=h.fitToRange(b,p.left+f*t,p.left+k-f*(1-t))+O,_=h.fitToRange(_,p.top+g*i,p.top+T-g*(1-i))-x,P=m.x-b+f*t+O,D=m.y-_+g*i-x,this._fx=b,this._fy=_;const M=this.get(\"animationDuration\",0);if(M>0&&this.get(\"visible\")&&this.get(\"opacity\")>.1){const e=this.get(\"animationEasing\");this.animate({key:\"x\",to:b,duration:M,easing:e}),this.animate({key:\"y\",to:_,duration:M,easing:e})}else this.set(\"x\",b),this.set(\"y\",_);y instanceof s.i&&(y.set(\"pointerX\",P),y.set(\"pointerY\",D)),f>0&&(this._w=f),g>0&&(this._h=g)}}}Object.defineProperty(d,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Tooltip\"}),Object.defineProperty(d,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:a.W.classNames.concat([d.className])})},1706:function(e,t,i){\"use strict\";i.d(t,{Z:function(){return a}});var r=i(2010),n=i(5040),s=i(6245);class a extends r.A{updateContainer(e){let t=e.get(\"paddingTop\",0),i=e.innerHeight(),a=0;(0,r.j)(e,(e=>{if(e.isVisible()&&\"relative\"==e.get(\"position\")){let t=e.get(\"height\");if(t instanceof s.gG){a+=t.value;let r=i*t.value,n=e.get(\"minHeight\",e.getPrivate(\"minHeight\",-1/0));n>r&&(i-=n,a-=t.value);let s=e.get(\"maxHeight\",e.getPrivate(\"maxHeight\",1/0));r>s&&(i-=s,a-=t.value)}else n.isNumber(t)||(t=e.height()),i-=t+e.get(\"marginTop\",0)+e.get(\"marginBottom\",0)}})),(i<=0||i==1/0)&&(i=.1),(0,r.j)(e,(e=>{if(e.isVisible()&&\"relative\"==e.get(\"position\")){let t=e.get(\"height\");if(t instanceof s.gG){let r=i*t.value/a-e.get(\"marginTop\",0)-e.get(\"marginBottom\",0),n=e.get(\"minHeight\",e.getPrivate(\"minHeight\",-1/0)),s=e.get(\"maxHeight\",e.getPrivate(\"maxHeight\",1/0));r=Math.min(Math.max(n,r),s),e.setPrivate(\"height\",r)}else e._prevSettings.height instanceof s.gG&&e.setPrivate(\"height\",void 0)}}));let o=t;(0,r.j)(e,(e=>{if(\"relative\"==e.get(\"position\"))if(e.isVisible()){let t=e.adjustedLocalBounds(),i=e.get(\"marginTop\",0),r=t.top,n=t.bottom,s=e.get(\"maxHeight\");s&&n-r>s&&(n=r+s);let a=e.get(\"marginBottom\",0),l=o+i-r;e.setPrivate(\"y\",l),o=l+n+a}else e.setPrivate(\"y\",void 0)}))}}Object.defineProperty(a,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"VerticalLayout\"}),Object.defineProperty(a,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.A.classNames.concat([a.className])})},4680:function(e,t,i){\"use strict\";var r;i.d(t,{b:function(){return r}}),function(e){e.ADD=\"lighter\",e.COLOR=\"color\",e.COLOR_BURN=\"color-burn\",e.COLOR_DODGE=\"color-dodge\",e.DARKEN=\"darken\",e.DIFFERENCE=\"difference\",e.DST_OVER=\"destination-over\",e.EXCLUSION=\"exclusion\",e.HARD_LIGHT=\"hard-light\",e.HUE=\"hue\",e.LIGHTEN=\"lighten\",e.LUMINOSITY=\"luminosity\",e.MULTIPLY=\"multiply\",e.NORMAL=\"source-over\",e.OVERLAY=\"overlay\",e.SATURATION=\"saturation\",e.SCREEN=\"screen\",e.SOFT_LIGHT=\"soft-light\",e.SRC_ATOP=\"source-atop\",e.XOR=\"xor\"}(r||(r={}))},1437:function(e,t,i){\"use strict\";i.d(t,{p:function(){return n}});var r=i(6331);class n extends r.JH{_afterNew(){super._afterNewApplyThemes()}getFill(e){return{addColorStop:(e,t)=>{}}}_changed(){super._changed()}getBounds(e){const t=this.get(\"target\");if(t){let i=t.globalBounds();const r=e.toLocal({x:i.left,y:i.top}),n=e.toLocal({x:i.right,y:i.top}),s=e.toLocal({x:i.right,y:i.bottom}),a=e.toLocal({x:i.left,y:i.bottom});return{left:Math.min(r.x,n.x,s.x,a.x),top:Math.min(r.y,n.y,s.y,a.y),right:Math.max(r.x,n.x,s.x,a.x),bottom:Math.max(r.y,n.y,s.y,a.y)}}return e._display.getLocalBounds()}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Gradient\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([n.className])})},1747:function(e,t,i){\"use strict\";i.d(t,{o:function(){return l}});var r=i(1437),n=i(1112),s=i(5071),a=i(5040),o=i(751);class l extends r.p{getFill(e){const t=this.get(\"rotation\",0);let i=this.getBounds(e),r=i.left||0,l=i.right||0,h=i.top||0,u=i.bottom||0,c=o.cos(t),d=o.sin(t),p=c*(l-r),f=d*(u-h),g=Math.max(p,f);const m=this._root._renderer.createLinearGradient(r,h,r+g*c,h+g*d),b=this.get(\"stops\");if(b){let e=0;s.each(b,(t=>{let i=t.offset;a.isNumber(i)||(i=e/(b.length-1));let r=t.opacity;a.isNumber(r)||(r=1);let s=t.color;if(s){const e=t.lighten;e&&(s=n.Il.lighten(s,e));const a=t.brighten;a&&(s=n.Il.brighten(s,a)),m.addColorStop(i,\"rgba(\"+s.r+\",\"+s.g+\",\"+s.b+\",\"+r+\")\")}e++}))}return m}}Object.defineProperty(l,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"LinearGradient\"}),Object.defineProperty(l,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.p.classNames.concat([l.className])})},3437:function(e,t,i){\"use strict\";i.d(t,{c:function(){return n}});var r=i(6331);class n extends r.JH{constructor(){super(...arguments),Object.defineProperty(this,\"_display\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeGraphics()}),Object.defineProperty(this,\"_backgroundDisplay\",{enumerable:!0,configurable:!0,writable:!0,value:this._root._renderer.makeGraphics()}),Object.defineProperty(this,\"_clear\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_pattern\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){super._afterNewApplyThemes()}get pattern(){return this._pattern}_draw(){}_beforeChanged(){super._beforeChanged(),(this.isDirty(\"repetition\")||this.isDirty(\"width\")||this.isDirty(\"height\")||this.isDirty(\"rotation\")||this.isDirty(\"strokeWidth\")||this.isDirty(\"strokeDasharray\")||this.isDirty(\"strokeDashoffset\")||this.isDirty(\"colorOpacity\")||this.isDirty(\"fillOpacity\"))&&(this._clear=!0),this._checkDirtyFill()}_checkDirtyFill(){(this.isDirty(\"color\")||this.isDirty(\"fill\"))&&(this._clear=!0)}_changed(){if(super._changed(),this._clear){const e=this.get(\"repetition\",\"\"),t=this.get(\"width\",100),i=this.get(\"height\",100),r=this.get(\"fill\"),n=this.get(\"fillOpacity\",1),s=this._backgroundDisplay,a=this._display;a.clear(),s.clear(),r&&n>0&&(s.beginFill(r,n),s.drawRect(0,0,t,i),s.endFill()),a.angle=this.get(\"rotation\",0),this._draw(),this._pattern=this._root._renderer.createPattern(a,s,e,t,i)}this._clear=!1}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Pattern\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([n.className])})},4429:function(e,t,i){\"use strict\";i.d(t,{v:function(){return n}});var r=i(3437);class n extends r.c{constructor(){super(...arguments),Object.defineProperty(this,\"_image\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_beforeChanged(){super._beforeChanged(),this._clear=!0,this.isDirty(\"src\")&&this._load();const e=this.get(\"canvas\");e&&(this.set(\"width\",e.width),this.set(\"height\",e.height))}_draw(){super._draw();const e=this._image;if(e){const t=this.get(\"width\",100),i=this.get(\"height\",100),r=this.get(\"fit\",\"image\");let n=0,s=0;\"pattern\"==r?(n=t,s=i):(n=e.width,s=e.height,\"image\"==r&&(this.set(\"width\",n),this.set(\"height\",s)));let a=0,o=0;this.get(\"centered\",!0)&&(a=t/2-n/2,o=i/2-s/2),this._display.image(e,n,s,a,o)}const t=this.get(\"canvas\");t&&this._display.image(t,t.width,t.height,0,0)}_load(){const e=this.get(\"src\");if(e){const t=new Image;t.src=e,t.decode().then((()=>{this._image=t,this._draw(),this.events.isEnabled(\"loaded\")&&this.events.dispatch(\"loaded\",{type:\"loaded\",target:this})})).catch((e=>{}))}}}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"PicturePattern\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.c.classNames.concat([n.className])})},6490:function(e,t,i){\"use strict\";i.d(t,{Wn:function(){return u},XG:function(){return d},ne:function(){return o},w6:function(){return l}});var r=i(7582),n=i(6245),s=i(1112),a=i(256);function o(e){return(0,r.mG)(this,void 0,void 0,(function*(){if(void 0!==e){const t=[];a.each(e,((e,i)=>{t.push(i.waitForStop())})),yield Promise.all(t)}}))}function l(e,t,i){return t+e*(i-t)}function h(e,t,i){return e>=1?i:t}function u(e,t,i){return new n.gG(l(e,t.percent,i.percent))}function c(e,t,i){return s.Il.interpolate(e,t,i)}function d(e,t){return\"number\"==typeof e&&\"number\"==typeof t?l:e instanceof n.gG&&t instanceof n.gG?u:e instanceof s.Il&&t instanceof s.Il?c:h}},5071:function(e,t,i){\"use strict\";i.r(t),i.d(t,{add:function(){return v},any:function(){return s},copy:function(){return P},each:function(){return o},eachContinue:function(){return h},eachReverse:function(){return l},find:function(){return S},findIndex:function(){return M},findIndexReverse:function(){return E},findMap:function(){return C},findReverse:function(){return N},first:function(){return d},getFirstSortedIndex:function(){return A},getSortedIndex:function(){return j},has:function(){return O},indexOf:function(){return n},insert:function(){return p},insertIndex:function(){return k},keepIf:function(){return R},last:function(){return c},map:function(){return a},move:function(){return _},pushAll:function(){return g},pushOne:function(){return y},remove:function(){return m},removeFirst:function(){return b},removeIndex:function(){return T},replace:function(){return w},setIndex:function(){return f},shiftLeft:function(){return u},shuffle:function(){return L},slice:function(){return D},toArray:function(){return x}});var r=i(5040);function n(e,t){const i=e.length;for(let r=0;r<i;++r)if(e[r]===t)return r;return-1}function s(e,t){const i=e.length;for(let r=0;r<i;++r)if(t(e[r]))return!0;return!1}function a(e,t){const i=e.length,r=new Array(i);for(let n=0;n<i;++n)r[n]=t(e[n],n);return r}function o(e,t){const i=e.length;for(let r=0;r<i;++r)t(e[r],r)}function l(e,t){let i=e.length;for(;i>0;)--i,t(e[i],i)}function h(e,t){const i=e.length;for(let r=0;r<i&&t(e[r],r);++r);}function u(e,t){const i=e.length;for(let r=t;r<i;++r)e[r-t]=e[r];e.length=i-t}function c(e){const t=e.length;return t?e[t-1]:void 0}function d(e){return e[0]}function p(e,t,i){i=Math.max(0,Math.min(i,e.length)),e.splice(i,0,t)}function f(e,t,i){m(e,t),p(e,t,i)}function g(e,t){const i=t.length;for(let r=0;r<i;++r)e.push(t[r])}function m(e,t){let i=!1,r=0;for(;;){if(r=e.indexOf(t,r),-1===r)return i;i=!0,e.splice(r,1)}}function b(e,t){let i=e.indexOf(t);return-1!==i&&(e.splice(i,1),!0)}function _(e,t,i){let r=n(e,t);-1!==r&&T(e,r),null==i?e.push(t):k(e,i,t)}function v(e,t,i){r.isNumber(i)?0===i?e.unshift(t):e.splice(i,0,t):e.push(t)}function y(e,t){-1===e.indexOf(t)&&e.push(t)}function w(e,t,i){let n=e.indexOf(t);-1!==n&&e.splice(n,1),r.isNumber(i)?e.splice(i,0,t):e.push(t)}function x(e){return Array.isArray(e)?e:[e]}function O(e,t){return-1!==n(e,t)}function P(e){const t=e.length,i=new Array(t);for(let r=0;r<t;++r)i[r]=e[r];return i}function D(e,t,i=e.length){const r=new Array(i-t);for(let n=t;n<i;++n)r[n-t]=e[n];return r}function k(e,t,i){e.splice(t,0,i)}function T(e,t){e.splice(t,1)}function M(e,t){const i=e.length;for(let r=0;r<i;++r)if(t(e[r],r))return r;return-1}function E(e,t){let i=e.length;for(;i>0;)if(--i,t(e[i],i))return i;return-1}function S(e,t){const i=M(e,t);if(-1!==i)return e[i]}function N(e,t){const i=E(e,t);if(-1!==i)return e[i]}function C(e,t){const i=e.length;for(let r=0;r<i;++r){const i=t(e[r],r);if(void 0!==i)return i}}function L(e){let t,i,r=e.length;for(;0!==r;)i=Math.floor(Math.random()*r),r-=1,t=e[r],e[r]=e[i],e[i]=t}function j(e,t){let i=0,r=e.length,n=!1;for(;i<r;){const s=i+r>>1,a=t(e[s]);a<0?i=s+1:0===a?(n=!0,i=s+1):r=s}return{found:n,index:n?i-1:i}}function A(e,t){let i=0,r=e.length,n=!1;for(;i<r;){const s=i+r>>1,a=t(e[s]);a<0?i=s+1:0===a?(n=!0,r=s):r=s}return{found:n,index:i}}function R(e,t){let i=e.length;for(;i>0;)--i,t(e[i])||e.splice(i,1)}},1112:function(e,t,i){\"use strict\";i.d(t,{$_:function(){return o},Il:function(){return l}});var r=i(6490),n=i(7652),s=i(5040);function a(e){return\"#\"===e[0]&&(e=e.substr(1)),3==e.length&&(e=e[0].repeat(2)+e[1].repeat(2)+e[2].repeat(2)),parseInt(e,16)}function o(e){return l.fromAny(e)}class l{constructor(e){Object.defineProperty(this,\"_hex\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._hex=0|e}get hex(){return this._hex}get r(){return this._hex>>>16}get g(){return this._hex>>8&255}get b(){return 255&this._hex}toCSS(e=1){return\"rgba(\"+this.r+\", \"+this.g+\", \"+this.b+\", \"+e+\")\"}toCSSHex(){return\"#\"+n.padString(this.r.toString(16),2)+n.padString(this.g.toString(16),2)+n.padString(this.b.toString(16),2)}toHSL(e=1){return n.rgbToHsl({r:this.r,g:this.g,b:this.b,a:e})}static fromHSL(e,t,i){const r=n.hslToRgb({h:e,s:t,l:i});return this.fromRGB(r.r,r.g,r.b)}toString(){return this.toCSSHex()}static fromHex(e){return new l(e)}static fromRGB(e,t,i){return new l((0|i)+(t<<8)+(e<<16))}static fromString(e){return new l(a(e))}static fromCSS(e){return new l(function(e){let t=(e=e.replace(/[ ]/g,\"\")).match(/^rgb\\(([0-9]*),([0-9]*),([0-9]*)\\)/i);if(t)t.push(\"1\");else if(t=e.match(/^rgba\\(([0-9]*),([0-9]*),([0-9]*),([.0-9]*)\\)/i),!t)return 0;let i=\"\";for(let e=1;e<=3;e++){let r=parseInt(t[e]).toString(16);1==r.length&&(r=\"0\"+r),i+=r}return a(i)}(e))}static fromAny(e){if(s.isString(e)){if(\"#\"==e[0])return l.fromString(e);if(\"rgb\"==e.substr(0,3))return l.fromCSS(e)}else{if(s.isNumber(e))return l.fromHex(e);if(e instanceof l)return l.fromHex(e.hex)}throw new Error(\"Unknown color syntax: \"+e)}static alternative(e,t,i){const r=n.alternativeColor({r:e.r,g:e.g,b:e.b},t?{r:t.r,g:t.g,b:t.b}:void 0,i?{r:i.r,g:i.g,b:i.b}:void 0);return this.fromRGB(r.r,r.g,r.b)}static interpolate(e,t,i,n=\"rgb\"){if(\"hsl\"==n){const n=t.toHSL(),s=i.toHSL();return l.fromHSL((0,r.w6)(e,n.h,s.h),(0,r.w6)(e,n.s,s.s),(0,r.w6)(e,n.l,s.l))}return l.fromRGB((0,r.w6)(e,t.r,i.r),(0,r.w6)(e,t.g,i.g),(0,r.w6)(e,t.b,i.b))}static lighten(e,t){const i=n.lighten({r:e.r,g:e.g,b:e.b},t);return l.fromRGB(i.r,i.g,i.b)}static brighten(e,t){const i=n.brighten({r:e.r,g:e.g,b:e.b},t);return l.fromRGB(i.r,i.g,i.b)}static saturate(e,t){const i=n.saturate({r:e.r,g:e.g,b:e.b},t);return l.fromRGB(i.r,i.g,i.b)}}},2754:function(e,t,i){\"use strict\";i.d(t,{U:function(){return s}});var r=i(6331),n=i(1112);class s extends r.JH{_afterNew(){super._afterNewApplyThemes(),this._dirty.colors=!1}_beforeChanged(){this.isDirty(\"colors\")&&this.reset()}generateColors(){this.setPrivate(\"currentPass\",this.getPrivate(\"currentPass\",0)+1);const e=this.getPrivate(\"currentPass\"),t=this.get(\"colors\",[this.get(\"baseColor\",n.Il.fromHex(16711680))]);this.getPrivate(\"numColors\")||this.setPrivate(\"numColors\",t.length);const i=this.getPrivate(\"numColors\"),r=this.get(\"passOptions\"),s=this.get(\"reuse\");for(let a=0;a<i;a++)if(s)t.push(t[a]);else{const i=t[a].toHSL();let s=i.h+(r.hue||0)*e;for(;s>1;)s-=1;let o=i.s+(r.saturation||0)*e;o>1&&(o=1),o<0&&(o=0);let l=i.l+(r.lightness||0)*e;for(;l>1;)l-=1;t.push(n.Il.fromHSL(s,o,l))}}getIndex(e){const t=this.get(\"colors\",[]),i=this.get(\"saturation\");return e>=t.length?(this.generateColors(),this.getIndex(e)):null!=i?n.Il.saturate(t[e],i):t[e]}next(){let e=this.getPrivate(\"currentStep\",this.get(\"startIndex\",0));return this.setPrivate(\"currentStep\",e+this.get(\"step\",1)),this.getIndex(e)}reset(){this.setPrivate(\"currentStep\",this.get(\"startIndex\",0)),this.setPrivate(\"currentPass\",0)}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"ColorSet\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([s.className])})},9582:function(e,t,i){\"use strict\";i.d(t,{Q:function(){return s},k:function(){return n}});var r=i(7144);class n extends r.aV{constructor(){super(...arguments),Object.defineProperty(this,\"processor\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}incrementRef(){}decrementRef(){}_onPush(e){this.processor&&this.processor.processRow(e),super._onPush(e)}_onInsertIndex(e,t){this.processor&&this.processor.processRow(t),super._onInsertIndex(e,t)}_onSetIndex(e,t,i){this.processor&&this.processor.processRow(i),super._onSetIndex(e,t,i)}}class s{constructor(e){Object.defineProperty(this,\"processor\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_value\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._value=e}incrementRef(){}decrementRef(){}}},6460:function(e,t,i){\"use strict\";i.d(t,{C:function(){return l}});var r=i(6331),n=i(7255),s=i(462),a=i(5040),o=i(7652);class l extends r.JH{_setDefaults(){this._setDefault(\"capitalize\",!0),this._setDefault(\"dateFormat\",\"yyyy-MM-dd\"),super._setDefaults()}_beforeChanged(){super._beforeChanged()}format(e,t){let i;void 0!==t&&\"\"!==t||(t=this.get(\"dateFormat\",\"yyyy-MM-dd\"));let r=e;if(a.isObject(t))try{const e=this.get(\"intlLocales\");return e?new Intl.DateTimeFormat(e,t).format(r):new Intl.DateTimeFormat(void 0,t).format(r)}catch(e){return\"Invalid\"}let n=this.parseFormat(t);const s=this._root.timezone;return s&&!this._root.utc&&(r=s.convertLocal(r)),a.isNumber(r.getTime())?(i=this.applyFormat(r,n),this.get(\"capitalize\")&&(i=i.replace(/^.{1}/,i.substr(0,1).toUpperCase())),i):\"Invalid date\"}applyFormat(e,t){let i,r,n,l,h,u,c,d,p=t.template,f=e.getTime();this._root.utc?(i=e.getUTCFullYear(),r=e.getUTCMonth(),n=e.getUTCDay(),l=e.getUTCDate(),h=e.getUTCHours(),u=e.getUTCMinutes(),c=e.getUTCSeconds(),d=e.getUTCMilliseconds()):(i=e.getFullYear(),r=e.getMonth(),n=e.getDay(),l=e.getDate(),h=e.getHours(),u=e.getMinutes(),c=e.getSeconds(),d=e.getMilliseconds());for(let g=0,m=t.parts.length;g<m;g++){let m=\"\";switch(t.parts[g]){case\"G\":m=this._t(i<0?\"_era_bc\":\"_era_ad\");break;case\"yyyy\":m=Math.abs(i).toString(),i<0&&(m+=this._t(\"_era_bc\"));break;case\"yyy\":case\"yy\":case\"y\":m=Math.abs(i).toString().substr(-t.parts[g].length),i<0&&(m+=this._t(\"_era_bc\"));break;case\"YYYY\":case\"YYY\":case\"YY\":case\"Y\":let a=o.getWeekYear(e,this._root.utc);m=\"YYYY\"==t.parts[g]?Math.abs(a).toString():Math.abs(a).toString().substr(-t.parts[g].length),a<0&&(m+=this._t(\"_era_bc\"));break;case\"u\":case\"F\":case\"g\":break;case\"q\":m=\"\"+Math.ceil((e.getMonth()+1)/3);break;case\"MMMMM\":m=this._t(this._getMonth(r)).substr(0,1);break;case\"MMMM\":m=this._t(this._getMonth(r));break;case\"MMM\":m=this._t(this._getShortMonth(r));break;case\"MM\":m=o.padString(r+1,2,\"0\");break;case\"M\":m=(r+1).toString();break;case\"ww\":m=o.padString(o.getWeek(e,this._root.utc),2,\"0\");break;case\"w\":m=o.getWeek(e,this._root.utc).toString();break;case\"W\":m=o.getMonthWeek(e,this._root.utc).toString();break;case\"dd\":m=o.padString(l,2,\"0\");break;case\"d\":m=l.toString();break;case\"DD\":case\"DDD\":m=o.padString(o.getYearDay(e,this._root.utc).toString(),t.parts[g].length,\"0\");break;case\"D\":m=o.getYearDay(e,this._root.utc).toString();break;case\"t\":m=this._root.language.translateFunc(\"_dateOrd\").call(this,l);break;case\"E\":m=(n||7).toString();break;case\"EE\":m=o.padString((n||7).toString(),2,\"0\");break;case\"EEE\":case\"eee\":m=this._t(this._getShortWeekday(n));break;case\"EEEE\":case\"eeee\":m=this._t(this._getWeekday(n));break;case\"EEEEE\":case\"eeeee\":m=this._t(this._getShortWeekday(n)).substr(0,1);break;case\"e\":case\"ee\":m=(n-(this._root.locale.firstDayOfWeek||1)+1).toString(),\"ee\"==t.parts[g]&&(m=o.padString(m,2,\"0\"));break;case\"a\":m=h>=12?this._t(\"PM\"):this._t(\"AM\");break;case\"aa\":m=h>=12?this._t(\"P.M.\"):this._t(\"A.M.\");break;case\"aaa\":m=h>=12?this._t(\"P\"):this._t(\"A\");break;case\"h\":m=o.get12Hours(h).toString();break;case\"hh\":m=o.padString(o.get12Hours(h),2,\"0\");break;case\"H\":m=h.toString();break;case\"HH\":m=o.padString(h,2,\"0\");break;case\"K\":m=o.get12Hours(h,0).toString();break;case\"KK\":m=o.padString(o.get12Hours(h,0),2,\"0\");break;case\"k\":m=(h+1).toString();break;case\"kk\":m=o.padString(h+1,2,\"0\");break;case\"m\":m=u.toString();break;case\"mm\":m=o.padString(u,2,\"0\");break;case\"s\":m=c.toString();break;case\"ss\":m=o.padString(c,2,\"0\");break;case\"S\":case\"SS\":case\"SSS\":m=Math.round(d/1e3*Math.pow(10,t.parts[g].length)).toString();break;case\"x\":m=f.toString();break;case\"n\":case\"nn\":case\"nnn\":m=o.padString(d,t.parts[g].length,\"0\");break;case\"z\":m=o.getTimeZone(e,!1,!1,this._root.utc,this._root.timezone?this._root.timezone.name:void 0).replace(/[+-]+[0-9]+$/,\"\");break;case\"zz\":m=o.getTimeZone(e,!0,!1,this._root.utc,this._root.timezone?this._root.timezone.name:void 0);break;case\"zzz\":m=o.getTimeZone(e,!1,!0,this._root.utc,this._root.timezone?this._root.timezone.name:void 0).replace(/[+-]+[0-9]+$/,\"\");break;case\"zzzz\":m=o.getTimeZone(e,!0,!0,this._root.utc,this._root.timezone?this._root.timezone.name:void 0);break;case\"Z\":case\"ZZ\":let p=this._root.utc?\"UTC\":this._root.timezone;p instanceof s.r&&(p=p.name);const b=p?o.getTimezoneOffset(p):e.getTimezoneOffset();let _=Math.abs(b)/60,v=Math.floor(_),y=60*_-60*v;this._root.utc&&(v=0,y=0),\"Z\"==t.parts[g]?(m=\"GMT\",m+=b>0?\"-\":\"+\",m+=o.padString(v,2)+\":\"+o.padString(y,2)):(m=b>0?\"-\":\"+\",m+=o.padString(v,2)+o.padString(y,2));break;case\"i\":m=e.toISOString();break;case\"I\":m=e.toUTCString()}p=p.replace(a.PLACEHOLDER,m)}return p}parseFormat(e){let t={template:\"\",parts:[]},i=n.V.chunk(e,!0);for(let e=0;e<i.length;e++){let r=i[e];if(\"value\"===r.type){if(r.text.match(/^date$/i)){let e=this.get(\"dateFormat\",\"yyyy-MM-dd\");a.isString(e)||(e=\"yyyy-MM-dd\"),r.text=e}let e=r.text.match(/G|yyyy|yyy|yy|y|YYYY|YYY|YY|Y|u|q|MMMMM|MMMM|MMM|MM|M|ww|w|W|dd|d|DDD|DD|D|F|g|EEEEE|EEEE|EEE|EE|E|eeeee|eeee|eee|ee|e|aaa|aa|a|hh|h|HH|H|KK|K|kk|k|mm|m|ss|s|SSS|SS|S|A|zzzz|zzz|zz|z|ZZ|Z|t|x|nnn|nn|n|i|I/g);if(e)for(let i=0;i<e.length;i++)t.parts.push(e[i]),r.text=r.text.replace(e[i],a.PLACEHOLDER)}t.template+=r.text}return t}_months(){return[\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"]}_getMonth(e){return this._months()[e]}_shortMonths(){return[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May(short)\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"]}_getShortMonth(e){return this._shortMonths()[e]}_weekdays(){return[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]}_getWeekday(e){return this._weekdays()[e]}_shortWeekdays(){return[\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]}_getShortWeekday(e){return this._shortWeekdays()[e]}parse(e,t){if(e instanceof Date)return e;if(a.isNumber(e))return new Date(e);if(\"x\"==t)return new Date(parseInt(e));let i;a.isString(e)||(e=e.toString());let r=\"\";t=(t=o.cleanFormat(t)).substr(0,e.length);let n=this.parseFormat(t),s={year:-1,year3:-1,year2:-1,year1:-1,month:-1,monthShort:-1,monthLong:-1,weekdayShort:-1,weekdayLong:-1,day:-1,yearDay:-1,week:-1,hourBase0:-1,hour12Base0:-1,hourBase1:-1,hour12Base1:-1,minute:-1,second:-1,millisecond:-1,millisecondDigits:-1,am:-1,zone:-1,timestamp:-1,iso:-1},l={year:1970,month:0,day:1,hour:0,minute:0,second:0,millisecond:0,timestamp:null,offset:0,utc:this._root.utc},h=0,u=0;for(let e=0;e<n.parts.length;e++){switch(u=e+h+1,n.parts[e]){case\"yyyy\":case\"YYYY\":r+=\"([0-9]{4})\",s.year=u;break;case\"yyy\":case\"YYY\":r+=\"([0-9]{3})\",s.year3=u;break;case\"yy\":case\"YY\":r+=\"([0-9]{2})\",s.year2=u;break;case\"y\":case\"Y\":r+=\"([0-9]{1})\",s.year1=u;break;case\"MMMM\":r+=\"(\"+this.getStringList(this._months()).join(\"|\")+\")\",s.monthLong=u;break;case\"MMM\":r+=\"(\"+this.getStringList(this._shortMonths()).join(\"|\")+\")\",s.monthShort=u;break;case\"MM\":case\"M\":r+=\"([0-9]{2}|[0-9]{1})\",s.month=u;break;case\"ww\":case\"w\":r+=\"([0-9]{2}|[0-9]{1})\",s.week=u;break;case\"dd\":case\"d\":r+=\"([0-9]{2}|[0-9]{1})\",s.day=u;break;case\"DDD\":case\"DD\":case\"D\":r+=\"([0-9]{3}|[0-9]{2}|[0-9]{1})\",s.yearDay=u;break;case\"dddd\":r+=\"(\"+this.getStringList(this._weekdays()).join(\"|\")+\")\",s.weekdayLong=u;break;case\"ddd\":r+=\"(\"+this.getStringList(this._shortWeekdays()).join(\"|\")+\")\",s.weekdayShort=u;break;case\"aaa\":case\"aa\":case\"a\":r+=\"(\"+this.getStringList([\"AM\",\"PM\",\"A.M.\",\"P.M.\",\"A\",\"P\"]).join(\"|\")+\")\",s.am=u;break;case\"hh\":case\"h\":r+=\"([0-9]{2}|[0-9]{1})\",s.hour12Base1=u;break;case\"HH\":case\"H\":r+=\"([0-9]{2}|[0-9]{1})\",s.hourBase0=u;break;case\"KK\":case\"K\":r+=\"([0-9]{2}|[0-9]{1})\",s.hour12Base0=u;break;case\"kk\":case\"k\":r+=\"([0-9]{2}|[0-9]{1})\",s.hourBase1=u;break;case\"mm\":case\"m\":r+=\"([0-9]{2}|[0-9]{1})\",s.minute=u;break;case\"ss\":case\"s\":r+=\"([0-9]{2}|[0-9]{1})\",s.second=u;break;case\"SSS\":case\"SS\":case\"S\":r+=\"([0-9]{3}|[0-9]{2}|[0-9]{1})\",s.millisecond=u,s.millisecondDigits=n.parts[e].length;break;case\"nnn\":case\"nn\":case\"n\":r+=\"([0-9]{3}|[0-9]{2}|[0-9]{1})\",s.millisecond=u;break;case\"x\":r+=\"([0-9]{1,})\",s.timestamp=u;break;case\"Z\":r+=\"GMT([-+]+[0-9]{2}:[0-9]{2})\",s.zone=u;break;case\"ZZ\":r+=\"([\\\\-+]+[0-9]{2}[0-9]{2})\",s.zone=u;break;case\"i\":r+=\"([0-9]{4})-?([0-9]{2})-?([0-9]{2})T?([0-9]{2}):?([0-9]{2}):?([0-9]{2})\\\\.?([0-9]{0,3})([zZ]|[+\\\\-][0-9]{2}:?[0-9]{2}|$)\",s.iso=u,h+=7;break;case\"G\":case\"YYYY\":case\"YYY\":case\"YY\":case\"Y\":case\"MMMMM\":case\"W\":case\"EEEEE\":case\"EEEE\":case\"EEE\":case\"EE\":case\"E\":case\"eeeee\":case\"eeee\":case\"eee\":case\"ee\":case\"e\":case\"zzzz\":case\"zzz\":case\"zz\":case\"z\":case\"t\":h--}r+=\"[^0-9]*\"}let c=new RegExp(r),d=e.match(c);if(d){if(s.year>-1&&(l.year=parseInt(d[s.year])),s.year3>-1){let e=parseInt(d[s.year3]);e+=1e3,l.year=e}if(s.year2>-1){let e=parseInt(d[s.year2]);e+=e>50?1e3:2e3,l.year=e}if(s.year1>-1){let e=parseInt(d[s.year1]);e=10*Math.floor((new Date).getFullYear()/10)+e,l.year=e}if(s.monthLong>-1&&(l.month=this.resolveMonth(d[s.monthLong])),s.monthShort>-1&&(l.month=this.resolveShortMonth(d[s.monthShort])),s.month>-1&&(l.month=parseInt(d[s.month])-1),s.week>-1&&-1===s.day&&(l.month=0,l.day=o.getDayFromWeek(parseInt(d[s.week]),l.year,1,this._root.utc)),s.day>-1&&(l.day=parseInt(d[s.day])),s.yearDay>-1&&(l.month=0,l.day=parseInt(d[s.yearDay])),s.hourBase0>-1&&(l.hour=parseInt(d[s.hourBase0])),s.hourBase1>-1&&(l.hour=parseInt(d[s.hourBase1])-1),s.hour12Base0>-1){let e=parseInt(d[s.hour12Base0]);11==e&&(e=0),s.am>-1&&!this.isAm(d[s.am])&&(e+=12),l.hour=e}if(s.hour12Base1>-1){let e=parseInt(d[s.hour12Base1]);12==e&&(e=0),s.am>-1&&!this.isAm(d[s.am])&&(e+=12),l.hour=e}if(s.minute>-1&&(l.minute=parseInt(d[s.minute])),s.second>-1&&(l.second=parseInt(d[s.second])),s.millisecond>-1){let e=parseInt(d[s.millisecond]);2==s.millisecondDigits?e*=10:1==s.millisecondDigits&&(e*=100),l.millisecond=e}if(s.timestamp>-1){l.timestamp=parseInt(d[s.timestamp]);const e=new Date(l.timestamp);l.year=e.getUTCFullYear(),l.month=e.getUTCMonth(),l.day=e.getUTCDate(),l.hour=e.getUTCHours(),l.minute=e.getUTCMinutes(),l.second=e.getUTCSeconds(),l.millisecond=e.getUTCMilliseconds()}s.zone>-1&&(l.offset=this.resolveTimezoneOffset(new Date(l.year,l.month,l.day),d[s.zone])),s.iso>-1&&(l.year=a.toNumber(d[s.iso+0]),l.month=a.toNumber(d[s.iso+1])-1,l.day=a.toNumber(d[s.iso+2]),l.hour=a.toNumber(d[s.iso+3]),l.minute=a.toNumber(d[s.iso+4]),l.second=a.toNumber(d[s.iso+5]),l.millisecond=a.toNumber(d[s.iso+6]),\"Z\"==d[s.iso+7]||\"z\"==d[s.iso+7]?l.utc=!0:\"\"!=d[s.iso+7]&&(l.offset=this.resolveTimezoneOffset(new Date(l.year,l.month,l.day),d[s.iso+7]))),i=l.utc?new Date(Date.UTC(l.year,l.month,l.day,l.hour,l.minute,l.second,l.millisecond)):new Date(l.year,l.month,l.day,l.hour,l.minute+l.offset,l.second,l.millisecond)}else i=new Date(e);return i}resolveTimezoneOffset(e,t){if(t.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/)){let i=t.match(/([+\\-]?)([0-9]{2}):?([0-9]{2})/),r=i[1],n=i[2],s=i[3],a=60*parseInt(n)+parseInt(s);return\"+\"==r&&(a*=-1),a-(e||new Date).getTimezoneOffset()}return 0}resolveMonth(e){let t=this._months().indexOf(e);return t>-1||!this._root.language.isDefault()&&(t=this._root.language.translateAll(this._months()).indexOf(e),t>-1)?t:0}resolveShortMonth(e){let t=this._shortMonths().indexOf(e);return t>-1?t:(t=this._months().indexOf(e),t>-1||this._root.language&&!this._root.language.isDefault()&&(t=this._root.language.translateAll(this._shortMonths()).indexOf(e),t>-1)?t:0)}isAm(e){return this.getStringList([\"AM\",\"A.M.\",\"A\"]).indexOf(e.toUpperCase())>-1}getStringList(e){let t=[];for(let i=0;i<e.length;i++)this._root.language?t.push(o.escapeForRgex(this._t(e[i]))):t.push(o.escapeForRgex(e[i]));return t}}},7449:function(e,t,i){\"use strict\";i.d(t,{DM:function(){return h},FV:function(){return o},KK:function(){return n},cx:function(){return l},ku:function(){return s},rk:function(){return a}});var r=i(5071);class n{constructor(){Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._disposed=!1}isDisposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this._dispose())}}class s{constructor(e){Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_dispose\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._disposed=!1,this._dispose=e}isDisposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this._dispose())}}class a extends n{constructor(){super(...arguments),Object.defineProperty(this,\"_disposers\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}_dispose(){r.each(this._disposers,(e=>{e.dispose()}))}}class o extends n{constructor(e){super(),Object.defineProperty(this,\"_disposers\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._disposers=e}_dispose(){r.each(this._disposers,(e=>{e.dispose()}))}get disposers(){return this._disposers}}class l extends n{constructor(){super(...arguments),Object.defineProperty(this,\"_disposer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_value\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_dispose(){null!=this._disposer&&(this._disposer.dispose(),this._disposer=void 0)}get(){return this._value}set(e,t){null!=this._disposer&&this._disposer.dispose(),this._disposer=t,this._value=e}reset(){this.set(void 0,void 0)}}class h extends s{constructor(){super(...arguments),Object.defineProperty(this,\"_counter\",{enumerable:!0,configurable:!0,writable:!0,value:0})}increment(){return++this._counter,new s((()=>{--this._counter,0===this._counter&&this.dispose()}))}}},798:function(e,t,i){\"use strict\";i.d(t,{$:function(){return l}});var r=i(6331),n=i(7255),s=i(256),a=i(7652),o=i(5040);class l extends r.JH{constructor(){super(...arguments),Object.defineProperty(this,\"_unitAliases\",{enumerable:!0,configurable:!0,writable:!0,value:{Y:\"y\",D:\"d\",H:\"h\",K:\"h\",k:\"h\",n:\"S\"}})}_setDefaults(){const e=\"_duration_millisecond\",t=\"_duration_second\",i=\"_duration_minute\",r=\"_duration_hour\",n=\"_duration_day\",s=\"_duration_week\",a=\"_duration_month\",o=\"_minute\",l=\"_hour\",h=\"_day\",u=\"_week\",c=\"_week\",d=\"_year\";this._setDefault(\"negativeBase\",0),this._setDefault(\"baseUnit\",\"second\"),this._setDefault(\"durationFormats\",{millisecond:{millisecond:this._t(e),second:this._t(e+\"_second\"),minute:this._t(e+o),hour:this._t(e+l),day:this._t(e+h),week:this._t(e+u),month:this._t(e+c),year:this._t(e+d)},second:{second:this._t(t),minute:this._t(t+o),hour:this._t(t+l),day:this._t(t+h),week:this._t(t+u),month:this._t(t+c),year:this._t(t+d)},minute:{minute:this._t(i),hour:this._t(i+l),day:this._t(i+h),week:this._t(i+u),month:this._t(i+c),year:this._t(i+d)},hour:{hour:this._t(r),day:this._t(r+h),week:this._t(r+u),month:this._t(r+c),year:this._t(r+d)},day:{day:this._t(n),week:this._t(n+u),month:this._t(n+c),year:this._t(n+d)},week:{week:this._t(s),month:this._t(s+c),year:this._t(s+d)},month:{month:this._t(a),year:this._t(a+d)},year:{year:this._t(\"_duration_year\")}}),super._setDefaults()}_beforeChanged(){super._beforeChanged()}format(e,t,i){let r=i||this.get(\"baseUnit\");void 0!==t&&\"\"!==t||(t=null!=this.get(\"durationFormat\")?this.get(\"durationFormat\"):this.getFormat(o.toNumber(e),void 0,r)),t=a.cleanFormat(t);let n,s=this.parseFormat(t,r),l=Number(e);n=l>this.get(\"negativeBase\")?s.positive:l<this.get(\"negativeBase\")?s.negative:s.zero;let h=this.applyFormat(l,n);return\"\"!==n.color&&(h=\"[\"+n.color+\"]\"+h+\"[/]\"),h}parseFormat(e,t){let i=t||this.get(\"baseUnit\"),r={positive:{color:\"\",template:\"\",parts:[],source:\"\",baseUnit:i,parsed:!1,absolute:!1},negative:{color:\"\",template:\"\",parts:[],source:\"\",baseUnit:i,parsed:!1,absolute:!1},zero:{color:\"\",template:\"\",parts:[],source:\"\",baseUnit:i,parsed:!1,absolute:!1}},a=(e=e.replace(\"||\",o.PLACEHOLDER2)).split(\"|\");return r.positive.source=a[0],void 0===a[2]?r.zero=r.positive:r.zero.source=a[2],void 0===a[1]?r.negative=r.positive:r.negative.source=a[1],s.each(r,((e,t)=>{if(t.parsed)return;let i=t.source,r=[];r=t.source.match(/^\\[([^\\]]*)\\]/),r&&r.length&&\"\"!==r[0]&&(i=t.source.substr(r[0].length),t.color=r[1]);let s=n.V.chunk(i,!0);for(let e=0;e<s.length;e++){let i=s[e];if(i.text=i.text.replace(o.PLACEHOLDER2,\"|\"),\"value\"===i.type){i.text.match(/[yYMdDwhHKkmsSn]+a/)&&(t.absolute=!0,i.text=i.text.replace(/([yYMdDwhHKkmsSn]+)a/,\"$1\"));let e=i.text.match(/y+|Y+|M+|d+|D+|w+|h+|H+|K+|k+|m+|s+|S+|n+/g);if(e)for(let r=0;r<e.length;r++)null==e[r]&&(e[r]=this._unitAliases[e[r]]),t.parts.push(e[r]),i.text=i.text.replace(e[r],o.PLACEHOLDER)}t.template+=i.text}t.parsed=!0})),r}applyFormat(e,t){let i=!t.absolute&&e<this.get(\"negativeBase\");e=Math.abs(e);let r=this.toTimeStamp(e,t.baseUnit),n=t.template;for(let e=0,i=t.parts.length;e<i;e++){let i=t.parts[e],s=this._toTimeUnit(i.substr(0,1)),l=i.length,h=Math.floor(r/this._getUnitValue(s));n=n.replace(o.PLACEHOLDER,a.padString(h,l,\"0\")),r-=h*this._getUnitValue(s)}return i&&(n=\"-\"+n),n}toTimeStamp(e,t){return e*this._getUnitValue(t)}_toTimeUnit(e){switch(e){case\"S\":return\"millisecond\";case\"s\":return\"second\";case\"m\":return\"minute\";case\"h\":return\"hour\";case\"d\":return\"day\";case\"w\":return\"week\";case\"M\":return\"month\";case\"y\":return\"year\"}}getFormat(e,t,i){if(null!=this.get(\"durationFormat\"))return this.get(\"durationFormat\");if(i||(i=this.get(\"baseUnit\")),null!=t&&e!=t){e=Math.abs(e),t=Math.abs(t);let r=this.getValueUnit(Math.max(e,t),i);return this.get(\"durationFormats\")[i][r]}{let t=this.getValueUnit(e,i);return this.get(\"durationFormats\")[i][t]}}getValueUnit(e,t){let i;t||(t=this.get(\"baseUnit\"));let r=this.getMilliseconds(e,t);return s.eachContinue(this._getUnitValues(),((e,n)=>{if(e==t||i){if(r/n<=1)return i||(i=e),!1;i=e}return!0})),i}getMilliseconds(e,t){return t||(t=this.get(\"baseUnit\")),e*this._getUnitValue(t)}_getUnitValue(e){return this._getUnitValues()[e]}_getUnitValues(){return{millisecond:1,second:1e3,minute:6e4,hour:36e5,day:864e5,week:6048e5,month:2592e6,year:31536e6}}}},9395:function(e,t,i){\"use strict\";i.r(t),i.d(t,{bounce:function(){return P},circle:function(){return u},cubic:function(){return a},elastic:function(){return E},exp:function(){return l},inOut:function(){return p},linear:function(){return n},out:function(){return d},pow:function(){return o},quad:function(){return s},sine:function(){return h},yoyo:function(){return c}});var r=i(751);function n(e){return e}function s(e){return e*e}function a(e){return e*e*e}function o(e,t){return Math.pow(e,t)}function l(e){return Math.pow(2,10*e-10)}function h(e){return 1-Math.cos(e*r.HALFPI)}function u(e){return 1-Math.sqrt(1-e*e)}function c(e){return function(t){return e(t<.5?2*t:2*(1-t))}}function d(e){return function(t){return 1-e(1-t)}}function p(e){return function(t){return t<=.5?e(2*t)/2:1-e(2*(1-t))/2}}let f=4/11,g=6/11,m=8/11,b=3/4,_=9/11,v=10/11,y=15/16,w=21/22,x=63/64,O=1/f/f;function P(e){return 1-function(e){return e<f?O*e*e:e<m?O*(e-=g)*e+b:e<v?O*(e-=_)*e+y:O*(e-=w)*e+x}(1-e)}let D=2*Math.PI,k=1,T=.3/D,M=Math.asin(1/k)*T;function E(e){let t=e;return k*Math.pow(2,10*--t)*Math.sin((M-t)/T)}},6331:function(e,t,i){\"use strict\";i.d(t,{JH:function(){return b},Zr:function(){return m}});var r=i(7449),n=i(9770),s=i(6490),a=i(256),o=i(9395);class l{constructor(e,t){Object.defineProperty(this,\"_entity\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_settings\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_userSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),this._entity=e,this._settings=t,a.each(t,(e=>{this._userSettings[e]=!0}))}get(e,t){const i=this._settings[e];return void 0!==i?i:t}setRaw(e,t){this._settings[e]=t}set(e,t){this._userSettings[e]=!0,this.setRaw(e,t)}remove(e){delete this._userSettings[e],delete this._settings[e]}setAll(e){a.keys(e).forEach((t=>{this.set(t,e[t])}))}_eachSetting(e){a.each(this._settings,e)}apply(){const e={stateAnimationEasing:!0,stateAnimationDuration:!0},t=this._entity.states.lookup(\"default\");this._eachSetting(((i,r)=>{e[i]||(e[i]=!0,this!==t&&(i in t._settings||(t._settings[i]=this._entity.get(i))),this._entity.set(i,r))}))}applyAnimate(e){null==e&&(e=this._settings.stateAnimationDuration),null==e&&(e=this.get(\"stateAnimationDuration\",this._entity.get(\"stateAnimationDuration\",0)));let t=this._settings.stateAnimationEasing;null==t&&(t=this.get(\"stateAnimationEasing\",this._entity.get(\"stateAnimationEasing\",o.cubic)));const i=this._entity.states.lookup(\"default\"),r={stateAnimationEasing:!0,stateAnimationDuration:!0},n={};return this._eachSetting(((s,a)=>{if(!r[s]){r[s]=!0,this!=i&&(s in i._settings||(i._settings[s]=this._entity.get(s)));const o=this._entity.animate({key:s,to:a,duration:e,easing:t});o&&(n[s]=o)}})),n}}class h{constructor(e){Object.defineProperty(this,\"_states\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_entity\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._entity=e}lookup(e){return this._states[e]}create(e,t){const i=this._states[e];if(i)return i.setAll(t),i;{const i=new l(this._entity,t);return this._states[e]=i,i}}remove(e){delete this._states[e]}apply(e){const t=this._states[e];t&&t.apply(),this._entity._applyState(e)}applyAnimate(e,t){let i;const r=this._states[e];return r&&(i=r.applyAnimate(t)),this._entity._applyStateAnimated(e,t),i}}var u=i(3145),c=i(5071),d=i(3540);class p{constructor(e){Object.defineProperty(this,\"_entity\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_callbacks\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_disabled\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),this._entity=e}add(e,t){let i=this._callbacks[e];return void 0===i&&(i=this._callbacks[e]=[]),i.push(t),this._entity._markDirtyKey(e),new r.ku((()=>{c.removeFirst(i,t)&&this._entity._markDirtyKey(e)}))}remove(e){const t=this._callbacks[e];void 0!==t&&(delete this._callbacks[e],0!==t.length&&this._entity._markDirtyKey(e))}enable(e){this._disabled[e]&&(delete this._disabled[e],this._entity._markDirtyKey(e))}disable(e){this._disabled[e]||(this._disabled[e]=!0,this._entity._markDirtyKey(e))}fold(e,t){if(!this._disabled[e]){const i=this._callbacks[e];if(void 0!==i)for(let r=0,n=i.length;r<n;++r)t=i[r](t,this._entity,e)}return t}}class f{constructor(e,t,i,r,a,o,l){Object.defineProperty(this,\"_animation\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_from\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_to\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_duration\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_easing\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_loops\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_interpolate\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_oldTime\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_time\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_stopped\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_playing\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"events\",{enumerable:!0,configurable:!0,writable:!0,value:new n.p}),this._animation=e,this._from=t,this._to=i,this._duration=r,this._easing=a,this._loops=o,this._interpolate=(0,s.XG)(t,i),this._oldTime=l}get to(){return this._to}get from(){return this._from}get playing(){return this._playing}get stopped(){return this._stopped}stop(){this._stopped||(this._stopped=!0,this._playing=!1,this.events.isEnabled(\"stopped\")&&this.events.dispatch(\"stopped\",{type:\"stopped\",target:this}))}pause(){this._playing=!1,this._oldTime=null}play(){this._stopped||this._playing||(this._playing=!0,this._animation._startAnimation())}get percentage(){return this._time/this._duration}waitForStop(){return new Promise(((e,t)=>{if(this._stopped)e();else{const t=()=>{i.dispose(),e()},i=this.events.on(\"stopped\",t)}}))}_checkEnded(){return!(this._loops>1&&(--this._loops,1))}_run(e){null!==this._oldTime&&(this._time+=e-this._oldTime,this._time>this._duration&&(this._time=this._duration)),this._oldTime=e}_reset(e){this._oldTime=e,this._time=0}_value(e){return this._interpolate(this._easing(e),this._from,this._to)}}let g=0;class m{constructor(e){Object.defineProperty(this,\"uid\",{enumerable:!0,configurable:!0,writable:!0,value:++g}),Object.defineProperty(this,\"_settings\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_privateSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_settingEvents\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_privateSettingEvents\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_prevSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_prevPrivateSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_animatingSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_animatingPrivateSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_playingAnimations\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_userProperties\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),this._settings=e}_checkDirty(){a.keys(this._settings).forEach((e=>{this._userProperties[e]=!0,this._markDirtyKey(e)}))}resetUserSettings(){this._userProperties={}}_runAnimation(e){return!this.isDisposed()&&(a.each(this._animatingSettings,((t,i)=>{if(i._stopped)this._stopAnimation(t);else if(i._playing){i._run(e);const r=i.percentage;r>=1?i._checkEnded()?this.set(t,i._value(1)):(i._reset(e),this._set(t,i._value(1))):this._set(t,i._value(r))}})),a.each(this._animatingPrivateSettings,((t,i)=>{if(i._stopped)this._stopAnimationPrivate(t);else if(i._playing){i._run(e);const r=i.percentage;r>=1?i._checkEnded()?this.setPrivate(t,i._value(1)):(i._reset(e),this._setPrivate(t,i._value(1))):this._setPrivate(t,i._value(r))}})),0!==this._playingAnimations)}_markDirtyKey(e){this.markDirty()}_markDirtyPrivateKey(e){this.markDirty()}on(e,t){let i=this._settingEvents[e];return void 0===i&&(i=this._settingEvents[e]=[]),i.push(t),new r.ku((()=>{c.removeFirst(i,t),0===i.length&&delete this._settingEvents[e]}))}onPrivate(e,t){let i=this._privateSettingEvents[e];return void 0===i&&(i=this._privateSettingEvents[e]=[]),i.push(t),new r.ku((()=>{c.removeFirst(i,t),0===i.length&&delete this._privateSettingEvents[e]}))}getRaw(e,t){const i=this._settings[e];return void 0!==i?i:t}get(e,t){return this.getRaw(e,t)}_sendKeyEvent(e,t){const i=this._settingEvents[e];void 0!==i&&c.each(i,(i=>{i(t,this,e)}))}_sendPrivateKeyEvent(e,t){const i=this._privateSettingEvents[e];void 0!==i&&c.each(i,(i=>{i(t,this,e)}))}_setRaw(e,t,i){this._prevSettings[e]=t,this._sendKeyEvent(e,i)}setRaw(e,t){const i=this._settings[e];this._settings[e]=t,i!==t&&this._setRaw(e,i,t)}_set(e,t){const i=this._settings[e];this._settings[e]=t,i!==t&&(this._setRaw(e,i,t),this._markDirtyKey(e))}_stopAnimation(e){const t=this._animatingSettings[e];t&&(--this._playingAnimations,delete this._animatingSettings[e],t.stop())}set(e,t){return this._set(e,t),this._stopAnimation(e),t}remove(e){e in this._settings&&(this._prevSettings[e]=this._settings[e],delete this._settings[e],this._sendKeyEvent(e,void 0),this._markDirtyKey(e)),this._stopAnimation(e)}removeAll(){c.each(a.keys(this._settings),(e=>{this.remove(e)}))}getPrivate(e,t){const i=this._privateSettings[e];return void 0!==i?i:t}_setPrivateRaw(e,t,i){this._prevPrivateSettings[e]=t,this._sendPrivateKeyEvent(e,i)}setPrivateRaw(e,t){const i=this._privateSettings[e];this._privateSettings[e]=t,i!==t&&this._setPrivateRaw(e,i,t)}_setPrivate(e,t){const i=this._privateSettings[e];this._privateSettings[e]=t,i!==t&&(this._setPrivateRaw(e,i,t),this._markDirtyPrivateKey(e))}_stopAnimationPrivate(e){const t=this._animatingPrivateSettings[e];t&&(--this._playingAnimations,t.stop(),delete this._animatingPrivateSettings[e])}setPrivate(e,t){return this._setPrivate(e,t),this._stopAnimationPrivate(e),t}removePrivate(e){e in this._privateSettings&&(this._prevPrivateSettings[e]=this._privateSettings[e],delete this._privateSettings[e],this._markDirtyPrivateKey(e)),this._stopAnimationPrivate(e)}setAll(e){a.each(e,((e,t)=>{this.set(e,t)}))}animate(e){const t=e.key,i=e.to,r=e.duration||0,n=e.loops||1,s=void 0===e.from?this.get(t):e.from,a=void 0===e.easing?o.linear:e.easing;if(0===r)this.set(t,i);else{if(void 0!==s&&s!==i){this.set(t,s);const e=this._animatingSettings[t]=new f(this,s,i,r,a,n,this._animationTime());return++this._playingAnimations,this._startAnimation(),e}this.set(t,i)}const l=new f(this,s,i,r,a,n,null);return l.stop(),l}animatePrivate(e){const t=e.key,i=e.to,r=e.duration||0,n=e.loops||1,s=void 0===e.from?this.getPrivate(t):e.from,a=void 0===e.easing?o.linear:e.easing;if(0===r)this.setPrivate(t,i);else{if(void 0!==s&&s!==i){this.setPrivate(t,s);const e=this._animatingPrivateSettings[t]=new f(this,s,i,r,a,n,this._animationTime());return++this._playingAnimations,this._startAnimation(),e}this.setPrivate(t,i)}const l=new f(this,s,i,r,a,n,null);return l.stop(),l}_dispose(){}isDisposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this._dispose())}}class b extends m{constructor(e,t,i,r=[]){if(super(t),Object.defineProperty(this,\"_root\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_user_id\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"states\",{enumerable:!0,configurable:!0,writable:!0,value:new h(this)}),Object.defineProperty(this,\"adapters\",{enumerable:!0,configurable:!0,writable:!0,value:new p(this)}),Object.defineProperty(this,\"events\",{enumerable:!0,configurable:!0,writable:!0,value:this._createEvents()}),Object.defineProperty(this,\"_userPrivateProperties\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_dirty\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_dirtyPrivate\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_template\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_templates\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_internalTemplates\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_defaultThemes\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_templateDisposers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_disposers\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_runSetup\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"_disposerProperties\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),!i)throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");this._root=e,this._internalTemplates=r,t.id&&this._registerId(t.id)}static new(e,t,i){const r=new this(e,t,!0);return r._template=i,r._afterNew(),r}static _new(e,t,i=[]){const r=new this(e,t,!0,i);return r._afterNew(),r}_afterNew(){this._checkDirty();let e=!1;const t=this._template;t&&(e=!0,t._setObjectTemplate(this)),c.each(this._internalTemplates,(t=>{e=!0,t._setObjectTemplate(this)})),e&&this._applyTemplates(!1),this.states.create(\"default\",{}),this._setDefaults()}_afterNewApplyThemes(){this._checkDirty();const e=this._template;e&&e._setObjectTemplate(this),c.each(this._internalTemplates,(e=>{e._setObjectTemplate(this)})),this.states.create(\"default\",{}),this._setDefaults(),this._applyThemes()}_createEvents(){return new n.p}get classNames(){return this.constructor.classNames}get className(){return this.constructor.className}_setDefaults(){}_setDefault(e,t){e in this._settings||super.set(e,t)}_setRawDefault(e,t){e in this._settings||super.setRaw(e,t)}_clearDirty(){a.keys(this._dirty).forEach((e=>{this._dirty[e]=!1})),a.keys(this._dirtyPrivate).forEach((e=>{this._dirtyPrivate[e]=!1}))}isDirty(e){return!!this._dirty[e]}isPrivateDirty(e){return!!this._dirtyPrivate[e]}_markDirtyKey(e){this._dirty[e]=!0,super._markDirtyKey(e)}_markDirtyPrivateKey(e){this._dirtyPrivate[e]=!0,super._markDirtyKey(e)}isType(e){return-1!==this.classNames.indexOf(e)}_pushPropertyDisposer(e,t){let i=this._disposerProperties[e];return void 0===i&&(i=this._disposerProperties[e]=[]),i.push(t),t}_disposeProperty(e){const t=this._disposerProperties[e];void 0!==t&&(c.each(t,(e=>{e.dispose()})),delete this._disposerProperties[e])}set template(e){const t=this._template;t!==e&&(this._template=e,t&&t._removeObjectTemplate(this),e&&e._setObjectTemplate(this),this._applyTemplates())}get template(){return this._template}markDirty(){this._root._addDirtyEntity(this)}_startAnimation(){this._root._addAnimation(this)}_animationTime(){return this._root.animationTime}_applyState(e){}_applyStateAnimated(e,t){}get(e,t){const i=this.adapters.fold(e,this._settings[e]);return void 0!==i?i:t}isUserSetting(e){return this._userProperties[e]||!1}set(e,t){return this._userProperties[e]=!0,super.set(e,t)}setRaw(e,t){this._userProperties[e]=!0,super.setRaw(e,t)}_setSoft(e,t){return this._userProperties[e]?t:super.set(e,t)}remove(e){delete this._userProperties[e],this._removeTemplateProperty(e)}setPrivate(e,t){return this._userPrivateProperties[e]=!0,super.setPrivate(e,t)}setPrivateRaw(e,t){this._userPrivateProperties[e]=!0,super.setPrivateRaw(e,t)}removePrivate(e){delete this._userPrivateProperties[e],this._removeTemplatePrivateProperty(e)}_setTemplateProperty(e,t,i){this._userProperties[t]||e===this._findTemplateByKey(t)&&super.set(t,i)}_setTemplatePrivateProperty(e,t,i){this._userPrivateProperties[t]||e===this._findTemplateByPrivateKey(t)&&super.setPrivate(t,i)}_removeTemplateProperty(e){if(!this._userProperties[e]){const t=this._findTemplateByKey(e);t?super.set(e,t._settings[e]):super.remove(e)}}_removeTemplatePrivateProperty(e){if(!this._userPrivateProperties[e]){const t=this._findTemplateByPrivateKey(e);t?super.setPrivate(e,t._privateSettings[e]):super.removePrivate(e)}}_walkParents(e){e(this._root._rootContainer),e(this)}_applyStateByKey(e){const t=this.states.create(e,{}),i={};this._eachTemplate((r=>{const n=r.states.lookup(e);n&&n._apply(t,i)})),a.each(t._settings,(e=>{i[e]||t._userSettings[e]||t.remove(e)}))}_applyTemplate(e,t){this._templateDisposers.push(e._apply(this,t)),a.each(e._settings,((e,i)=>{t.settings[e]||this._userProperties[e]||(t.settings[e]=!0,super.set(e,i))})),a.each(e._privateSettings,((e,i)=>{t.privateSettings[e]||this._userPrivateProperties[e]||(t.privateSettings[e]=!0,super.setPrivate(e,i))})),this._runSetup&&e.setup&&(this._runSetup=!1,e.setup(this))}_findStaticTemplate(e){if(this._template&&e(this._template))return this._template}_eachTemplate(e){this._findStaticTemplate((t=>(e(t),!1))),c.eachReverse(this._internalTemplates,e),c.each(this._templates,e)}_applyTemplates(e=!0){e&&this._disposeTemplates();const t={settings:{},privateSettings:{},states:{}};this._eachTemplate((e=>{this._applyTemplate(e,t)})),e&&(a.each(this._settings,(e=>{this._userProperties[e]||t.settings[e]||super.remove(e)})),a.each(this._privateSettings,(e=>{this._userPrivateProperties[e]||t.privateSettings[e]||super.removePrivate(e)})))}_findTemplate(e){const t=this._findStaticTemplate(e);if(void 0===t){const t=c.findReverse(this._internalTemplates,e);return void 0===t?c.find(this._templates,e):t}return t}_findTemplateByKey(e){return this._findTemplate((t=>e in t._settings))}_findTemplateByPrivateKey(e){return this._findTemplate((t=>e in t._privateSettings))}_disposeTemplates(){c.each(this._templateDisposers,(e=>{e.dispose()})),this._templateDisposers.length=0}_removeTemplates(){c.each(this._templates,(e=>{e._removeObjectTemplate(this)})),this._templates.length=0}_applyThemes(e=!1){let t=!1;const i=[];let r=[];const n=new Set,s=this.get(\"themeTagsSelf\");return s&&c.each(s,(e=>{n.add(e)})),this._walkParents((e=>{e===this._root._rootContainer&&(t=!0),e._defaultThemes.length>0&&i.push(e._defaultThemes);const s=e.get(\"themes\");s&&r.push(s);const a=e.get(\"themeTags\");a&&c.each(a,(e=>{n.add(e)}))})),r=i.concat(r),this._removeTemplates(),(t||e)&&c.eachReverse(this.classNames,(e=>{const t=[];c.each(r,(i=>{c.each(i,(i=>{const r=i._lookupRules(e);r&&c.eachReverse(r,(e=>{if(e.tags.every((e=>n.has(e)))){const i=c.getFirstSortedIndex(t,(t=>{const i=d.qu(e.tags.length,t.tags.length);return 0===i?d.wq(e.tags,t.tags,d.qu):i}));t.splice(i.index,0,e)}}))}))})),c.each(t,(e=>{this._templates.push(e.template),e.template._setObjectTemplate(this)}))})),this._applyTemplates(),(t||e)&&(this._runSetup=!1),t||e}_changed(){}_beforeChanged(){if(this.isDirty(\"id\")){const e=this.get(\"id\");e&&this._registerId(e);const t=this._prevSettings.id;t&&delete u.i_.entitiesById[t]}}_registerId(e){if(u.i_.entitiesById[e]&&u.i_.entitiesById[e]!==this)throw new Error('An entity with id \"'+e+'\" already exists.');u.i_.entitiesById[e]=this}_afterChanged(){}addDisposer(e){return this._disposers.push(e),e}_dispose(){super._dispose();const e=this._template;e&&e._removeObjectTemplate(this),c.each(this._internalTemplates,(e=>{e._removeObjectTemplate(this)})),this._removeTemplates(),this._disposeTemplates(),this.events.dispose(),this._disposers.forEach((e=>{e.dispose()})),a.each(this._disposerProperties,((e,t)=>{c.each(t,(e=>{e.dispose()}))}));const t=this.get(\"id\");t&&delete u.i_.entitiesById[t]}setTimeout(e,t){const i=setTimeout((()=>{this.removeDispose(n),e()}),t),n=new r.ku((()=>{clearTimeout(i)}));return this._disposers.push(n),n}removeDispose(e){if(!this.isDisposed()){let t=c.indexOf(this._disposers,e);t>-1&&this._disposers.splice(t,1)}e.dispose()}hasTag(e){return-1!==c.indexOf(this.get(\"themeTags\",[]),e)}addTag(e){if(!this.hasTag(e)){const t=this.get(\"themeTags\",[]);t.push(e),this.set(\"themeTags\",t)}}removeTag(e){if(this.hasTag(e)){const t=this.get(\"themeTags\",[]);c.remove(t,e),this.set(\"themeTags\",t)}}_t(e,t,...i){return this._root.language.translate(e,t,...i)}get root(){return this._root}}Object.defineProperty(b,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Entity\"}),Object.defineProperty(b,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:[\"Entity\"]})},9770:function(e,t,i){\"use strict\";i.d(t,{p:function(){return a}});var r=i(7449),n=i(5071),s=i(5040);class a{constructor(){Object.defineProperty(this,\"_listeners\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_killed\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_disabled\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_iterating\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_enabled\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._listeners=[],this._killed=[],this._disabled={},this._iterating=0,this._enabled=!0,this._disposed=!1}isDisposed(){return this._disposed}dispose(){if(!this._disposed){this._disposed=!0;const e=this._listeners;this._iterating=1,this._listeners=null,this._disabled=null;try{n.each(e,(e=>{e.disposer.dispose()}))}finally{this._killed=null,this._iterating=null}}}hasListeners(){return 0!==this._listeners.length}hasListenersByType(e){return n.any(this._listeners,(t=>(null===t.type||t.type===e)&&!t.killed))}enable(){this._enabled=!0}disable(){this._enabled=!1}enableType(e){delete this._disabled[e]}disableType(e,t=1/0){this._disabled[e]=t}_removeListener(e){if(0===this._iterating){const t=this._listeners.indexOf(e);if(-1===t)throw new Error(\"Invalid state: could not remove listener\");this._listeners.splice(t,1)}else this._killed.push(e)}_removeExistingListener(e,t,i,r){if(this._disposed)throw new Error(\"EventDispatcher is disposed\");this._eachListener((n=>{n.once!==e||n.type!==t||void 0!==i&&n.callback!==i||n.context!==r||n.disposer.dispose()}))}isEnabled(e){if(this._disposed)throw new Error(\"EventDispatcher is disposed\");return this._enabled&&this._listeners.length>0&&this.hasListenersByType(e)&&void 0===this._disabled[e]}removeType(e){if(this._disposed)throw new Error(\"EventDispatcher is disposed\");this._eachListener((t=>{t.type===e&&t.disposer.dispose()}))}has(e,t,i){return-1!==n.findIndex(this._listeners,(r=>!0!==r.once&&r.type===e&&(void 0===t||r.callback===t)&&r.context===i))}_shouldDispatch(e){if(this._disposed)throw new Error(\"EventDispatcher is disposed\");const t=this._disabled[e];return s.isNumber(t)?(t<=1?delete this._disabled[e]:--this._disabled[e],!1):this._enabled}_eachListener(e){++this._iterating;try{n.each(this._listeners,e)}finally{--this._iterating,0===this._iterating&&0!==this._killed.length&&(n.each(this._killed,(e=>{this._removeListener(e)})),this._killed.length=0)}}dispatch(e,t){this._shouldDispatch(e)&&this._eachListener((i=>{i.killed||null!==i.type&&i.type!==e||i.dispatch(e,t)}))}_on(e,t,i,n,s,a){if(this._disposed)throw new Error(\"EventDispatcher is disposed\");this._removeExistingListener(e,t,i,n);const o={type:t,callback:i,context:n,shouldClone:s,dispatch:a,killed:!1,once:e,disposer:new r.ku((()=>{o.killed=!0,this._removeListener(o)}))};return this._listeners.push(o),o}onAll(e,t,i=!0){return this._on(!1,null,e,t,i,((i,r)=>e.call(t,r))).disposer}on(e,t,i,r=!0){return this._on(!1,e,t,i,r,((e,r)=>t.call(i,r))).disposer}once(e,t,i,r=!0){const n=this._on(!0,e,t,i,r,((e,r)=>{n.disposer.dispose(),t.call(i,r)}));return n.disposer}off(e,t,i){this._removeExistingListener(!1,e,t,i)}copyFrom(e){if(this._disposed)throw new Error(\"EventDispatcher is disposed\");if(e===this)throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");const t=[];return n.each(e._listeners,(e=>{!e.killed&&e.shouldClone&&(null===e.type?t.push(this.onAll(e.callback,e.context)):e.once?t.push(this.once(e.type,e.callback,e.context)):t.push(this.on(e.type,e.callback,e.context)))})),new r.FV(t)}}},9821:function(e,t,i){\"use strict\";i.d(t,{v:function(){return n}});var r=i(6331);class n extends r.JH{}Object.defineProperty(n,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"InterfaceColors\"}),Object.defineProperty(n,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([n.className])})},7144:function(e,t,i){\"use strict\";i.d(t,{aV:function(){return a},dn:function(){return o},o:function(){return l}});var r=i(9770),n=i(5071);function s(e,t){if(!(e>=0&&e<t))throw new Error(\"Index out of bounds: \"+e)}class a{constructor(e=[]){Object.defineProperty(this,\"_values\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"events\",{enumerable:!0,configurable:!0,writable:!0,value:new r.p}),this._values=e}get values(){return this._values}contains(e){return-1!==this._values.indexOf(e)}removeValue(e){let t=0,i=this._values.length;for(;t<i;)this._values[t]===e?(this.removeIndex(t),--i):++t}indexOf(e){return n.indexOf(this._values,e)}get length(){return this._values.length}hasIndex(e){return e>=0&&e<this._values.length}getIndex(e){return this._values[e]}_onPush(e){this.events.isEnabled(\"push\")&&this.events.dispatch(\"push\",{type:\"push\",target:this,newValue:e})}_onInsertIndex(e,t){this.events.isEnabled(\"insertIndex\")&&this.events.dispatch(\"insertIndex\",{type:\"insertIndex\",target:this,index:e,newValue:t})}_onSetIndex(e,t,i){this.events.isEnabled(\"setIndex\")&&this.events.dispatch(\"setIndex\",{type:\"setIndex\",target:this,index:e,oldValue:t,newValue:i})}_onRemoveIndex(e,t){this.events.isEnabled(\"removeIndex\")&&this.events.dispatch(\"removeIndex\",{type:\"removeIndex\",target:this,index:e,oldValue:t})}_onMoveIndex(e,t,i){this.events.isEnabled(\"moveIndex\")&&this.events.dispatch(\"moveIndex\",{type:\"moveIndex\",target:this,oldIndex:e,newIndex:t,value:i})}_onClear(e){this.events.isEnabled(\"clear\")&&this.events.dispatch(\"clear\",{type:\"clear\",target:this,oldValues:e})}setIndex(e,t){s(e,this._values.length);const i=this._values[e];return i!==t&&(this._values[e]=t,this._onSetIndex(e,i,t)),i}insertIndex(e,t){return s(e,this._values.length+1),n.insertIndex(this._values,e,t),this._onInsertIndex(e,t),t}swap(e,t){const i=this._values.length;if(s(e,i),s(t,i),e!==t){const i=this._values[e],r=this._values[t];this._values[e]=r,this._onSetIndex(e,i,r),this._values[t]=i,this._onSetIndex(t,r,i)}}removeIndex(e){s(e,this._values.length);const t=this._values[e];return n.removeIndex(this._values,e),this._onRemoveIndex(e,t),t}moveValue(e,t){let i=this.indexOf(e);if(-1!==i)if(n.removeIndex(this._values,i),null==t){const t=this._values.length;this._values.push(e),this._onMoveIndex(i,t,e)}else n.insertIndex(this._values,t,e),this._onMoveIndex(i,t,e);else null==t?(this._values.push(e),this._onPush(e)):(n.insertIndex(this._values,t,e),this._onInsertIndex(t,e));return e}push(e){return this._values.push(e),this._onPush(e),e}unshift(e){return this.insertIndex(0,e),e}pushAll(e){n.each(e,(e=>{this.push(e)}))}copyFrom(e){this.pushAll(e._values)}pop(){return this._values.length-1<0?void 0:this.removeIndex(this._values.length-1)}shift(){return this._values.length?this.removeIndex(0):void 0}setAll(e){const t=this._values;this._values=[],this._onClear(t),n.each(e,(e=>{this._values.push(e),this._onPush(e)}))}clear(){this.setAll([])}*[Symbol.iterator](){const e=this._values.length;for(let t=0;t<e;++t)yield this._values[t]}each(e){n.each(this._values,e)}eachReverse(e){n.eachReverse(this._values,e)}}class o extends a{constructor(){super(...arguments),Object.defineProperty(this,\"autoDispose\",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.defineProperty(this,\"_disposed\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_onSetIndex(e,t,i){this.autoDispose&&t.dispose(),super._onSetIndex(e,t,i)}_onRemoveIndex(e,t){this.autoDispose&&t.dispose(),super._onRemoveIndex(e,t)}_onClear(e){this.autoDispose&&n.each(e,(e=>{e.dispose()})),super._onClear(e)}isDisposed(){return this._disposed}dispose(){this._disposed||(this._disposed=!0,this.autoDispose&&n.each(this._values,(e=>{e.dispose()})))}}class l extends o{constructor(e,t){super(),Object.defineProperty(this,\"template\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"make\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.template=e,this.make=t}}},751:function(e,t,i){\"use strict\";i.r(t),i.d(t,{DEGREES:function(){return o},HALFPI:function(){return s},PI:function(){return n},RADIANS:function(){return a},boundsOverlap:function(){return k},ceil:function(){return h},circlesOverlap:function(){return M},closest:function(){return D},cos:function(){return g},fitAngleToRange:function(){return y},fitToRange:function(){return d},getAngle:function(){return x},getArcBounds:function(){return b},getArcPoint:function(){return _},getCubicControlPointA:function(){return u},getCubicControlPointB:function(){return c},getPointOnLine:function(){return P},getPointOnQuadraticCurve:function(){return O},inBounds:function(){return w},mergeBounds:function(){return v},normalizeAngle:function(){return m},round:function(){return l},sin:function(){return p},spiralPoints:function(){return T},tan:function(){return f}});var r=i(5040);const n=Math.PI,s=n/2,a=n/180,o=180/n;function l(e,t,i){if(!(0,r.isNumber)(t)||t<=0){let t=Math.round(e);return i&&t-e==.5&&t--,t}{let i=Math.pow(10,t);return Math.round(e*i)/i}}function h(e,t){if(!(0,r.isNumber)(t)||t<=0)return Math.ceil(e);{let i=Math.pow(10,t);return Math.ceil(e*i)/i}}function u(e,t,i,r,n){return{x:(-e.x+t.x/r+i.x)*r,y:(-e.y+t.y/n+i.y)*n}}function c(e,t,i,r,n){return{x:(e.x+t.x/r-i.x)*r,y:(e.y+t.y/n-i.y)*n}}function d(e,t,i){return Math.min(Math.max(e,t),i)}function p(e){return Math.sin(a*e)}function f(e){return Math.tan(a*e)}function g(e){return Math.cos(a*e)}function m(e){return(e%=360)<0&&(e+=360),e}function b(e,t,i,r,n){let s=Number.MAX_VALUE,a=Number.MAX_VALUE,o=-Number.MAX_VALUE,l=-Number.MAX_VALUE,h=[];h.push(_(n,i)),h.push(_(n,r));let u=Math.min(90*Math.floor(i/90),90*Math.floor(r/90)),c=Math.max(90*Math.ceil(i/90),90*Math.ceil(r/90));for(let e=u;e<=c;e+=90)e>=i&&e<=r&&h.push(_(n,e));for(let e=0;e<h.length;e++){let t=h[e];t.x<s&&(s=t.x),t.y<a&&(a=t.y),t.x>o&&(o=t.x),t.y>l&&(l=t.y)}return{left:e+s,top:t+a,right:e+o,bottom:t+l}}function _(e,t){return{x:e*g(t),y:e*p(t)}}function v(e){const t=e.length;if(t>0){let i=e[0],r=i.left,n=i.top,s=i.right,a=i.bottom;if(t>1)for(let o=1;o<t;o++)i=e[o],r=Math.min(i.left,r),s=Math.max(i.right,s),n=Math.min(i.top,n),a=Math.max(i.bottom,a);return{left:r,right:s,top:n,bottom:a}}return{left:0,right:0,top:0,bottom:0}}function y(e,t,i){if(t>i){let e=t;t=i,i=e}e=m(e);let r=(t-m(t))/360;return e<t&&(e+=360*(r+1)),e>i&&(e-360>t?e-=360:e=e<t+(i-t)/2+180?i:t),e<t&&(e=e>t+(i-t)/2-180?t:i),e}function w(e,t){return e.x>=t.left&&e.y>=t.top&&e.x<=t.right&&e.y<=t.bottom}function x(e,t){t||(t={x:2*e.x,y:2*e.y});let i=t.x-e.x,r=t.y-e.y,n=Math.atan2(r,i)*o;return n<0&&(n+=360),m(n)}function O(e,t,i,r){return{x:(1-r)*(1-r)*e.x+2*(1-r)*r*i.x+r*r*t.x,y:(1-r)*(1-r)*e.y+2*(1-r)*r*i.y+r*r*t.y}}function P(e,t,i){return{x:e.x+(t.x-e.x)*i,y:e.y+(t.y-e.y)*i}}function D(e,t){return e.reduce((function(e,i){return Math.abs(i-t)<Math.abs(e-t)?i:e}))}function k(e,t){const i=e.left<t.right&&e.right>t.left,r=e.top<t.bottom&&e.bottom>t.top;return i&&r}function T(e,t,i,r,n,s,l,h,u){let c=n+.01,d=h*a,p=[];for(;c<i+l;){let a=s;if(a/2>c&&(a=2*c),d+=2*Math.asin(a/2/c),d*o>u+(i-n)/l*360)break;let h=d*o,f={x:e+c*Math.cos(d),y:t+c*r/i*Math.sin(d)};p.push(f),c=n+h/360*l}return p.shift(),p}function M(e,t){return Math.hypot(e.x-t.x,e.y-t.y)<=e.radius+t.radius}},8219:function(e,t,i){\"use strict\";i.d(t,{u:function(){return o}});var r=i(6331),n=i(7652),s=i(7449);let a;class o extends r.JH{_afterNew(){super._afterNewApplyThemes(),this._setRawDefault(\"deactivateRoot\",!0),function(e,t,i){const r=t.interfaceColors,o=r.get(\"secondaryButton\").toCSS(),l=r.get(\"text\").toCSS(),h=r.get(\"alternativeBackground\").toCSS(.45);if(!a){const t=new s.FV([new n.StyleRule(e,\".am5-modal\",{width:\"100%\",height:\"100%\",position:\"absolute\",\"z-index\":\"100000\",top:\"0\",left:\"0\"}),new n.StyleRule(e,\".am5-modal-curtain\",{top:\"0\",left:\"0\",width:\"100%\",height:\"100%\",position:\"absolute\",background:r.get(\"background\").toCSS(.5),\"z-index\":\"100\"}),new n.StyleRule(e,\".am5-modal-wrapper\",{top:\"0\",left:\"0\",width:\"100%\",height:\"100%\",position:\"absolute\",\"text-align\":\"center\",\"white-space\":\"nowrap\",background:r.get(\"background\").toCSS(.5),\"z-index\":\"101\"}),new n.StyleRule(e,\".am5-modal-wrapper:before\",{content:\"''\",display:\"inline-block\",height:\"100%\",\"vertical-align\":\"middle\",\"margin-right\":\"-0.25em\"}),new n.StyleRule(e,\".am5-modal-content\",{display:\"inline-block\",padding:\"1.2em\",\"vertical-align\":\"middle\",\"text-align\":\"left\",\"white-space\":\"normal\",background:r.get(\"background\").toCSS(),\"border-radius\":\"4px\",\"-webkit-box-shadow\":\"0px 0px 36px 0px \"+h,\"box-shadow\":\"0px 0px 36px 0px \"+h,color:l}),new n.StyleRule(e,\".am5-modal-content h1\",{\"font-size\":\"1em\",margin:\"0 0 0.5em 0\"}),new n.StyleRule(e,\".am5-modal-table\",{display:\"table\",margin:\"1em 0\"}),new n.StyleRule(e,\".am5-modal-table-row\",{display:\"table-row\"}),new n.StyleRule(e,\".am5-modal-table-heading\",{display:\"table-heading\",padding:\"3px 10px 3px 0\"}),new n.StyleRule(e,\".am5-modal-table-cell\",{display:\"table-cell\",padding:\"3px 0 3px 0\"}),new n.StyleRule(e,\".am5-modal-table-cell > *\",{\"vertical-align\":\"middle\"}),new n.StyleRule(e,\".am5-modal-content input[type=text], .am5-modal-content input[type=number], .am5-modal-content select\",{border:\"1px solid \"+o,\"border-radius\":\"4px\",padding:\"3px 5px\",margin:\"2px\"}),new n.StyleRule(e,\".am5-modal-input-narrow\",{width:\"50px\"}),new n.StyleRule(e,\".am5-modal-button\",{\"font-weight\":\"400\",color:r.get(\"secondaryButtonText\").toCSS(),\"line-height\":\"1.5\",\"text-align\":\"center\",\"text-decoration\":\"none\",\"vertical-align\":\"middle\",cursor:\"pointer\",padding:\"0.2em 0.8em\",\"font-size\":\"1em\",\"border-radius\":\"0.25em\",margin:\"0 0.25em 0 0\",border:\"1px solid \"+r.get(\"secondaryButtonStroke\").toCSS(),background:r.get(\"secondaryButton\").toCSS()}),new n.StyleRule(e,\".am5-modal-button:hover\",{background:r.get(\"secondaryButtonHover\").toCSS()}),new n.StyleRule(e,\".am5-modal-button.am5-modal-primary\",{color:r.get(\"primaryButtonText\").toCSS(),border:\"1px solid \"+r.get(\"primaryButtonStroke\").toCSS(),background:r.get(\"primaryButton\").toCSS()}),new n.StyleRule(e,\".am5-modal-button.am5-modal-primary:hover\",{background:r.get(\"primaryButtonHover\").toCSS()})]);a=new s.DM((()=>{a=void 0,t.dispose()}))}a.increment()}(n.getShadowRoot(this._root.dom),this._root);const e=document.createElement(\"div\");e.className=\"am5-modal\",e.style.display=\"none\",this.root._inner.appendChild(e),this.setPrivate(\"container\",e);const t=document.createElement(\"div\");t.className=\"am5-modal-curtain\",e.appendChild(t),this.setPrivate(\"curtain\",t),this._disposers.push(n.addEventListener(t,\"click\",(()=>{this.cancel()})));const i=document.createElement(\"div\");i.className=\"am5-modal-wrapper\",e.appendChild(i),this.setPrivate(\"wrapper\",i);const r=document.createElement(\"div\");r.className=\"am5-modal-content\",i.appendChild(r),this.setPrivate(\"content\",r);const o=this.get(\"content\");o&&(r.innerHTML=o),n.supports(\"keyboardevents\")&&this._disposers.push(n.addEventListener(document,\"keydown\",(e=>{this.isOpen()&&27==e.keyCode&&this.cancel()})))}_beforeChanged(){super._beforeChanged(),this.isDirty(\"content\")&&(this.getPrivate(\"content\").innerHTML=this.get(\"content\",\"\"))}isOpen(){return\"none\"!=this.getPrivate(\"container\").style.display}open(){this.getPrivate(\"container\").style.display=\"block\",this.get(\"deactivateRoot\")&&this.setTimeout((()=>{this._root._renderer.interactionsEnabled=!1}),10),this.events.dispatch(\"opened\",{type:\"opened\",target:this})}close(){this.getPrivate(\"container\").style.display=\"none\",this.get(\"deactivateRoot\")&&(this._root._renderer.interactionsEnabled=!0),this.events.dispatch(\"closed\",{type:\"closed\",target:this})}cancel(){this.getPrivate(\"container\").style.display=\"none\",this.get(\"deactivateRoot\")&&(this._root._renderer.interactionsEnabled=!0),this.events.dispatch(\"cancelled\",{type:\"cancelled\",target:this})}dispose(){super.dispose();const e=this.getPrivate(\"container\");e.parentElement&&e.parentElement.removeChild(e)}}Object.defineProperty(o,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Modal\"}),Object.defineProperty(o,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([o.className])})},780:function(e,t,i){\"use strict\";i.d(t,{e:function(){return l}});var r=i(6331),n=i(7255),s=i(256),a=i(7652),o=i(5040);class l extends r.JH{_setDefaults(){this._setDefault(\"negativeBase\",0),this._setDefault(\"numberFormat\",\"#,###.#####\"),this._setDefault(\"smallNumberThreshold\",1);const e=\"_big_number_suffix_\",t=\"_small_number_suffix_\",i=\"_byte_suffix_\";this._setDefault(\"bigNumberPrefixes\",[{number:1e3,suffix:this._t(e+\"3\")},{number:1e6,suffix:this._t(e+\"6\")},{number:1e9,suffix:this._t(e+\"9\")},{number:1e12,suffix:this._t(e+\"12\")},{number:1e15,suffix:this._t(e+\"15\")},{number:1e18,suffix:this._t(e+\"18\")},{number:1e21,suffix:this._t(e+\"21\")},{number:1e24,suffix:this._t(e+\"24\")}]),this._setDefault(\"smallNumberPrefixes\",[{number:1e-24,suffix:this._t(t+\"24\")},{number:1e-21,suffix:this._t(t+\"21\")},{number:1e-18,suffix:this._t(t+\"18\")},{number:1e-15,suffix:this._t(t+\"15\")},{number:1e-12,suffix:this._t(t+\"12\")},{number:1e-9,suffix:this._t(t+\"9\")},{number:1e-6,suffix:this._t(t+\"6\")},{number:.001,suffix:this._t(t+\"3\")}]),this._setDefault(\"bytePrefixes\",[{number:1,suffix:this._t(i+\"B\")},{number:1024,suffix:this._t(i+\"KB\")},{number:1048576,suffix:this._t(i+\"MB\")},{number:1073741824,suffix:this._t(i+\"GB\")},{number:1099511627776,suffix:this._t(i+\"TB\")},{number:0x4000000000000,suffix:this._t(i+\"PB\")}]),super._setDefaults()}_beforeChanged(){super._beforeChanged()}format(e,t,i){let r;(null==t||o.isString(t)&&\"number\"===t.toLowerCase())&&(t=this.get(\"numberFormat\",\"\"));let n=Number(e);if(o.isObject(t))try{return this.get(\"intlLocales\")?new Intl.NumberFormat(this.get(\"intlLocales\"),t).format(n):new Intl.NumberFormat(void 0,t).format(n)}catch(e){return\"Invalid\"}else{t=a.cleanFormat(t);let e,l=this.parseFormat(t,this._root.language);e=n>this.get(\"negativeBase\")?l.positive:n<this.get(\"negativeBase\")?l.negative:l.zero,null==i||e.mod||(e=s.copy(e),e.decimals.active=0==n?0:i),r=e.template.split(o.PLACEHOLDER).join(this.applyFormat(n,e))}return!0===this.get(\"forceLTR\")&&(r=\"\u200e\"+r),r}parseFormat(e,t){const i=t.translateEmpty(\"_thousandSeparator\"),r=t.translateEmpty(\"_decimalSeparator\");let a={positive:{thousands:{active:-1,passive:-1,interval:-1,separator:i},decimals:{active:-1,passive:-1,separator:r},template:\"\",source:\"\",parsed:!1},negative:{thousands:{active:-1,passive:-1,interval:-1,separator:i},decimals:{active:-1,passive:-1,separator:r},template:\"\",source:\"\",parsed:!1},zero:{thousands:{active:-1,passive:-1,interval:-1,separator:i},decimals:{active:-1,passive:-1,separator:r},template:\"\",source:\"\",parsed:!1}},l=(e=e.replace(\"||\",o.PLACEHOLDER2)).split(\"|\");return a.positive.source=l[0],void 0===l[2]?a.zero=a.positive:a.zero.source=l[2],void 0===l[1]?a.negative=a.positive:a.negative.source=l[1],s.each(a,((e,t)=>{if(t.parsed)return;let i=t.source;\"number\"===i.toLowerCase()&&(i=this.get(\"numberFormat\",\"#,###.#####\"));let r=n.V.chunk(i,!0);for(let e=0;e<r.length;e++){let i=r[e];if(i.text=i.text.replace(o.PLACEHOLDER2,\"|\"),\"value\"===i.type){let e=i.text.match(/[#0.,]+[ ]?[abespABESP%!]?[abespABESP\u2030!]?/);if(e)if(null===e||\"\"===e[0])t.template+=i.text;else{let r=e[0].match(/[abespABESP%\u2030!]{2}|[abespABESP%\u2030]{1}$/);r&&(t.mod=r[0].toLowerCase(),t.modSpacing=!!e[0].match(/[ ]{1}[abespABESP%\u2030!]{1}$/));let n=e[0].split(\".\");if(\"\"===n[0]);else{t.thousands.active=(n[0].match(/0/g)||[]).length,t.thousands.passive=(n[0].match(/\\#/g)||[]).length+t.thousands.active;let e=n[0].split(\",\");1===e.length||(t.thousands.interval=(e.pop()||\"\").length,0===t.thousands.interval&&(t.thousands.interval=-1))}void 0===n[1]||(t.decimals.active=(n[1].match(/0/g)||[]).length,t.decimals.passive=(n[1].match(/\\#/g)||[]).length+t.decimals.active),t.template+=i.text.split(e[0]).join(o.PLACEHOLDER)}}else t.template+=i.text}t.parsed=!0})),a}applyFormat(e,t){let i=e<0;e=Math.abs(e);let r=\"\",n=\"\",s=t.mod?t.mod.split(\"\"):[];if(-1!==s.indexOf(\"b\")){let i=this.applyPrefix(e,this.get(\"bytePrefixes\"),-1!==s.indexOf(\"!\"));e=i[0],r=i[1],n=i[2],t.modSpacing&&(n=\" \"+n)}else if(-1!==s.indexOf(\"a\")){let i=this.applyPrefix(e,e<this.get(\"smallNumberThreshold\")?this.get(\"smallNumberPrefixes\"):this.get(\"bigNumberPrefixes\"),-1!==s.indexOf(\"!\"));e=i[0],r=i[1],n=i[2],t.modSpacing&&(n=\" \"+n)}else if(-1!==s.indexOf(\"p\")){let t=Math.min(e.toString().length+2,21);e=parseFloat(e.toPrecision(t)),r=this._root.language.translate(\"_percentPrefix\"),n=this._root.language.translate(\"_percentSuffix\"),\"\"==r&&\"\"==n&&(n=\"%\")}else if(-1!==s.indexOf(\"%\")){let t=Math.min(e.toString().length+2,21);e*=100,e=parseFloat(e.toPrecision(t)),n=\"%\"}else if(-1!==s.indexOf(\"\u2030\")){let t=Math.min(e.toString().length+3,21);e*=1e3,e=parseFloat(e.toPrecision(t)),n=\"\u2030\"}if(-1!==s.indexOf(\"e\")){let i;i=t.decimals.passive>=0?e.toExponential(t.decimals.passive).split(\"e\"):e.toExponential().split(\"e\"),e=Number(i[0]),n=\"e\"+i[1],t.modSpacing&&(n=\" \"+n)}else if(0===t.decimals.passive)e=Math.round(e);else if(t.decimals.passive>0){let i=Math.pow(10,t.decimals.passive);e=Math.round(e*i)/i}let a=\"\",l=o.numberToString(e).split(\".\"),h=l[0];if(h.length<t.thousands.active&&(h=Array(t.thousands.active-h.length+1).join(\"0\")+h),t.thousands.interval>0){let e=[],i=h.split(\"\").reverse().join(\"\");for(let r=0,n=h.length;r<=n;r+=t.thousands.interval){let n=i.substr(r,t.thousands.interval).split(\"\").reverse().join(\"\");\"\"!==n&&e.unshift(n)}h=e.join(t.thousands.separator)}a+=h,1===l.length&&l.push(\"\");let u=l[1];return u.length<t.decimals.active&&(u+=Array(t.decimals.active-u.length+1).join(\"0\")),\"\"!==u&&(a+=t.decimals.separator+u),\"\"===a&&(a=\"0\"),0!==e&&i&&-1===s.indexOf(\"s\")&&(a=\"-\"+a),r&&(a=r+a),n&&(a+=n),a}applyPrefix(e,t,i=!1){let r=e,n=\"\",s=\"\",a=!1,o=1;for(let i=0,l=t.length;i<l;i++)t[i].number<=e&&(0===t[i].number?r=0:(r=e/t[i].number,o=t[i].number),n=t[i].prefix,s=t[i].suffix,a=!0);return!a&&i&&t.length&&0!=e&&(r=e/t[0].number,n=t[0].prefix,s=t[0].suffix,a=!0),a&&(r=parseFloat(r.toPrecision(Math.min(o.toString().length+Math.floor(r).toString().replace(/[^0-9]*/g,\"\").length,21)))),[r,n,s]}escape(e){return e.replace(\"||\",o.PLACEHOLDER2)}unescape(e){return e.replace(o.PLACEHOLDER2,\"|\")}}},256:function(e,t,i){\"use strict\";i.r(t),i.d(t,{copy:function(){return a},each:function(){return o},eachContinue:function(){return l},eachOrdered:function(){return h},hasKey:function(){return u},keys:function(){return n},keysOrdered:function(){return s},softCopyProperties:function(){return c}});var r=i(5071);function n(e){return Object.keys(e)}function s(e,t){return n(e).sort(t)}function a(e){return Object.assign({},e)}function o(e,t){n(e).forEach((i=>{t(i,e[i])}))}function l(e,t){for(let i in e)if(u(e,i)&&!t(i,e[i]))break}function h(e,t,i){r.each(s(e,i),(i=>{t(i,e[i])}))}function u(e,t){return{}.hasOwnProperty.call(e,t)}function c(e,t){return o(e,((e,i)=>{null!=i&&null==t[e]&&(t[e]=i)})),t}},3540:function(e,t,i){\"use strict\";function r(e,t){return e===t?0:e<t?-1:1}function n(e,t,i){const n=e.length,s=t.length,a=Math.min(n,s);for(let r=0;r<a;++r){const n=i(e[r],t[r]);if(0!==n)return n}return r(n,s)}function s(e,t){return e===t?0:e<t?-1:1}i.d(t,{HO:function(){return s},qu:function(){return r},wq:function(){return n}})},6245:function(e,t,i){\"use strict\";i.d(t,{AQ:function(){return a},CI:function(){return o},aQ:function(){return n},gG:function(){return r},p0:function(){return s}});class r{constructor(e){Object.defineProperty(this,\"_value\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._value=e}get value(){return this._value/100}get percent(){return this._value}toString(){return this._value+\"%\"}interpolate(e,t){return e+this.value*(t-e)}static normalize(e,t,i){return e instanceof r?e:new r(t===i?0:100*Math.min(Math.max(1/(i-t)*(e-t),0),1))}}function n(e){return new r(e)}const s=n(0),a=n(100),o=n(50)},2132:function(e,t,i){\"use strict\";i.d(t,{q:function(){return o}});var r=i(5040),n=i(7652),s=i(4596),a=i(7255);function o(e,t){if(null!=t){t=\"\"+t;let i,r=(t=a.V.escape(t)).match(/\\{([^}]+)\\}/g);if(r)for(i=0;i<r.length;i++){let n=l(e,r[i].replace(/\\{([^}]+)\\}/,\"$1\"),\"\");null==n&&(n=\"\"),t=t.split(r[i]).join(n)}t=a.V.unescape(t)}else t=\"\";return t}function l(e,t,i){let s;const a=e.dataItem;let o,h=[],c=/(format[a-zA-Z]*)\\((.*)\\)|([^.]+)/g;for(;o=c.exec(t),null!==o;)if(o[3]){h.push({prop:o[3]});const t=e.getDateFormatter().get(\"dateFields\",[]),i=e.getNumberFormatter().get(\"numericFields\",[]),r=e.getDurationFormatter().get(\"durationFields\",[]);-1!==t.indexOf(o[3])?h.push({method:\"formatDate\",params:[]}):-1!==i.indexOf(o[3])?h.push({method:\"formatNumber\",params:[]}):-1!==r.indexOf(o[3])&&h.push({method:\"formatDuration\",params:[]})}else{let e=[];if(\"\"!=n.trim(o[2])){let t,i=/'([^']*)'|\"([^\"]*)\"|([0-9\\-]+)/g;for(;t=i.exec(o[2]),null!==t;)e.push(t[1]||t[2]||t[3])}h.push({method:o[1],params:e})}if(a){s=u(e,h,a._settings),(null==s||r.isObject(s))&&(s=u(e,h,a));let n=a.dataContext;null==s&&n&&(s=u(e,h,n),null==s&&(s=u(e,[{prop:t}],n)),null==s&&n.dataContext&&(s=u(e,h,n.dataContext))),null==s&&a.component&&a.component.dataItem!==a&&(s=l(a.component,t,i))}return null==s&&(s=u(e,h,e)),null==s&&e.parent&&(s=l(e.parent,t,i)),s}function h(e,t){const i=e.getPrivate(\"customData\");if(r.isObject(i))return i[t]}function u(e,t,i,a){let o=i,l=!1;for(let n=0,u=t.length;n<u;n++){let u=t[n];if(u.prop){if(o instanceof s.j){let e=o.get(u.prop);null==e&&(e=o.getPrivate(u.prop)),null==e&&(e=h(o,u.prop)),null==e&&(e=o[u.prop]),o=e}else if(o.get){let e=o.get(u.prop);null==e&&(e=o[u.prop]),o=e}else o=o[u.prop];if(null==o)return}else switch(u.method){case\"formatNumber\":let t=r.toNumber(o);null!=t&&(o=e.getNumberFormatter().format(t,a||u.params[0]||void 0),l=!0);break;case\"formatDate\":let n=r.toDate(o);if(!r.isDate(n)||r.isNaN(n.getTime()))return;null!=n&&(o=e.getDateFormatter().format(n,a||u.params[0]||void 0),l=!0);break;case\"formatDuration\":let s=r.toNumber(o);null!=s&&(o=e.getDurationFormatter().format(s,a||u.params[0]||void 0,u.params[1]||void 0),l=!0);break;case\"urlEncode\":case\"encodeURIComponent\":o=encodeURIComponent(o);break;default:o[u.method]&&o[u.method].apply(i,u.params)}}if(!l){let t=[{method:\"\",params:a}];if(null==a)r.isNumber(o)?(t[0].method=\"formatNumber\",t[0].params=\"\"):r.isDate(o)&&(t[0].method=\"formatDate\",t[0].params=\"\");else{let e=n.getFormat(a);\"number\"===e?t[0].method=\"formatNumber\":\"date\"===e?t[0].method=\"formatDate\":\"duration\"===e&&(t[0].method=\"formatDuration\")}t[0].method&&(o=u(e,t,o))}return o}},5769:function(e,t,i){\"use strict\";i.d(t,{YS:function(){return u}});var r=i(9770),n=i(7449),s=i(5071),a=i(256);class o{constructor(e,t,i){Object.defineProperty(this,\"_settings\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_name\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_template\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._name=e,this._template=t,this._settings=i}get(e,t){const i=this._settings[e];return void 0!==i?i:t}set(e,t){this._settings[e]=t,this._template._stateChanged(this._name)}remove(e){delete this._settings[e],this._template._stateChanged(this._name)}setAll(e){a.keys(e).forEach((t=>{this._settings[t]=e[t]})),this._template._stateChanged(this._name)}_apply(e,t){a.each(this._settings,((i,r)=>{t[i]||e._userSettings[i]||(t[i]=!0,e.setRaw(i,r))}))}}class l{constructor(e){Object.defineProperty(this,\"_template\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_states\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),this._template=e}lookup(e){return this._states[e]}create(e,t){const i=this._states[e];if(i)return i.setAll(t),i;{const i=new o(e,this._template,t);return this._states[e]=i,this._template._stateChanged(e),i}}remove(e){delete this._states[e],this._template._stateChanged(e)}_apply(e,t){a.each(this._states,((i,r)=>{let n=t.states[i];null==n&&(n=t.states[i]={});const s=e.states.create(i,{});r._apply(s,n)}))}}class h{constructor(){Object.defineProperty(this,\"_callbacks\",{enumerable:!0,configurable:!0,writable:!0,value:{}})}add(e,t){let i=this._callbacks[e];return void 0===i&&(i=this._callbacks[e]=[]),i.push(t),new n.ku((()=>{s.removeFirst(i,t),0===i.length&&delete this._callbacks[e]}))}remove(e){void 0!==this._callbacks[e]&&delete this._callbacks[e]}_apply(e){const t=[];return a.each(this._callbacks,((i,r)=>{s.each(r,(r=>{t.push(e.adapters.add(i,r))}))})),new n.FV(t)}}class u{constructor(e,t){if(Object.defineProperty(this,\"_settings\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_privateSettings\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_settingEvents\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_privateSettingEvents\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_entities\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"states\",{enumerable:!0,configurable:!0,writable:!0,value:new l(this)}),Object.defineProperty(this,\"adapters\",{enumerable:!0,configurable:!0,writable:!0,value:new h}),Object.defineProperty(this,\"events\",{enumerable:!0,configurable:!0,writable:!0,value:new r.p}),Object.defineProperty(this,\"setup\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),!t)throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");this._settings=e}static new(e){return new u(e,!0)}get entities(){return this._entities}get(e,t){const i=this._settings[e];return void 0!==i?i:t}setRaw(e,t){this._settings[e]=t}set(e,t){this._settings[e]!==t&&(this.setRaw(e,t),this._entities.forEach((i=>{i._setTemplateProperty(this,e,t)})))}remove(e){e in this._settings&&(delete this._settings[e],this._entities.forEach((t=>{t._removeTemplateProperty(e)})))}removeAll(){a.each(this._settings,((e,t)=>{this.remove(e)}))}getPrivate(e,t){const i=this._privateSettings[e];return void 0!==i?i:t}setPrivateRaw(e,t){return this._privateSettings[e]=t,t}setPrivate(e,t){return this._privateSettings[e]!==t&&(this.setPrivateRaw(e,t),this._entities.forEach((i=>{i._setTemplatePrivateProperty(this,e,t)}))),t}removePrivate(e){e in this._privateSettings&&(delete this._privateSettings[e],this._entities.forEach((t=>{t._removeTemplatePrivateProperty(e)})))}setAll(e){a.each(e,((e,t)=>{this.set(e,t)}))}on(e,t){let i=this._settingEvents[e];return void 0===i&&(i=this._settingEvents[e]=[]),i.push(t),new n.ku((()=>{s.removeFirst(i,t),0===i.length&&delete this._settingEvents[e]}))}onPrivate(e,t){let i=this._privateSettingEvents[e];return void 0===i&&(i=this._privateSettingEvents[e]=[]),i.push(t),new n.ku((()=>{s.removeFirst(i,t),0===i.length&&delete this._privateSettingEvents[e]}))}_apply(e,t){const i=[];return a.each(this._settingEvents,((t,r)=>{s.each(r,(r=>{i.push(e.on(t,r))}))})),a.each(this._privateSettingEvents,((t,r)=>{s.each(r,(r=>{i.push(e.onPrivate(t,r))}))})),this.states._apply(e,t),i.push(this.adapters._apply(e)),i.push(e.events.copyFrom(this.events)),new n.FV(i)}_setObjectTemplate(e){this._entities.push(e)}_removeObjectTemplate(e){s.remove(this._entities,e)}_stateChanged(e){this._entities.forEach((t=>{t._applyStateByKey(e)}))}}},7255:function(e,t,i){\"use strict\";i.d(t,{V:function(){return s}});var r=i(1112),n=i(5040);class s{static escape(e){return e.replace(/\\[\\[/g,this.prefix+\"1\").replace(/([^\\/\\]]{1})\\]\\]/g,\"$1\"+this.prefix+\"2\").replace(/\\]\\]/g,this.prefix+\"2\").replace(/\\{\\{/g,this.prefix+\"3\").replace(/\\}\\}/g,this.prefix+\"4\").replace(/\\'\\'/g,this.prefix+\"5\")}static unescape(e){return e.replace(new RegExp(this.prefix+\"1\",\"g\"),\"[[\").replace(new RegExp(this.prefix+\"2\",\"g\"),\"]]\").replace(new RegExp(this.prefix+\"3\",\"g\"),\"{{\").replace(new RegExp(this.prefix+\"4\",\"g\"),\"}}\").replace(new RegExp(this.prefix+\"5\",\"g\"),\"''\")}static cleanUp(e){return e.replace(/\\[\\[/g,\"[\").replace(/\\]\\]/g,\"]\").replace(/\\{\\{/g,\"{\").replace(/\\}\\}/g,\"}\").replace(/\\'\\'/g,\"'\")}static chunk(e,t=!1,i=!1){let r=[];e=this.escape(e);let s=t?e.split(\"'\"):[e];for(let e=0;e<s.length;e++){let t=s[e];if(\"\"!==t)if(e%2==0){t=t.replace(/\\]\\[/g,\"]\"+n.PLACEHOLDER+\"[\"),t=t.replace(/\\[\\]/g,\"[ ]\");let e=t.split(/[\\[\\]]+/);for(let t=0;t<e.length;t++){let s=this.cleanUp(this.unescape(e[t]));s!==n.PLACEHOLDER&&\"\"!==s&&(t%2==0?r.push({type:\"value\",text:s}):r.push({type:i?\"value\":\"format\",text:\"[\"+s+\"]\"}))}}else{let e=t.split(/[\\[\\]]+/);for(let t=0;t<e.length;t++){let i=this.cleanUp(this.unescape(e[t]));\"\"!==i&&(t%2==0?r.push({type:\"text\",text:i}):this.isImage(i)?r.push({type:\"image\",text:\"[\"+i+\"]\"}):r.push({type:\"format\",text:\"[\"+i+\"]\"}))}}}return r}static isImage(e){return!!e.match(/img[ ]?:/)}static getTextStyle(e){let t={};if(\"\"==e||\"[ ]\"==e)return{};const i=e.match(/('[^']*')|(\"[^\"]*\")/gi);if(i)for(let t=0;t<i.length;t++)e=e.replace(i[t],i[t].replace(/['\"]*/g,\"\").replace(/[ ]+/g,\"+\"));let n=e.match(/([\\w\\-]*:[\\s]?[^;\\s\\]]*)|(\\#[\\w]{1,6})|([\\w\\-]+)|(\\/)/gi);if(!n)return{};for(let e=0;e<n.length;e++)if(n[e].match(/^(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)$/i))t.fontWeight=n[e];else if(n[e].match(/^(underline|line-through)$/i))t.textDecoration=n[e];else if(\"/\"==n[e]);else if(n[e].match(/:/)){const i=n[e].replace(\"+\",\" \").split(/:[ ]*/);t[i[0]]=i[1]}else t.fill=r.Il.fromString(n[e]);return t}}Object.defineProperty(s,\"prefix\",{enumerable:!0,configurable:!0,writable:!0,value:\"__amcharts__\"})},1926:function(e,t,i){\"use strict\";i.r(t),i.d(t,{add:function(){return g},checkChange:function(){return f},chooseInterval:function(){return _},copy:function(){return p},getDateIntervalDuration:function(){return u},getDuration:function(){return l},getIntervalDuration:function(){return h},getNextUnit:function(){return o},getTime:function(){return d},getUnitValue:function(){return v},now:function(){return c},roun:function(){return m},round:function(){return b},sleep:function(){return s},timeUnitDurations:function(){return a}});var r=i(5040),n=i(7652);function s(e){return new Promise(((t,i)=>{setTimeout(t,e)}))}let a={millisecond:1,second:1e3,minute:6e4,hour:36e5,day:864e5,week:6048e5,month:2629742400,year:31536e6};function o(e){switch(e){case\"year\":return;case\"month\":return\"year\";case\"week\":case\"day\":return\"month\";case\"hour\":return\"day\";case\"minute\":return\"hour\";case\"second\":return\"minute\";case\"millisecond\":return\"second\"}}function l(e,t){return null==t&&(t=1),a[e]*t}function h(e){return e?a[e.timeUnit]*e.count:0}function u(e,t,i,r,n){const s=e.timeUnit,o=e.count;if(\"hour\"==s||\"minute\"==s||\"second\"==s||\"millisecond\"==s)return a[e.timeUnit]*e.count;{const e=b(new Date(t.getTime()),s,o,i,r,void 0,n).getTime();let a=e+o*l(s)*1.05;return a=b(new Date(a),s,1,i,r,void 0,n).getTime(),a-e}}function c(){return new Date}function d(){return c().getTime()}function p(e){return new Date(e.getTime())}function f(e,t,i,r,n){if(t-e>l(i,1.2))return!0;let s=new Date(e),a=new Date(t);n&&(s=n.convertLocal(s),a=n.convertLocal(a));let h=0,u=0;r||\"millisecond\"==i||(h=s.getTimezoneOffset(),s.setUTCMinutes(s.getUTCMinutes()-h),u=a.getTimezoneOffset(),a.setUTCMinutes(a.getUTCMinutes()-u));let c=!1;switch(i){case\"year\":s.getUTCFullYear()!=a.getUTCFullYear()&&(c=!0);break;case\"month\":(s.getUTCFullYear()!=a.getUTCFullYear()||s.getUTCMonth()!=a.getUTCMonth())&&(c=!0);break;case\"day\":(s.getUTCMonth()!=a.getUTCMonth()||s.getUTCDate()!=a.getUTCDate())&&(c=!0);break;case\"hour\":s.getUTCHours()!=a.getUTCHours()&&(c=!0);break;case\"minute\":s.getUTCMinutes()!=a.getUTCMinutes()&&(c=!0);break;case\"second\":s.getUTCSeconds()!=a.getUTCSeconds()&&(c=!0);break;case\"millisecond\":s.getTime()!=a.getTime()&&(c=!0)}if(c)return c;let d=o(i);return!!d&&f(e,t,d,r,n)}function g(e,t,i,r,n){let s=0;switch(r||\"millisecond\"==t||(s=e.getTimezoneOffset(),n&&(s-=n.offsetUTC(e)),e.setUTCMinutes(e.getUTCMinutes()-s)),t){case\"day\":let t=e.getUTCDate();e.setUTCDate(t+i);break;case\"second\":let r=e.getUTCSeconds();e.setUTCSeconds(r+i);break;case\"millisecond\":let n=e.getUTCMilliseconds();e.setUTCMilliseconds(n+i);break;case\"hour\":let s=e.getUTCHours();e.setUTCHours(s+i);break;case\"minute\":let a=e.getUTCMinutes();e.setUTCMinutes(a+i);break;case\"year\":let o=e.getUTCFullYear();e.setUTCFullYear(o+i);break;case\"month\":let l=e.getUTCMonth();e.setUTCMonth(l+i);break;case\"week\":let h=e.getUTCDate();e.setUTCDate(h+7*i)}if(!r&&\"millisecond\"!=t&&(e.setUTCMinutes(e.getUTCMinutes()+s),\"day\"==t||\"week\"==t||\"month\"==t||\"year\"==t)){let t=e.getTimezoneOffset();if(n&&(t+=n.offsetUTC(e)),t!=s){let i=t-s;e.setUTCMinutes(e.getUTCMinutes()+i),e.getTimezoneOffset()!=t&&e.setUTCMinutes(e.getUTCMinutes()-i)}}return e}function m(e,t,i,r,n){let s;return null!=n&&(s=new Date(n)),b(new Date(e),t,i,r.locale.firstDayOfWeek,r.utc,s,r.timezone).getTime()}function b(e,t,i,n,s,a,o){if(!o||s){let o=0;switch(s||\"millisecond\"==t||(o=e.getTimezoneOffset(),e.setUTCMinutes(e.getUTCMinutes()-o)),t){case\"day\":let t=e.getUTCDate();if(i>1){if(a){a=b(a,\"day\",1);let t=e.getTime()-a.getTime(),r=Math.floor(t/l(\"day\")/i),n=l(\"day\",r*i);e.setTime(a.getTime()+n-o*l(\"minute\"))}}else e.setUTCDate(t);e.setUTCHours(0,0,0,0);break;case\"second\":let s=e.getUTCSeconds();i>1&&(s=Math.floor(s/i)*i),e.setUTCSeconds(s,0);break;case\"millisecond\":if(1==i)return e;let h=e.getUTCMilliseconds();h=Math.floor(h/i)*i,e.setUTCMilliseconds(h);break;case\"hour\":let u=e.getUTCHours();i>1&&(u=Math.floor(u/i)*i),e.setUTCHours(u,0,0,0);break;case\"minute\":let c=e.getUTCMinutes();i>1&&(c=Math.floor(c/i)*i),e.setUTCMinutes(c,0,0);break;case\"month\":let d=e.getUTCMonth();i>1&&(d=Math.floor(d/i)*i),e.setUTCMonth(d,1),e.setUTCHours(0,0,0,0);break;case\"year\":let p=e.getUTCFullYear();i>1&&(p=Math.floor(p/i)*i),e.setUTCFullYear(p,0,1),e.setUTCHours(0,0,0,0);break;case\"week\":let f=e.getUTCDate(),g=e.getUTCDay();r.isNumber(n)||(n=1),f=g>=n?f-g+n:f-(7+g)+n,e.setUTCDate(f),e.setUTCHours(0,0,0,0)}if(!s&&\"millisecond\"!=t&&(e.setUTCMinutes(e.getUTCMinutes()+o),\"day\"==t||\"week\"==t||\"month\"==t||\"year\"==t)){let t=e.getTimezoneOffset();if(t!=o){let i=t-o;e.setUTCMinutes(e.getUTCMinutes()+i)}}return e}{if(isNaN(e.getTime()))return e;let h=o.offsetUTC(e),u=e.getTimezoneOffset(),c=o.parseDate(e),d=c.year,p=c.month,f=c.day,g=c.hour,m=c.minute,_=c.second,v=c.millisecond,y=c.weekday,w=h-u;switch(t){case\"day\":if(i>1&&a){a=b(a,\"day\",1,n,s,void 0,o);let t=e.getTime()-a.getTime(),r=Math.floor(t/l(\"day\")/i),h=l(\"day\",r*i);e.setTime(a.getTime()+h),c=o.parseDate(e),d=c.year,p=c.month,f=c.day}g=0,m=w,_=0,v=0;break;case\"second\":m+=w,i>1&&(_=Math.floor(_/i)*i),v=0;break;case\"millisecond\":m+=w,i>1&&(v=Math.floor(v/i)*i);break;case\"hour\":i>1&&(g=Math.floor(g/i)*i),m=w,_=0,v=0;break;case\"minute\":i>1&&(m=Math.floor(m/i)*i),m+=w,_=0,v=0;break;case\"month\":i>1&&(p=Math.floor(p/i)*i),f=1,g=0,m=w,_=0,v=0;break;case\"year\":i>1&&(d=Math.floor(d/i)*i),p=0,f=1,g=0,m=w,_=0,v=0;break;case\"week\":r.isNumber(n)||(n=1),f=y>=n?f-y+n:f-(7+y)+n,g=0,m=w,_=0,v=0}let x=(e=new Date(d,p,f,g,m,_,v)).getTimezoneOffset(),O=o.offsetUTC(e)-x;return O!=w&&e.setTime(e.getTime()+6e4*(O-w)),e}}function _(e,t,i,r){let n=h(r[e]),s=r.length-1;if(e>=s)return Object.assign({},r[s]);let a=Math.ceil(t/n);return t<n&&e>0?Object.assign({},r[e-1]):a<=i?Object.assign({},r[e]):e+1<r.length?_(e+1,t,i,r):Object.assign({},r[e])}function v(e,t){switch(t){case\"day\":return e.getDate();case\"second\":return e.getSeconds();case\"millisecond\":return e.getMilliseconds();case\"hour\":return e.getHours();case\"minute\":return e.getMinutes();case\"month\":return e.getMonth();case\"year\":return e.getFullYear();case\"week\":return n.getWeek(e)}}},462:function(e,t,i){\"use strict\";function r(e,t){let i=0,r=0,n=1,s=0,a=0,o=0,l=0,h=0;return e.formatToParts(t).forEach((e=>{switch(e.type){case\"year\":i=+e.value;break;case\"month\":r=+e.value-1;break;case\"day\":n=+e.value;break;case\"hour\":s=+e.value;break;case\"minute\":a=+e.value;break;case\"second\":o=+e.value;break;case\"fractionalSecond\":l=+e.value;break;case\"weekday\":switch(e.value){case\"Sun\":h=0;break;case\"Mon\":h=1;break;case\"Tue\":h=2;break;case\"Wed\":h=3;break;case\"Thu\":h=4;break;case\"Fri\":h=5;break;case\"Sat\":h=6}}})),24===s&&(s=0),{year:i,month:r,day:n,hour:s,minute:a,second:o,millisecond:l,weekday:h}}function n(e,t){const{year:i,month:n,day:s,hour:a,minute:o,second:l,millisecond:h}=r(e,t);return Date.UTC(i,n,s,a,o,l,h)}i.d(t,{r:function(){return s}});class s{constructor(e,t){if(Object.defineProperty(this,\"_utc\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_dtf\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"name\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),!t)throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");this.name=e,this._utc=new Intl.DateTimeFormat(\"UTC\",{hour12:!1,timeZone:\"UTC\",year:\"numeric\",month:\"2-digit\",day:\"2-digit\",hour:\"2-digit\",minute:\"2-digit\",second:\"2-digit\",weekday:\"short\",fractionalSecondDigits:3}),this._dtf=new Intl.DateTimeFormat(\"UTC\",{hour12:!1,timeZone:e,year:\"numeric\",month:\"2-digit\",day:\"2-digit\",hour:\"2-digit\",minute:\"2-digit\",second:\"2-digit\",weekday:\"short\",fractionalSecondDigits:3})}static new(e){return new this(e,!0)}convertLocal(e){const t=this.offsetUTC(e),i=e.getTimezoneOffset(),r=new Date(e);r.setUTCMinutes(r.getUTCMinutes()-(t-i));const n=r.getTimezoneOffset();return i!=n&&r.setUTCMinutes(r.getUTCMinutes()+n-i),r}offsetUTC(e){return(n(this._utc,e)-n(this._dtf,e))/6e4}parseDate(e){return r(this._dtf,e)}}},5040:function(e,t,i){\"use strict\";function r(e){return Number(e)!==e}function n(e){return{}.toString.call(e)}function s(e,t=\"Assertion failed\"){if(!e)throw new Error(t)}function a(e){if(null!=e&&!d(e)){let t=Number(e);return r(t)&&c(e)&&\"\"!=e?a(e.replace(/[^0-9.\\-]+/g,\"\")):t}return e}function o(e){if(u(e))return new Date(e);if(d(e))return new Date(e);{let t=Number(e);return d(t)?new Date(t):new Date(e)}}function l(e){if(r(e))return\"NaN\";if(e===1/0)return\"Infinity\";if(e===-1/0)return\"-Infinity\";if(0===e&&1/e==-1/0)return\"-0\";let t=e<0;e=Math.abs(e);let i,n=/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\"+e),s=n[1],a=n[2]||\"\";if(void 0===n[3])i=\"\"===a?s:s+\".\"+a;else{let t=+n[3];if(e<1)i=\"0.\"+h(\"0\",t-1)+s+a;else{let e=t-a.length;i=0===e?s+a:e<0?s+a.slice(0,e)+\".\"+a.slice(e):s+a+h(\"0\",e)}}return t?\"-\"+i:i}function h(e,t){return new Array(t+1).join(e)}function u(e){return\"[object Date]\"===n(e)}function c(e){return\"string\"==typeof e}function d(e){return\"number\"==typeof e&&Number(e)==e}function p(e){return\"object\"==typeof e&&null!==e}function f(e){return Array.isArray(e)}i.r(t),i.d(t,{PLACEHOLDER:function(){return g},PLACEHOLDER2:function(){return m},assert:function(){return s},getType:function(){return n},isArray:function(){return f},isDate:function(){return u},isNaN:function(){return r},isNumber:function(){return d},isObject:function(){return p},isString:function(){return c},numberToString:function(){return l},repeat:function(){return h},toDate:function(){return o},toNumber:function(){return a}});const g=\"__\u00a7\u00a7\u00a7__\",m=\"__\u00a7\u00a7\u00a7\u00a7__\"},7652:function(e,t,i){\"use strict\";i.r(t),i.d(t,{StyleRule:function(){return D},StyleSheet:function(){return k},addClass:function(){return T},addEventListener:function(){return h},addSpacing:function(){return V},alternativeColor:function(){return oe},blur:function(){return p},brighten:function(){return re},capitalizeFirst:function(){return Q},cleanFormat:function(){return F},contains:function(){return y},decimalPlaces:function(){return C},escapeForRgex:function(){return z},focus:function(){return f},get12Hours:function(){return Z},getBrightnessStep:function(){return ne},getDayFromWeek:function(){return $},getEventTarget:function(){return v},getFormat:function(){return U},getLightnessStep:function(){return ie},getMonthWeek:function(){return X},getPointerId:function(){return d},getRendererEvent:function(){return g},getSafeResolution:function(){return S},getShadowRoot:function(){return O},getStyle:function(){return _},getTimeZone:function(){return K},getTimezoneOffset:function(){return q},getWeek:function(){return Y},getWeekYear:function(){return W},getYearDay:function(){return G},hslToRgb:function(){return J},iOS:function(){return E},isLight:function(){return se},isLocalEvent:function(){return w},isTouchEvent:function(){return m},lighten:function(){return te},mergeTags:function(){return le},onZoom:function(){return u},padString:function(){return L},plainText:function(){return H},ready:function(){return o},relativeToValue:function(){return N},removeClass:function(){return M},removeElement:function(){return l},rgbToHsl:function(){return ee},sameBounds:function(){return he},saturate:function(){return ae},setInteractive:function(){return x},setStyle:function(){return b},stripTags:function(){return I},supports:function(){return c},trim:function(){return R},trimLeft:function(){return j},trimRight:function(){return A},truncateTextWithEllipsis:function(){return B}});var r=i(5040),n=i(5071),s=i(256),a=i(7449);function o(e){if(\"loading\"!==document.readyState)e();else{const t=()=>{\"loading\"!==document.readyState&&(document.removeEventListener(\"readystatechange\",t),e())};document.addEventListener(\"readystatechange\",t)}}function l(e){e.parentNode&&e.parentNode.removeChild(e)}function h(e,t,i,r){return e.addEventListener(t,i,r||!1),new a.ku((()=>{e.removeEventListener(t,i,r||!1)}))}function u(e){return h(window,\"resize\",(t=>{e()}))}function c(e){switch(e){case\"touchevents\":return window.hasOwnProperty(\"TouchEvent\");case\"pointerevents\":return window.hasOwnProperty(\"PointerEvent\");case\"mouseevents\":return window.hasOwnProperty(\"MouseEvent\");case\"wheelevents\":return window.hasOwnProperty(\"WheelEvent\");case\"keyboardevents\":return window.hasOwnProperty(\"KeyboardEvent\")}return!1}function d(e){return e.pointerId||0}function p(){if(document.activeElement&&document.activeElement!=document.body)if(document.activeElement.blur)document.activeElement.blur();else{let e=document.createElement(\"button\");e.style.position=\"fixed\",e.style.top=\"0px\",e.style.left=\"-10000px\",document.body.appendChild(e),e.focus(),e.blur(),document.body.removeChild(e)}}function f(e){e&&e.focus()}function g(e){if(c(\"pointerevents\"))return e;if(c(\"touchevents\"))switch(e){case\"pointerover\":case\"pointerdown\":return\"touchstart\";case\"pointerout\":case\"pointerleave\":case\"pointerup\":return\"touchend\";case\"pointermove\":return\"touchmove\";case\"click\":return\"click\";case\"dblclick\":return\"dblclick\"}else if(c(\"mouseevents\"))switch(e){case\"pointerover\":return\"mouseover\";case\"pointerout\":return\"mouseout\";case\"pointerleave\":return\"mouseleave\";case\"pointerdown\":return\"mousedown\";case\"pointermove\":return\"mousemove\";case\"pointerup\":return\"mouseup\";case\"click\":return\"click\";case\"dblclick\":return\"dblclick\"}return e}function m(e){if(\"undefined\"!=typeof Touch&&e instanceof Touch)return!0;if(\"undefined\"!=typeof PointerEvent&&e instanceof PointerEvent&&null!=e.pointerType)switch(e.pointerType){case\"touch\":case\"pen\":case 2:return!0;case\"mouse\":case 4:return!1;default:return!(e instanceof MouseEvent)}else if(null!=e.type&&e.type.match(/^mouse/))return!1;return!0}function b(e,t,i){e.style[t]=i}function _(e,t){return e.style[t]}function v(e){if(e.composedPath){const t=e.composedPath();return 0===t.length?null:t[0]}return e.target}function y(e,t){let i=t;for(;;){if(e===i)return!0;if(null===i.parentNode){if(null==i.host)return!1;i=i.host}else i=i.parentNode}}function w(e,t){return e.target&&y(t.root.dom,e.target)}function x(e,t){e.style.pointerEvents=t?\"auto\":\"none\"}function O(e){let t=e;for(;;){if(null===t.parentNode)return null!=t.host?t:null;t=t.parentNode}}let P;class D extends a.KK{constructor(e,t,i,r=\"\"){super(),Object.defineProperty(this,\"_root\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_rule\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._root=function(e,t=\"\"){if(null===e){if(null==P){const e=document.createElement(\"style\");e.type=\"text/css\",\"\"!=t&&e.setAttribute(\"nonce\",t),document.head.appendChild(e),P=e.sheet}return P}{const i=document.createElement(\"style\");return i.type=\"text/css\",\"\"!=t&&i.setAttribute(\"nonce\",t),e.appendChild(i),i.sheet}}(e,r);try{this._rule=function(e,t){const i=e.cssRules.length;return e.insertRule(t+\"{}\",i),e.cssRules[i]}(this._root,t),s.each(i,((e,t)=>{this.setStyle(e,t)}))}catch(e){this._rule=new CSSStyleRule}}set selector(e){this._rule.selectorText=e}get selector(){return this._rule.selectorText}_dispose(){const e=n.indexOf(this._root.cssRules,this._rule);if(-1===e)throw new Error(\"Could not dispose StyleRule\");this._root.deleteRule(e)}_setVendorPrefixName(e,t){const i=this._rule.style;i.setProperty(\"-webkit-\"+e,t,\"\"),i.setProperty(\"-moz-\"+e,t,\"\"),i.setProperty(\"-ms-\"+e,t,\"\"),i.setProperty(\"-o-\"+e,t,\"\"),i.setProperty(e,t,\"\")}setStyle(e,t){\"transition\"===e?this._setVendorPrefixName(e,t):this._rule.style.setProperty(e,t,\"\")}}class k extends a.KK{constructor(e,t,i=\"\"){super(),Object.defineProperty(this,\"_element\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this._element=function(e,t,i=\"\"){const r=document.createElement(\"style\");return r.type=\"text/css\",\"\"!=i&&r.setAttribute(\"nonce\",i),r.textContent=t,null===e?document.head.appendChild(r):e.appendChild(r),r}(e,t,i)}_dispose(){this._element.parentNode&&this._element.parentNode.removeChild(this._element)}}function T(e,t){if(e)if(e.classList){const i=t.split(\" \");n.each(i,(t=>{e.classList.add(t)}))}else{let i=e.getAttribute(\"class\");i?e.setAttribute(\"class\",i.split(\" \").filter((e=>e!==t)).join(\" \")+\" \"+t):e.setAttribute(\"class\",t)}}function M(e,t){if(e)if(e.classList)e.classList.remove(t);else{let i=e.getAttribute(\"class\");i&&e.setAttribute(\"class\",i.split(\" \").filter((e=>e!==t)).join(\" \"))}}function E(){return/apple/i.test(navigator.vendor)&&\"ontouchend\"in document}function S(){return E()?1:void 0}function N(e,t){return r.isNumber(e)?e:null!=e&&r.isNumber(e.value)&&r.isNumber(t)?t*e.value:0}function C(e){let t=(\"\"+e).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);return t?Math.max(0,(t[1]?t[1].length:0)-(t[2]?+t[2]:0)):0}function L(e,t=0,i=\"0\"){return\"string\"!=typeof e&&(e=e.toString()),t>e.length?Array(t-e.length+1).join(i)+e:e}function j(e){return e.replace(/^[\\s]*/,\"\")}function A(e){return e.replace(/[\\s]*$/,\"\")}function R(e){return j(A(e))}function B(e,t,i=!1,r=\"...\"){if(e.length>t){let n=t-1;for(;n>=0&&e.charAt(n).match(/\\w/);)n--;return n>=0&&0==i?e.substring(0,n+1)+\"...\":e.substring(0,t)+r}return e}function U(e){if(void 0===e)return\"string\";let t=(e=(e=(e=e.toLowerCase().replace(/^\\[[^\\]]*\\]/,\"\")).replace(/\\[[^\\]]+\\]/,\"\")).trim()).match(/\\/(date|number|duration)$/);return t?t[1]:\"number\"===e?\"number\":\"date\"===e?\"date\":\"duration\"===e?\"duration\":e.match(/[#0]/)?\"number\":e.match(/[ymwdhnsqaxkzgtei]/)?\"date\":\"string\"}function F(e){return e.replace(/\\/(date|number|duration)$/i,\"\")}function I(e){return e?e.replace(/<[^>]*>/g,\"\"):e}function H(e){return e?I((\"\"+e).replace(/[\\n\\r]+/g,\". \")):e}function z(e){return e.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,\"\\\\$&\")}function V(e){let t=\"\";for(let i=0;i<e.length;i++){const r=e.charAt(i);r.toUpperCase()==r&&0!=i&&(t+=\" \"),t+=r}return t}function G(e,t=!1){const i=new Date(e.getFullYear(),0,0),r=e.getTime()-i.getTime()+60*(i.getTimezoneOffset()-e.getTimezoneOffset())*1e3;return Math.floor(r/864e5)}function Y(e,t=!1){const i=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate())),r=i.getUTCDay()||7;i.setUTCDate(i.getUTCDate()+4-r);const n=new Date(Date.UTC(i.getUTCFullYear(),0,1));return Math.ceil(((i.getTime()-n.getTime())/864e5+1)/7)}function W(e,t=!1){const i=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate())),r=i.getUTCDay()||7;return i.setUTCDate(i.getUTCDate()+4-r),new Date(Date.UTC(i.getUTCFullYear(),0,1)).getFullYear()}function X(e,t=!1){const i=Y(new Date(e.getFullYear(),e.getMonth(),1),t);let r=Y(e,t);return 1==r&&(r=53),r-i+1}function $(e,t,i=1,r=!1){let n=new Date(t,0,4,0,0,0,0);return r&&n.setUTCFullYear(t),7*e+i-((n.getDay()||7)+3)}function Z(e,t){return e>12?e-=12:0===e&&(e=12),null!=t?e+(t-1):e}function K(e,t=!1,i=!1,r=!1,n){if(r)return t?\"Coordinated Universal Time\":\"UTC\";if(n){const i=e.toLocaleString(\"en-US\",{timeZone:n});return R(e.toLocaleString(\"en-US\",{timeZone:n,timeZoneName:t?\"long\":\"short\"}).substr(i.length))}let s=e.toLocaleString(\"UTC\"),a=e.toLocaleString(\"UTC\",{timeZoneName:t?\"long\":\"short\"}).substr(s.length);return!1===i&&(a=a.replace(/ (standard|daylight|summer|winter) /i,\" \")),R(a)}function q(e){const t=new Date(Date.UTC(2012,0,1,0,0,0,0)),i=new Date(t.toLocaleString(\"en-US\",{timeZone:\"UTC\"}));return(new Date(t.toLocaleString(\"en-US\",{timeZone:e})).getTime()-i.getTime())/6e4*-1}function Q(e){return e.charAt(0).toUpperCase()+e.slice(1)}function J(e){let t,i,r,n=e.h,s=e.s,a=e.l;if(0==s)t=i=r=a;else{let e=function(e,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?e+6*(t-e)*i:i<.5?t:i<2/3?e+(t-e)*(2/3-i)*6:e},o=a<.5?a*(1+s):a+s-a*s,l=2*a-o;t=e(l,o,n+1/3),i=e(l,o,n),r=e(l,o,n-1/3)}return{r:Math.round(255*t),g:Math.round(255*i),b:Math.round(255*r)}}function ee(e){let t=e.r/255,i=e.g/255,r=e.b/255,n=Math.max(t,i,r),s=Math.min(t,i,r),a=0,o=0,l=(n+s)/2;if(n===s)a=o=0;else{let e=n-s;switch(o=l>.5?e/(2-n-s):e/(n+s),n){case t:a=(i-r)/e+(i<r?6:0);break;case i:a=(r-t)/e+2;break;case r:a=(t-i)/e+4}a/=6}return{h:a,s:o,l:l}}function te(e,t){return e?{r:Math.max(0,Math.min(255,e.r+ie(e.r,t))),g:Math.max(0,Math.min(255,e.g+ie(e.g,t))),b:Math.max(0,Math.min(255,e.b+ie(e.b,t))),a:e.a}:e}function ie(e,t){let i=t>0?255-e:e;return Math.round(i*t)}function re(e,t){if(e){let i=ie(Math.min(Math.max(e.r,e.g,e.b),230),t);return{r:Math.max(0,Math.min(255,Math.round(e.r+i))),g:Math.max(0,Math.min(255,Math.round(e.g+i))),b:Math.max(0,Math.min(255,Math.round(e.b+i))),a:e.a}}return e}function ne(e,t){return Math.round(255*t)}function se(e){return(299*e.r+587*e.g+114*e.b)/1e3>=128}function ae(e,t){if(void 0===e||1==t)return e;let i=ee(e);return i.s=t,J(i)}function oe(e,t={r:255,g:255,b:255},i={r:255,g:255,b:255}){let r=t,n=i;return se(i)&&(r=i,n=t),se(e)?n:r}function le(e,t){return e||(e=[]),[...e,...t].filter(((e,t,i)=>i.indexOf(e)===t))}function he(e,t){return!!t&&e.left==t.left&&e.right==t.right&&e.top==t.top&&e.bottom==t.bottom}},3360:function(e,t,i){\"use strict\";i.d(t,{z:function(){return y},m:function(){return w}});var r=i(7582),n=i(6331),s=i(4596),a=i(8777),o=i(1112),l=i(6245),h=i(5769),u=i(5040),c=i(5071),d=i(256),p={AccumulationDistribution:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.AccumulationDistribution)),AccumulativeSwingIndex:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.AccumulativeSwingIndex)),Annotator:()=>Promise.resolve().then((function(){if(!i.m[396]){var e=new Error(\"Module '396' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(396)})).then((e=>e.Annotator)),ArcDiagram:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ArcDiagram)),ArcDiagramLink:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ArcDiagramLink)),ArcDiagramNodes:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ArcDiagramNodes)),Aroon:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Aroon)),AverageSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.AverageSeries)),AwesomeOscillator:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.AwesomeOscillator)),Axis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.Axis)),AxisBullet:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisBullet)),AxisLabel:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisLabel)),AxisLabelRadial:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisLabelRadial)),AxisRenderer:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisRenderer)),AxisRendererCircular:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.AxisRendererCircular)),AxisRendererRadial:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.AxisRendererRadial)),AxisRendererX:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisRendererX)),AxisRendererY:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisRendererY)),AxisTick:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.AxisTick)),BaseColumnSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.BaseColumnSeries)),BollingerBands:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.BollingerBands)),BreadcrumbBar:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.BreadcrumbBar)),Bullet:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Bullet)),Button:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Button)),CalloutSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.CalloutSeries)),Candlestick:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.Candlestick)),CandlestickSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.CandlestickSeries)),CategoryAxis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.CategoryAxis)),CategoryDateAxis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.CategoryDateAxis)),ChaikinMoneyFlow:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ChaikinMoneyFlow)),ChaikinOscillator:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ChaikinOscillator)),Chart:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Chart)),ChartIndicator:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ChartIndicator)),Chord:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.Chord)),ChordDirected:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ChordDirected)),ChordLink:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ChordLink)),ChordLinkDirected:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ChordLinkDirected)),ChordNodes:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ChordNodes)),ChordNonRibbon:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.ChordNonRibbon)),Circle:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Circle)),CirclePattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.CirclePattern)),ClockHand:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.ClockHand)),ClusteredPointSeries:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.ClusteredPointSeries)),ColorControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ColorControl)),ColorSet:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.ColorSet)),ColumnSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.ColumnSeries)),CommodityChannelIndex:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.CommodityChannelIndex)),ComparisonControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ComparisonControl)),Component:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Component)),Container:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Container)),DataSaveControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DataSaveControl)),DateAxis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.DateAxis)),DateRangeSelector:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DateRangeSelector)),DisparityIndex:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DisparityIndex)),DoodleSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DoodleSeries)),DrawingControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DrawingControl)),DrawingSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DrawingSeries)),DrawingToolControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DrawingToolControl)),Dropdown:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Dropdown)),DropdownColors:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DropdownColors)),DropdownControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DropdownControl)),DropdownList:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DropdownList)),DropdownListControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.DropdownListControl)),DurationAxis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.DurationAxis)),Ellipse:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Ellipse)),EllipseSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.EllipseSeries)),Entity:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Entity)),Exporting:()=>Promise.resolve().then((function(){if(!i.m[396]){var e=new Error(\"Module '396' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(396)})).then((e=>e.Exporting)),ExportingMenu:()=>Promise.resolve().then((function(){if(!i.m[396]){var e=new Error(\"Module '396' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(396)})).then((e=>e.ExportingMenu)),FibonacciSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.FibonacciSeries)),FibonacciTimezoneSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.FibonacciTimezoneSeries)),Flow:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.Flow)),FlowLink:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.FlowLink)),FlowNode:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.FlowNode)),FlowNodes:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.FlowNodes)),ForceDirected:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.ForceDirected)),FunnelSeries:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.FunnelSeries)),FunnelSlice:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.FunnelSlice)),GaplessDateAxis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.GaplessDateAxis)),Gradient:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Gradient)),GrainPattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.GrainPattern)),Graphics:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Graphics)),GraticuleSeries:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.GraticuleSeries)),Grid:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.Grid)),GridLayout:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.GridLayout)),HeatLegend:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.HeatLegend)),Hierarchy:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.Hierarchy)),HierarchyLink:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.HierarchyLink)),HierarchyNode:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.HierarchyNode)),HorizontalLayout:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.HorizontalLayout)),HorizontalLineSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.HorizontalLineSeries)),HorizontalRaySeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.HorizontalRaySeries)),IconControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.IconControl)),IconSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.IconSeries)),Indicator:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Indicator)),IndicatorControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.IndicatorControl)),InterfaceColors:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.InterfaceColors)),IntervalControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.IntervalControl)),Label:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Label)),LabelSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.LabelSeries)),Layout:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Layout)),Legend:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Legend)),Line:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Line)),LinePattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.LinePattern)),LineSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.LineSeries)),LinearGradient:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.LinearGradient)),LinkedHierarchy:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.LinkedHierarchy)),LinkedHierarchyNode:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.LinkedHierarchyNode)),MACD:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.MACD)),MapChart:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapChart)),MapLine:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapLine)),MapLineSeries:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapLineSeries)),MapPointSeries:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapPointSeries)),MapPolygon:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapPolygon)),MapPolygonSeries:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapPolygonSeries)),MapSeries:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.MapSeries)),Measure:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Measure)),MedianPrice:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.MedianPrice)),Modal:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Modal)),Momentum:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Momentum)),MovingAverage:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.MovingAverage)),MovingAverageDeviation:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.MovingAverageDeviation)),MovingAverageEnvelope:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.MovingAverageEnvelope)),OHLC:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.OHLC)),OHLCSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.OHLCSeries)),OnBalanceVolume:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.OnBalanceVolume)),OverboughtOversold:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.OverboughtOversold)),Pack:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.Pack)),PanelControls:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.PanelControls)),ParallelChannelSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ParallelChannelSeries)),Partition:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.Partition)),PathPattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.PathPattern)),Pattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Pattern)),PercentChart:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.PercentChart)),PercentSeries:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.PercentSeries)),PeriodSelector:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.PeriodSelector)),PictorialStackedSeries:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.PictorialStackedSeries)),Picture:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Picture)),PicturePattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.PicturePattern)),PieChart:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.PieChart)),PieSeries:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.PieSeries)),PointedRectangle:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.PointedRectangle)),Polygon:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Polygon)),PolylineSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.PolylineSeries)),PyramidSeries:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.PyramidSeries)),QuadrantLineSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.QuadrantLineSeries)),RadarChart:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.RadarChart)),RadarColumnSeries:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.RadarColumnSeries)),RadarCursor:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.RadarCursor)),RadarLineSeries:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.RadarLineSeries)),RadialGradient:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.RadialGradient)),RadialLabel:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.RadialLabel)),RadialText:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.RadialText)),Rectangle:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Rectangle)),RectanglePattern:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.RectanglePattern)),RectangleSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.RectangleSeries)),RegressionSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.RegressionSeries)),RelativeStrengthIndex:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.RelativeStrengthIndex)),ResetControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ResetControl)),RoundedRectangle:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.RoundedRectangle)),Sankey:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.Sankey)),SankeyLink:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.SankeyLink)),SankeyNodes:()=>Promise.resolve().then((function(){if(!i.m[2924]){var e=new Error(\"Module '2924' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2924)})).then((e=>e.SankeyNodes)),Scrollbar:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Scrollbar)),SerialChart:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.SerialChart)),Serializer:()=>Promise.resolve().then((function(){if(!i.m[9075]){var e=new Error(\"Module '9075' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9075)})).then((e=>e.Serializer)),Series:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Series)),SeriesTypeControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.SeriesTypeControl)),SettingsControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.SettingsControl)),SettingsModal:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.SettingsModal)),SimpleLineSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.SimpleLineSeries)),Slice:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Slice)),SliceGrouper:()=>Promise.resolve().then((function(){if(!i.m[1790]){var e=new Error(\"Module '1790' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(1790)})).then((e=>e.SliceGrouper)),SlicedChart:()=>Promise.resolve().then((function(){if(!i.m[2536]){var e=new Error(\"Module '2536' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2536)})).then((e=>e.SlicedChart)),Slider:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Slider)),SmoothedRadarLineSeries:()=>Promise.resolve().then((function(){if(!i.m[2051]){var e=new Error(\"Module '2051' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(2051)})).then((e=>e.SmoothedRadarLineSeries)),SmoothedXLineSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.SmoothedXLineSeries)),SmoothedXYLineSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.SmoothedXYLineSeries)),SmoothedYLineSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.SmoothedYLineSeries)),Sprite:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Sprite)),SpriteResizer:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.SpriteResizer)),StandardDeviation:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StandardDeviation)),Star:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Star)),StepLineSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.StepLineSeries)),StochasticMomentumIndex:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StochasticMomentumIndex)),StochasticOscillator:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StochasticOscillator)),StockChart:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StockChart)),StockControl:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StockControl)),StockLegend:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StockLegend)),StockPanel:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StockPanel)),StockToolbar:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.StockToolbar)),Sunburst:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.Sunburst)),Text:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Text)),Tick:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Tick)),Tooltip:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Tooltip)),Tree:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.Tree)),Treemap:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.Treemap)),TrendLineSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.TrendLineSeries)),Triangle:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.Triangle)),Trix:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Trix)),TypicalPrice:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.TypicalPrice)),VWAP:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.VWAP)),ValueAxis:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.ValueAxis)),Venn:()=>Promise.resolve().then((function(){if(!i.m[8034]){var e=new Error(\"Module '8034' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8034)})).then((e=>e.Venn)),VerticalLayout:()=>Promise.resolve().then((function(){if(!i.m[7314]){var e=new Error(\"Module '7314' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7314)})).then((e=>e.VerticalLayout)),VerticalLineSeries:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.VerticalLineSeries)),Volume:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.Volume)),VolumeProfile:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.VolumeProfile)),VoronoiTreemap:()=>Promise.resolve().then((function(){if(!i.m[8447]){var e=new Error(\"Module '8447' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(8447)})).then((e=>e.VoronoiTreemap)),WilliamsR:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.WilliamsR)),WordCloud:()=>Promise.resolve().then((function(){if(!i.m[6769]){var e=new Error(\"Module '6769' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(6769)})).then((e=>e.WordCloud)),XYChart:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.XYChart)),XYChartScrollbar:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.XYChartScrollbar)),XYCursor:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.XYCursor)),XYSeries:()=>Promise.resolve().then((function(){if(!i.m[3405]){var e=new Error(\"Module '3405' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(3405)})).then((e=>e.XYSeries)),ZigZag:()=>Promise.resolve().then((function(){if(!i.m[9352]){var e=new Error(\"Module '9352' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(9352)})).then((e=>e.ZigZag)),ZoomControl:()=>Promise.resolve().then((function(){if(!i.m[7533]){var e=new Error(\"Module '7533' is not available (weak dependency)\");throw e.code=\"MODULE_NOT_FOUND\",e}return i(7533)})).then((e=>e.ZoomControl))};function f(e){return u.isObject(e)}function g(e,t){if(\"#\"===e[0]||\"@\"===e[0]){if(e[1]===e[0])return{isValue:!0,value:e.slice(1)};{const i=e.split(/\\./g);let r=function(e,t){let i=e.length;for(;i--;){const r=e[i];if(t in r)return r[t]}throw new Error(\"Could not find ref \"+t)}(t,i[0]);for(let e=1;e<i.length;++e){const t=i[e],n=/get\\(([\"'])([^\\1]*)\\1\\)/.exec(t);r=n?r.get(n[2]):r[t]}return{isValue:!0,value:r}}}return{isValue:!0,value:e}}function m(e,t){t.properties&&c.each(t.properties,(t=>{t(e)}))}function b(e,t){m(e,t),t.adapters&&c.each(t.adapters,(t=>{e.adapters.add(t.key,t.callback)})),e instanceof a.W&&t.children&&t.children.forEach((t=>{null==t.index?e.children.push(t.value):e.children.insertIndex(t.index,t.value)}))}function _(e,t){if(!t.construct)return t.value;const i=t.construct.new(e,t.settings||{});return b(i,t),i}class v{constructor(){Object.defineProperty(this,\"_caching\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_cache\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_delayed\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}afterParse(){this._delayed.forEach((e=>{e()}))}getClass(e){return this._cache[e]}storeClass(e){return(0,r.mG)(this,void 0,void 0,(function*(){const t=p[e];this._cache[e]=yield t()}))}cacheClass(e){let t=this._caching[e];return null==t&&(t=this._caching[e]=this.storeClass(e)),t}parseAsyncArray(e){return(0,r.mG)(this,void 0,void 0,(function*(){yield Promise.all(c.map(e,(e=>this.parseAsync(e))))}))}parseAsyncObject(e){return(0,r.mG)(this,void 0,void 0,(function*(){yield Promise.all(c.map(d.keys(e),(t=>this.parseAsync(e[t]))))}))}parseAsyncSettings(e){return(0,r.mG)(this,void 0,void 0,(function*(){yield Promise.all(c.map(d.keys(e),(t=>this.parseAsyncSetting(t,e[t]))))}))}parseAsyncSetting(e,t){return(0,r.mG)(this,void 0,void 0,(function*(){\"geoJSON\"!==e&&(yield this.parseAsync(t))}))}parseAsyncRefs(e){return(0,r.mG)(this,void 0,void 0,(function*(){u.isArray(e)?yield Promise.all(c.map(e,(e=>this.parseAsyncRefs(e)))):yield this.parseAsyncObject(e)}))}parseAsync(e){return(0,r.mG)(this,void 0,void 0,(function*(){u.isArray(e)?yield this.parseAsyncArray(e):f(e)&&(\"Color\"===e.type||\"Percent\"===e.type||(\"Template\"===e.type?yield Promise.all([e.refs?this.parseAsyncRefs(e.refs):Promise.resolve(void 0),e.settings?this.parseAsyncObject(e.settings):Promise.resolve(void 0)]):!0===e.__parse?yield this.parseAsyncObject(e):!1!==e.__parse&&(yield Promise.all([e.type?this.cacheClass(e.type):Promise.resolve(void 0),e.refs?this.parseAsyncRefs(e.refs):Promise.resolve(void 0),e.settings?this.parseAsyncSettings(e.settings):Promise.resolve(void 0),e.properties?this.parseAsyncObject(e.properties):Promise.resolve(void 0),e.children?this.parseAsyncArray(e.children):Promise.resolve(void 0)]))))}))}parseObject(e,t,i){const r={};return c.each(d.keys(t),(n=>{r[n]=this.parse(e,t[n],i)})),r}parseArray(e,t,i){return c.map(t,(t=>this.parse(e,t,i)))}parseChildren(e,t,i){return c.map(t,(t=>this.parseChild(e,t,i)))}parseStops(e,t,i){return c.map(t,(t=>this.parseObject(e,t,i)))}parseSetting(e,t,i,r){if(\"layout\"===t)switch(i){case\"horizontal\":return e.horizontalLayout;case\"vertical\":return e.verticalLayout;case\"grid\":return e.gridLayout}return\"geoJSON\"===t?i:\"stops\"===t?this.parseStops(e,i,r):this.parse(e,i,r)}parseSettings(e,t,i){const r={};return c.each(d.keys(t),(n=>{r[n]=this.parseSetting(e,n,t[n],i)})),r}parseProperties(e,t,i){return c.map(d.keys(t),(r=>{const s=t[r];return t=>{const a=()=>{const a=this.parseValue(e,s,i),o=t[r];o?a.isValue?u.isArray(a.value)?c.each(a.value,(e=>{o.push(e)})):t[r]=a.value:a.construct?t[r]=_(e,a):o instanceof n.JH||o instanceof h.YS?function(e,t){t.settings&&e.setAll(t.settings),b(e,t)}(o,a):m(o,a):a.isValue?t[r]=a.value:t[r]=_(e,a)};if(\"data\"===r)this._delayed.push(a);else if(\"bullets\"===r){const n=t[r];u.assert(null!=n),u.assert(u.isArray(s)),c.each(s,(t=>{n.push(((r,n)=>{const s=i.concat([{\"@series\":n}]);return this.parse(e,t,s)}))}))}else a()}}))}parseRefsObject(e,t,i){const r={};return c.each(d.keys(t),(n=>{r[\"#\"+n]=this.parse(e,t[n],i)})),r}parseRefs(e,t,i){if(u.isArray(t)){const r=t.length;for(let n=0;n<r;++n)i=i.concat([this.parseRefsObject(e,t[n],i)])}else i=i.concat([this.parseRefsObject(e,t,i)]);return i}parseChild(e,t,i){if(u.isString(t))return{index:void 0,value:g(t,i).value};if(null!=t.ref)return{index:null==t.index?void 0:t.index,value:g(t.ref,i).value};{const r=this.parseEntity(e,t,i);return{index:r.index,value:_(e,r)}}}parseEntity(e,t,i){t.refs&&(i=this.parseRefs(e,t.refs,i));const r=t.type?this.getClass(t.type):void 0,n=t.settings?this.parseSettings(e,t.settings,i):void 0,s=t.properties?this.parseProperties(e,t.properties,i):void 0,a=t.children?this.parseChildren(e,t.children,i):void 0,o=null==t.index?void 0:t.index;return{isValue:!1,type:t.type,construct:r,settings:n,adapters:t.adapters,children:a,properties:s,index:o,value:t}}parseValue(e,t,i){if(t instanceof n.JH)return{isValue:!0,value:t};if(u.isArray(t))return{isValue:!0,value:this.parseArray(e,t,i)};if(f(t)){if(\"Color\"===t.type)return{isValue:!0,value:o.Il.fromAny(t.value)};if(\"Percent\"===t.type)return{isValue:!0,value:new l.gG(t.value)};if(\"Template\"===t.type){t.refs&&(i=this.parseRefs(e,t.refs,i));const r=t.settings?this.parseSettings(e,t.settings,i):{};return{isValue:!0,value:h.YS.new(r)}}return!0===t.__parse?{isValue:!0,value:this.parseObject(e,t,i)}:!1===t.__parse?{isValue:!0,value:t}:this.parseEntity(e,t,i)}return u.isString(t)?g(t,i):{isValue:!0,value:t}}parse(e,t,i){const r=this.parseValue(e,t,i);return r.isValue?r.value:_(e,r)}}class y{constructor(e,t){if(Object.defineProperty(this,\"_root\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),!t)throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");this._root=e}static new(e){return new this(e,!0)}parse(e,t={}){return(0,r.mG)(this,void 0,void 0,(function*(){const i=new v;yield i.parseAsync(e);const r=i.parse(this._root,e,[]);if(t.parent){if(!(r instanceof s.j))throw new Error(\"When using the parent setting, the entity must be a Sprite\");t.parent.children.push(r)}else r instanceof n.JH&&r._applyThemes(!0);return i.afterParse(),r}))}parseString(e,t={}){return(0,r.mG)(this,void 0,void 0,(function*(){return yield this.parse(JSON.parse(e),t)}))}}function w(e,t){p[e]||(p[e]=()=>new Promise((e=>{e(t)})))}},6890:function(e,t,i){\"use strict\";i.d(t,{e:function(){return d}});var r=i(6331),n=i(9361),s=i(1112),a=i(6245),o=i(5769),l=i(9582),h=i(5040),u=i(5071),c=i(256);class d extends r.JH{constructor(){super(...arguments),Object.defineProperty(this,\"_refs\",{enumerable:!0,configurable:!0,writable:!0,value:{}})}serialize(e,t=0,i=!1){if(t>this.get(\"maxDepth\",2))return;if(!1===e||!0===e)return e;if(h.isArray(e)){const r=[];return u.each(e,(e=>{r.push(this.serialize(e,t,i))})),r}if(e instanceof l.k){const r=[];return u.each(e.values,(e=>{r.push(this.serialize(e,t,i))})),r}const d={},p=e instanceof r.JH||e instanceof o.YS||e instanceof s.Il||e instanceof a.gG,f=this.get(\"fullSettings\",[]);if(e instanceof r.JH){d.type=e.className;let r=c.keys(e._settings);const n=this.get(\"includeSettings\",[]),s=this.get(\"excludeSettings\",[]);n.length?r=n:s.length&&(r=r.filter((e=>-1===s.indexOf(e)))),r=r.filter((t=>e.isUserSetting(t))),r.length&&(d.settings={},u.each(r,(r=>{const n=e.get(r);void 0!==n&&(d.settings[r]=this.serialize(n,t+1,i||-1!==f.indexOf(r)))})))}else if(e instanceof o.YS){d.type=\"Template\";let i=c.keys(e._settings);return i.length&&(d.settings={},u.each(i,(i=>{d.settings[i]=this.serialize(e.get(i),t+1,-1!==f.indexOf(i))}))),d}if(e instanceof n.w&&e.data.length&&(d.properties={data:this.serialize(e.data.values,1,!0)}),e instanceof s.Il)return{type:\"Color\",value:e.toCSSHex()};if(e instanceof a.gG)return{type:\"Percent\",value:e.percent};if(h.isString(e)||h.isNumber(e))return e;if(h.isObject(e)&&i&&!p){const r=this.get(\"excludeProperties\",[]);c.each(e,((e,n)=>{-1===r.indexOf(e)&&void 0!==n&&(d[e]=this.serialize(n,t+1,i))}))}return 0==t&&c.keys(this._refs).length&&(d.refs=this._refs),d}}Object.defineProperty(d,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Serializer\"}),Object.defineProperty(d,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:r.JH.classNames.concat([d.className])})},3783:function(e,t,i){\"use strict\";i.d(t,{X:function(){return h},v:function(){return l}});var r=i(3409),n=i(6245),s=i(1112),a=i(6881),o=i(9395);function l(e,t,i,r){e.set(t,i.get(r)),i.on(r,(i=>{e.set(t,i)}))}class h extends r.Q{setupDefaultRules(){super.setupDefaultRules();const e=this._root.language,t=this._root.interfaceColors,i=this._root.horizontalLayout,r=this._root.verticalLayout,h=this.rule.bind(this);h(\"InterfaceColors\").setAll({stroke:s.Il.fromHex(15066597),fill:s.Il.fromHex(15987699),primaryButton:s.Il.fromHex(6788316),primaryButtonHover:s.Il.fromHex(6779356),primaryButtonDown:s.Il.fromHex(6872182),primaryButtonActive:s.Il.fromHex(6872182),primaryButtonText:s.Il.fromHex(16777215),primaryButtonStroke:s.Il.fromHex(16777215),secondaryButton:s.Il.fromHex(14277081),secondaryButtonHover:s.Il.fromHex(10724259),secondaryButtonDown:s.Il.fromHex(9276813),secondaryButtonActive:s.Il.fromHex(15132390),secondaryButtonText:s.Il.fromHex(0),secondaryButtonStroke:s.Il.fromHex(16777215),grid:s.Il.fromHex(0),background:s.Il.fromHex(16777215),alternativeBackground:s.Il.fromHex(0),text:s.Il.fromHex(0),alternativeText:s.Il.fromHex(16777215),disabled:s.Il.fromHex(11382189),positive:s.Il.fromHex(5288704),negative:s.Il.fromHex(11730944)});{const e=h(\"ColorSet\");e.setAll({passOptions:{hue:.05,saturation:0,lightness:0},colors:[s.Il.fromHex(6797276)],step:1,reuse:!1,startIndex:0}),e.setPrivate(\"currentStep\",0),e.setPrivate(\"currentPass\",0)}h(\"Entity\").setAll({stateAnimationDuration:0,stateAnimationEasing:o.out(o.cubic)}),h(\"Component\").setAll({interpolationDuration:0,interpolationEasing:o.out(o.cubic)}),h(\"Sprite\").setAll({visible:!0,scale:1,opacity:1,rotation:0,position:\"relative\",tooltipX:n.CI,tooltipY:n.CI,tooltipPosition:\"fixed\",isMeasured:!0}),h(\"Sprite\").states.create(\"default\",{visible:!0,opacity:1}),h(\"Container\").setAll({interactiveChildren:!0,setStateOnChildren:!1}),h(\"Graphics\").setAll({strokeWidth:1}),h(\"Chart\").setAll({width:n.AQ,height:n.AQ,interactiveChildren:!1}),h(\"Sprite\",[\"horizontal\",\"center\"]).setAll({centerX:n.CI,x:n.CI}),h(\"Sprite\",[\"vertical\",\"center\"]).setAll({centerY:n.CI,y:n.CI}),h(\"Container\",[\"horizontal\",\"layout\"]).setAll({layout:i}),h(\"Container\",[\"vertical\",\"layout\"]).setAll({layout:r}),h(\"Pattern\").setAll({repetition:\"repeat\",width:50,height:50,rotation:0,fillOpacity:1}),h(\"LinePattern\").setAll({gap:6,colorOpacity:1,width:49,height:49}),h(\"RectanglePattern\").setAll({gap:6,checkered:!1,centered:!0,maxWidth:5,maxHeight:5,width:48,height:48,strokeWidth:0}),h(\"CirclePattern\").setAll({gap:5,checkered:!1,centered:!1,radius:3,strokeWidth:0,width:45,height:45}),h(\"GrainPattern\").setAll({width:200,height:200,colors:[s.Il.fromHex(0)],size:1,horizontalGap:0,verticalGap:0,density:1,minOpacity:0,maxOpacity:.2}),h(\"LinearGradient\").setAll({rotation:90}),h(\"Legend\").setAll({fillField:\"fill\",strokeField:\"stroke\",nameField:\"name\",layout:a.M.new(this._root,{}),layer:30,clickTarget:\"itemContainer\"}),h(\"Container\",[\"legend\",\"item\",\"itemcontainer\"]).setAll({paddingLeft:5,paddingRight:5,paddingBottom:5,paddingTop:5,layout:i,setStateOnChildren:!0,interactiveChildren:!1,ariaChecked:!0,focusable:!0,ariaLabel:e.translate(\"Press ENTER to toggle\"),role:\"checkbox\"});{const e=h(\"Rectangle\",[\"legend\",\"item\",\"background\"]);e.setAll({fillOpacity:0}),l(e,\"fill\",t,\"background\")}h(\"Container\",[\"legend\",\"marker\"]).setAll({setStateOnChildren:!0,centerY:n.CI,paddingLeft:0,paddingRight:0,paddingBottom:0,paddingTop:0,width:18,height:18}),h(\"RoundedRectangle\",[\"legend\",\"marker\",\"rectangle\"]).setAll({width:n.AQ,height:n.AQ,cornerRadiusBL:3,cornerRadiusTL:3,cornerRadiusBR:3,cornerRadiusTR:3});{const e=h(\"RoundedRectangle\",[\"legend\",\"marker\",\"rectangle\"]).states.create(\"disabled\",{});l(e,\"fill\",t,\"disabled\"),l(e,\"stroke\",t,\"disabled\")}h(\"Label\",[\"legend\",\"label\"]).setAll({centerY:n.CI,marginLeft:5,paddingRight:0,paddingLeft:0,paddingTop:0,paddingBottom:0,populateText:!0}),l(h(\"Label\",[\"legend\",\"label\"]).states.create(\"disabled\",{}),\"fill\",t,\"disabled\"),h(\"Label\",[\"legend\",\"value\",\"label\"]).setAll({centerY:n.CI,marginLeft:5,paddingRight:0,paddingLeft:0,paddingTop:0,paddingBottom:0,width:50,centerX:n.AQ,populateText:!0}),l(h(\"Label\",[\"legend\",\"value\",\"label\"]).states.create(\"disabled\",{}),\"fill\",t,\"disabled\"),h(\"HeatLegend\").setAll({stepCount:1}),h(\"RoundedRectangle\",[\"heatlegend\",\"marker\"]).setAll({cornerRadiusTR:0,cornerRadiusBR:0,cornerRadiusTL:0,cornerRadiusBL:0}),h(\"RoundedRectangle\",[\"vertical\",\"heatlegend\",\"marker\"]).setAll({height:n.AQ,width:15}),h(\"RoundedRectangle\",[\"horizontal\",\"heatlegend\",\"marker\"]).setAll({width:n.AQ,height:15}),h(\"HeatLegend\",[\"vertical\"]).setAll({height:n.AQ}),h(\"HeatLegend\",[\"horizontal\"]).setAll({width:n.AQ}),h(\"Label\",[\"heatlegend\",\"start\"]).setAll({paddingLeft:5,paddingRight:5,paddingTop:5,paddingBottom:5}),h(\"Label\",[\"heatlegend\",\"end\"]).setAll({paddingLeft:5,paddingRight:5,paddingTop:5,paddingBottom:5});{const e=h(\"Label\");e.setAll({paddingTop:8,paddingBottom:8,paddingLeft:10,paddingRight:10,fontFamily:'-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"',fontSize:\"1em\",populateText:!1}),l(e,\"fill\",t,\"text\")}h(\"RadialLabel\").setAll({textType:\"regular\",centerY:n.CI,centerX:n.CI,inside:!1,radius:0,baseRadius:n.AQ,orientation:\"auto\",textAlign:\"center\"}),h(\"RoundedRectangle\").setAll({cornerRadiusTL:8,cornerRadiusBL:8,cornerRadiusTR:8,cornerRadiusBR:8}),h(\"PointedRectangle\").setAll({pointerBaseWidth:15,pointerLength:10,cornerRadius:8}),h(\"Slice\").setAll({shiftRadius:0,dRadius:0,dInnerRadius:0});{const e=h(\"Tick\");e.setAll({strokeOpacity:.15,isMeasured:!1,length:4.5,position:\"absolute\",crisp:!0}),l(e,\"stroke\",t,\"grid\")}h(\"Bullet\").setAll({locationX:.5,locationY:.5}),h(\"Tooltip\").setAll({position:\"absolute\",getFillFromSprite:!0,getStrokeFromSprite:!1,autoTextColor:!0,paddingTop:9,paddingBottom:8,paddingLeft:10,paddingRight:10,marginBottom:5,pointerOrientation:\"vertical\",centerX:n.CI,centerY:n.CI,animationEasing:o.out(o.cubic),exportable:!1}),h(\"Polygon\").setAll({animationEasing:o.out(o.cubic)}),h(\"PointedRectangle\",[\"tooltip\",\"background\"]).setAll({strokeOpacity:.9,cornerRadius:4,pointerLength:4,pointerBaseWidth:8,fillOpacity:.9,stroke:s.Il.fromHex(16777215)});{const e=h(\"Label\",[\"tooltip\"]);e.setAll({role:\"tooltip\",populateText:!0,paddingRight:0,paddingTop:0,paddingLeft:0,paddingBottom:0}),l(e,\"fill\",t,\"alternativeText\")}h(\"Button\").setAll({paddingTop:8,paddingBottom:8,paddingLeft:10,paddingRight:10,interactive:!0,layout:i,interactiveChildren:!1,setStateOnChildren:!0,focusable:!0}),h(\"Button\").states.create(\"hover\",{}),h(\"Button\").states.create(\"down\",{stateAnimationDuration:0}),h(\"Button\").states.create(\"active\",{});{const e=h(\"RoundedRectangle\",[\"button\",\"background\"]);l(e,\"fill\",t,\"primaryButton\"),l(e,\"stroke\",t,\"primaryButtonStroke\")}l(h(\"RoundedRectangle\",[\"button\",\"background\"]).states.create(\"hover\",{}),\"fill\",t,\"primaryButtonHover\"),l(h(\"RoundedRectangle\",[\"button\",\"background\"]).states.create(\"down\",{stateAnimationDuration:0}),\"fill\",t,\"primaryButtonDown\"),l(h(\"RoundedRectangle\",[\"button\",\"background\"]).states.create(\"active\",{}),\"fill\",t,\"primaryButtonActive\"),l(h(\"Graphics\",[\"button\",\"icon\"]),\"stroke\",t,\"primaryButtonText\"),l(h(\"Label\",[\"button\"]),\"fill\",t,\"primaryButtonText\"),h(\"Button\",[\"zoom\"]).setAll({paddingTop:18,paddingBottom:18,paddingLeft:12,paddingRight:12,centerX:46,centerY:-10,y:0,x:n.AQ,role:\"button\",ariaLabel:e.translate(\"Zoom Out\"),layer:30});{const e=h(\"RoundedRectangle\",[\"background\",\"button\",\"zoom\"]);e.setAll({cornerRadiusBL:40,cornerRadiusBR:40,cornerRadiusTL:40,cornerRadiusTR:40}),l(e,\"fill\",t,\"primaryButton\")}l(h(\"RoundedRectangle\",[\"background\",\"button\",\"zoom\"]).states.create(\"hover\",{}),\"fill\",t,\"primaryButtonHover\"),l(h(\"RoundedRectangle\",[\"background\",\"button\",\"zoom\"]).states.create(\"down\",{stateAnimationDuration:0}),\"fill\",t,\"primaryButtonDown\");{const e=h(\"Graphics\",[\"icon\",\"button\",\"zoom\"]);e.setAll({crisp:!0,strokeOpacity:.7,draw:e=>{e.moveTo(0,0),e.lineTo(12,0)}}),l(e,\"stroke\",t,\"primaryButtonText\")}h(\"Button\",[\"resize\"]).setAll({paddingTop:9,paddingBottom:9,paddingLeft:13,paddingRight:13,draggable:!0,centerX:n.CI,centerY:n.CI,position:\"absolute\",role:\"slider\",ariaValueMin:\"0\",ariaValueMax:\"100\",ariaLabel:e.translate(\"Use up and down arrows to move selection\")});{const e=h(\"RoundedRectangle\",[\"background\",\"resize\",\"button\"]);e.setAll({cornerRadiusBL:40,cornerRadiusBR:40,cornerRadiusTL:40,cornerRadiusTR:40}),l(e,\"fill\",t,\"secondaryButton\"),l(e,\"stroke\",t,\"secondaryButtonStroke\")}l(h(\"RoundedRectangle\",[\"background\",\"resize\",\"button\"]).states.create(\"hover\",{}),\"fill\",t,\"secondaryButtonHover\"),l(h(\"RoundedRectangle\",[\"background\",\"resize\",\"button\"]).states.create(\"down\",{stateAnimationDuration:0}),\"fill\",t,\"secondaryButtonDown\");{const e=h(\"Graphics\",[\"resize\",\"button\",\"icon\"]);e.setAll({interactive:!1,crisp:!0,strokeOpacity:.5,draw:e=>{e.moveTo(0,.5),e.lineTo(0,12.5),e.moveTo(4,.5),e.lineTo(4,12.5)}}),l(e,\"stroke\",t,\"secondaryButtonText\")}h(\"Button\",[\"resize\",\"vertical\"]).setAll({rotation:90,cursorOverStyle:\"ns-resize\"}),h(\"Button\",[\"resize\",\"horizontal\"]).setAll({cursorOverStyle:\"ew-resize\"}),h(\"Button\",[\"play\"]).setAll({paddingTop:13,paddingBottom:13,paddingLeft:14,paddingRight:14,ariaLabel:e.translate(\"Play\"),toggleKey:\"active\"});{const e=h(\"RoundedRectangle\",[\"play\",\"background\"]);e.setAll({strokeOpacity:.5,cornerRadiusBL:100,cornerRadiusBR:100,cornerRadiusTL:100,cornerRadiusTR:100}),l(e,\"fill\",t,\"primaryButton\")}{const e=h(\"Graphics\",[\"play\",\"icon\"]);e.setAll({stateAnimationDuration:0,dx:1,draw:e=>{e.moveTo(0,-5),e.lineTo(8,0),e.lineTo(0,5),e.lineTo(0,-5)}}),l(e,\"fill\",t,\"primaryButtonText\")}h(\"Graphics\",[\"play\",\"icon\"]).states.create(\"default\",{stateAnimationDuration:0}),h(\"Graphics\",[\"play\",\"icon\"]).states.create(\"active\",{stateAnimationDuration:0,draw:e=>{e.moveTo(-4,-5),e.lineTo(-1,-5),e.lineTo(-1,5),e.lineTo(-4,5),e.lineTo(-4,-5),e.moveTo(4,-5),e.lineTo(1,-5),e.lineTo(1,5),e.lineTo(4,5),e.lineTo(4,-5)}}),h(\"Button\",[\"switch\"]).setAll({paddingTop:4,paddingBottom:4,paddingLeft:4,paddingRight:4,ariaLabel:e.translate(\"Press ENTER to toggle\"),toggleKey:\"active\",width:40,height:24,layout:null});{const e=h(\"RoundedRectangle\",[\"switch\",\"background\"]);e.setAll({strokeOpacity:.5,cornerRadiusBL:100,cornerRadiusBR:100,cornerRadiusTL:100,cornerRadiusTR:100}),l(e,\"fill\",t,\"primaryButton\")}{const e=h(\"Circle\",[\"switch\",\"icon\"]);e.setAll({radius:8,centerY:0,centerX:0,dx:0}),l(e,\"fill\",t,\"primaryButtonText\")}h(\"Graphics\",[\"switch\",\"icon\"]).states.create(\"active\",{dx:16}),h(\"Scrollbar\").setAll({start:0,end:1,layer:30,animationEasing:o.out(o.cubic)}),h(\"Scrollbar\",[\"vertical\"]).setAll({marginRight:13,marginLeft:13,minWidth:12,height:n.AQ}),h(\"Scrollbar\",[\"horizontal\"]).setAll({marginTop:13,marginBottom:13,minHeight:12,width:n.AQ}),this.rule(\"Button\",[\"scrollbar\"]).setAll({exportable:!1});{const e=h(\"RoundedRectangle\",[\"scrollbar\",\"main\",\"background\"]);e.setAll({cornerRadiusTL:8,cornerRadiusBL:8,cornerRadiusTR:8,cornerRadiusBR:8,fillOpacity:.8}),l(e,\"fill\",t,\"fill\")}{const e=h(\"RoundedRectangle\",[\"scrollbar\",\"thumb\"]);e.setAll({role:\"slider\",ariaLive:\"polite\",position:\"absolute\",draggable:!0}),l(e,\"fill\",t,\"secondaryButton\")}l(h(\"RoundedRectangle\",[\"scrollbar\",\"thumb\"]).states.create(\"hover\",{}),\"fill\",t,\"secondaryButtonHover\"),l(h(\"RoundedRectangle\",[\"scrollbar\",\"thumb\"]).states.create(\"down\",{stateAnimationDuration:0}),\"fill\",t,\"secondaryButtonDown\"),h(\"RoundedRectangle\",[\"scrollbar\",\"thumb\",\"vertical\"]).setAll({x:n.CI,width:n.AQ,centerX:n.CI,ariaLabel:e.translate(\"Use up and down arrows to move selection\")}),h(\"RoundedRectangle\",[\"scrollbar\",\"thumb\",\"horizontal\"]).setAll({y:n.CI,centerY:n.CI,height:n.AQ,ariaLabel:e.translate(\"Use left and right arrows to move selection\")});{const e=h(\"PointedRectangle\",[\"axis\",\"tooltip\",\"background\"]);e.setAll({cornerRadius:0}),l(e,\"fill\",t,\"alternativeBackground\")}h(\"Label\",[\"axis\",\"tooltip\"]).setAll({role:void 0}),h(\"Label\",[\"axis\",\"tooltip\",\"y\"]).setAll({textAlign:\"right\"}),h(\"Label\",[\"axis\",\"tooltip\",\"y\",\"opposite\"]).setAll({textAlign:\"left\"}),h(\"Label\",[\"axis\",\"tooltip\",\"x\"]).setAll({textAlign:\"center\"}),h(\"Tooltip\",[\"categoryaxis\"]).setAll({labelText:\"{category}\"}),h(\"Star\").setAll({spikes:5,innerRadius:5,radius:10}),h(\"Tooltip\",[\"stock\"]).setAll({paddingTop:6,paddingBottom:5,paddingLeft:7,paddingRight:7}),h(\"PointedRectangle\",[\"tooltip\",\"stock\",\"axis\"]).setAll({pointerLength:0,pointerBaseWidth:0,cornerRadius:3}),h(\"Label\",[\"tooltip\",\"stock\"]).setAll({fontSize:\"0.8em\"}),h(\"SpriteResizer\").setAll({rotationStep:10}),h(\"Container\",[\"resizer\",\"grip\"]).states.create(\"hover\",{});{const e=h(\"RoundedRectangle\",[\"resizer\",\"grip\"]);e.setAll({strokeOpacity:.7,strokeWidth:1,fillOpacity:1,width:12,height:12}),l(e,\"fill\",t,\"background\"),l(e,\"stroke\",t,\"alternativeBackground\")}{const e=h(\"RoundedRectangle\",[\"resizer\",\"grip\",\"outline\"]);e.setAll({strokeOpacity:0,fillOpacity:0,width:20,height:20}),e.states.create(\"hover\",{fillOpacity:.3}),l(e,\"fill\",t,\"alternativeBackground\")}h(\"RoundedRectangle\",[\"resizer\",\"grip\",\"left\"]).setAll({cornerRadiusBL:0,cornerRadiusBR:0,cornerRadiusTL:0,cornerRadiusTR:0}),h(\"RoundedRectangle\",[\"resizer\",\"grip\",\"right\"]).setAll({cornerRadiusBL:0,cornerRadiusBR:0,cornerRadiusTL:0,cornerRadiusTR:0});{const e=h(\"Rectangle\",[\"resizer\",\"rectangle\"]);e.setAll({strokeDasharray:[2,2],strokeOpacity:.5,strokeWidth:1}),l(e,\"stroke\",t,\"alternativeBackground\")}}}},7314:function(e,t,i){\"use strict\";i.r(t),i.d(t,{ArrayDisposer:function(){return u.rk},BlendMode:function(){return ee.b},Bullet:function(){return c.g},Button:function(){return d.z},CSVParser:function(){return fe},Chart:function(){return W.k},Circle:function(){return p.C},CirclePattern:function(){return se},Color:function(){return k.Il},ColorSet:function(){return ue.U},Component:function(){return _.w},Container:function(){return v.W},CounterDisposer:function(){return u.DM},DataItem:function(){return _.z},DataProcessor:function(){return ge},DateFormatter:function(){return me.C},Disposer:function(){return u.ku},DurationFormatter:function(){return be.$},Ellipse:function(){return g.P},Entity:function(){return h.JH},Gradient:function(){return te.p},GrainPattern:function(){return J},Graphics:function(){return m.T},GridLayout:function(){return y.M},HeatLegend:function(){return S},HorizontalLayout:function(){return N.G},InterfaceColors:function(){return _e.v},JSONParser:function(){return pe},JsonData:function(){return ce.Q},Label:function(){return w._},Layout:function(){return C.A},Legend:function(){return L.D},Line:function(){return j.x},LinePattern:function(){return ae},LinearGradient:function(){return M.o},ListData:function(){return ce.k},Modal:function(){return l.u},MultiDisposer:function(){return u.FV},MutableValueDisposer:function(){return u.cx},NumberFormatter:function(){return ve.e},PathPattern:function(){return he},Pattern:function(){return Q.c},Percent:function(){return x.gG},Picture:function(){return A.t},PicturePattern:function(){return oe.v},PointedRectangle:function(){return R.i},Polygon:function(){return f.m},RadialGradient:function(){return re},RadialLabel:function(){return B.x},RadialText:function(){return U.f},Rectangle:function(){return F.A},RectanglePattern:function(){return le},Root:function(){return n.f},RoundedRectangle:function(){return O.c},Scrollbar:function(){return H.L},SerialChart:function(){return X.j},Series:function(){return Y.F},Slice:function(){return V.p},Slider:function(){return z},Sprite:function(){return G.j},SpriteResizer:function(){return we.b},Star:function(){return b},Template:function(){return P.YS},Text:function(){return $.x},TextFormatter:function(){return ye.V},Theme:function(){return s.Q},Tick:function(){return Z.d},Timezone:function(){return q.r},Tooltip:function(){return T.u},Triangle:function(){return I},VerticalLayout:function(){return K.Z},addLicense:function(){return a.cP},array:function(){return ie},color:function(){return k.$_},disposeAllRootElements:function(){return a.UZ},ease:function(){return xe},math:function(){return ne},net:function(){return r},object:function(){return de},p0:function(){return x.p0},p100:function(){return x.AQ},p50:function(){return x.CI},percent:function(){return x.aQ},ready:function(){return o.ready},registry:function(){return a.i_},time:function(){return De},type:function(){return E},utils:function(){return o}});var r={};i.r(r),i.d(r,{load:function(){return Oe},readBlob:function(){return Pe}});var n=i(6493),s=i(3409),a=i(3145),o=i(7652),l=i(8219),h=i(6331),u=i(7449),c=i(5108),d=i(8054),p=i(8035),f=i(7770),g=i(2433),m=i(1479);class b extends m.T{_beforeChanged(){super._beforeChanged(),(this.isDirty(\"radius\")||this.isDirty(\"innerRadius\")||this.isDirty(\"spikes\"))&&(this._clear=!0)}_changed(){if(super._changed(),this._clear){const e=this._display,t=this.get(\"radius\",0),i=o.relativeToValue(this.get(\"innerRadius\",0),t),r=this.get(\"spikes\",0),n=Math.PI/r;let s=Math.PI/2*3;e.moveTo(0,-t);for(let a=0;a<r;a++)e.lineTo(Math.cos(s)*t,Math.sin(s)*t),s+=n,e.lineTo(Math.cos(s)*i,Math.sin(s)*i),s+=n;e.lineTo(0,-t),e.closePath()}}}Object.defineProperty(b,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Star\"}),Object.defineProperty(b,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:m.T.classNames.concat([b.className])});var _=i(9361),v=i(8777),y=i(6881),w=i(962),x=i(6245),O=i(3497),P=i(5769),D=i(7144),k=i(1112),T=i(2876),M=i(1747),E=i(5040);class S extends v.W{constructor(){super(...arguments),Object.defineProperty(this,\"labelContainer\",{enumerable:!0,configurable:!0,writable:!0,value:this.children.push(v.W.new(this._root,{}))}),Object.defineProperty(this,\"markerContainer\",{enumerable:!0,configurable:!0,writable:!0,value:this.children.push(v.W.new(this._root,{}))}),Object.defineProperty(this,\"startLabel\",{enumerable:!0,configurable:!0,writable:!0,value:this.labelContainer.children.push(w._.new(this._root,{themeTags:[\"start\"]}))}),Object.defineProperty(this,\"endLabel\",{enumerable:!0,configurable:!0,writable:!0,value:this.labelContainer.children.push(w._.new(this._root,{themeTags:[\"end\"]}))}),Object.defineProperty(this,\"markers\",{enumerable:!0,configurable:!0,writable:!0,value:new D.o(P.YS.new({}),(()=>O.c._new(this._root,{themeTags:o.mergeTags(this.markers.template.get(\"themeTags\",[]),[this.get(\"orientation\"),\"heatlegend\",\"marker\"])},[this.markers.template])))})}_afterNew(){this._settings.themeTags=o.mergeTags(this._settings.themeTags,[\"heatlegend\",this._settings.orientation]),super._afterNew(),this.set(\"tooltip\",T.u.new(this._root,{themeTags:[\"heatlegend\"]}))}makeMarker(){const e=this.markers.make();return e.states.create(\"disabled\",{}),e}showValue(e,t,i){const r=this.getTooltip();if(r&&E.isNumber(e)){const n=this.get(\"startValue\",0),s=(e-n)/(this.get(\"endValue\",1)-n),a=this.get(\"startColor\"),o=this.get(\"endColor\");let l;t||(t=this.getNumberFormatter().format(e)),i||(i=k.Il.interpolate(s,a,o)),r.label.set(\"text\",t),l=\"vertical\"==this.get(\"orientation\")?this.markerContainer.toGlobal({x:0,y:this.innerHeight()*(1-s)}):this.markerContainer.toGlobal({x:this.innerWidth()*s,y:0});let h=r.get(\"background\");h&&h.set(\"fill\",k.Il.interpolate(s,a,o)),r.set(\"pointTo\",l),r.show()}}_prepareChildren(){super._prepareChildren();const e=this.labelContainer,t=this.get(\"orientation\"),i=this.startLabel,r=this.endLabel,n=this.getTooltip();if(this.isDirty(\"orientation\")&&(\"vertical\"==t?(this.markerContainer.setAll({layout:this._root.verticalLayout,height:x.AQ}),this.set(\"layout\",this._root.horizontalLayout),i.setAll({y:x.AQ,x:void 0,centerY:x.AQ,centerX:x.AQ}),r.setAll({y:0,x:void 0,centerY:0,centerX:x.AQ}),e.setAll({height:x.AQ,width:void 0}),n&&n.set(\"pointerOrientation\",\"horizontal\")):(this.markerContainer.setAll({layout:this._root.horizontalLayout,width:x.AQ}),this.set(\"layout\",this._root.verticalLayout),i.setAll({x:0,y:void 0,centerX:0,centerY:0}),r.setAll({x:x.AQ,y:void 0,centerX:x.AQ,centerY:0}),e.setAll({width:x.AQ,height:void 0}),n&&n.set(\"pointerOrientation\",\"vertical\"))),this.isDirty(\"stepCount\")){const e=this.get(\"stepCount\",1),i=this.get(\"startColor\"),r=this.get(\"endColor\");if(this.markerContainer.children.clear(),e>1)for(let n=0;n<e;n++){const s=this.makeMarker();\"vertical\"==t?this.markerContainer.children.moveValue(s,0):this.markerContainer.children.push(s),i&&r&&s.set(\"fill\",k.Il.interpolate(n/e,i,r))}else if(1==e){const e=this.makeMarker();this.markerContainer.children.push(e);const n=M.o.new(this._root,{stops:[{color:i},{color:r}]});if(\"vertical\"==t){n.set(\"rotation\",90);let e=n.get(\"stops\");e&&e.reverse()}else n.set(\"rotation\",0);i&&r&&e.set(\"fillGradient\",n)}}(this.isDirty(\"startText\")||this.isDirty(\"startValue\"))&&i.set(\"text\",this.get(\"startText\",this.getNumberFormatter().format(this.get(\"startValue\",0)))),(this.isDirty(\"endText\")||this.isDirty(\"endValue\"))&&r.set(\"text\",this.get(\"endText\",this.getNumberFormatter().format(this.get(\"endValue\",1))))}}Object.defineProperty(S,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"HeatLegend\"}),Object.defineProperty(S,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:v.W.classNames.concat([S.className])});var N=i(4431),C=i(2010),L=i(3105),j=i(2077),A=i(5021),R=i(8931),B=i(815),U=i(4244),F=i(7142);class I extends m.T{_beforeChanged(){super._beforeChanged(),(this.isDirty(\"width\")||this.isDirty(\"height\")||this.isPrivateDirty(\"width\")||this.isPrivateDirty(\"height\"))&&(this._clear=!0)}_changed(){super._changed(),this._clear&&!this.get(\"draw\")&&this._draw()}_draw(){const e=this.width(),t=this.height(),i=this._display;i.moveTo(-e/2,t/2),i.lineTo(0,-t/2),i.lineTo(e/2,t/2),i.lineTo(-e/2,t/2),i.closePath()}_updateSize(){this.markDirty(),this._clear=!0}}Object.defineProperty(I,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Triangle\"}),Object.defineProperty(I,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:m.T.classNames.concat([I.className])});var H=i(6001);class z extends H.L{_afterNew(){this._addOrientationClass(),super._afterNew(),this.endGrip.setPrivate(\"visible\",!1),this.thumb.setPrivate(\"visible\",!1)}updateGrips(){super.updateGrips();const e=this.startGrip;this.endGrip.setAll({x:e.x(),y:e.y()}),this.setRaw(\"end\",this.get(\"start\"))}}Object.defineProperty(z,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"Slider\"}),Object.defineProperty(z,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:H.L.classNames.concat([z.className])});var V=i(5863),G=i(4596),Y=i(3399),W=i(1337),X=i(5829),$=i(2036),Z=i(2438),K=i(1706),q=i(462),Q=i(3437);class J extends Q.c{constructor(){super(...arguments),Object.defineProperty(this,\"canvas\",{enumerable:!0,configurable:!0,writable:!0,value:document.createElement(\"canvas\")}),Object.defineProperty(this,\"context\",{enumerable:!0,configurable:!0,writable:!0,value:this.canvas.getContext(\"2d\")}),Object.defineProperty(this,\"_clearGrain\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_beforeChanged(){this.canvas.width=this.get(\"width\",200),this.canvas.height=this.get(\"height\",200),(this.isDirty(\"size\")||this.isDirty(\"density\")||this.isDirty(\"minOpacity\")||this.isDirty(\"maxOpacity\")||this.isDirty(\"colors\")||this.isDirty(\"horizontalGap\")||this.isDirty(\"verticalGap\"))&&(this._clearGrain=!0),super._beforeChanged()}_changed(){if(super._changed(),this._clearGrain){const e=this.get(\"width\",200),t=this.get(\"height\",200),i=this.context.getImageData(0,0,e,t),r=Math.max(1,this.get(\"size\",1)),n=this.get(\"minOpacity\",0),s=this.get(\"maxOpacity\",.3),a=this.get(\"colors\",[this.get(\"color\",k.Il.fromHex(0))]),o=e/r,l=t/r,h=this.get(\"density\",1),u=this.get(\"horizontalGap\",0)+1,c=this.get(\"verticalGap\",0)+1;for(let t=0;t<l;t++)if(!(c>0&&t/c!=Math.round(t/c)))for(let l=0;l<o;l++){const o=a[Math.floor(Math.random()*a.length)],c=255*(n+Math.random()*(s-n)),d=Math.random();u>0&&l/u!=Math.round(l/u)||d<h&&this._setRectData(l,t,r,e,i.data,o.r,o.g,o.b,c)}this.context.putImageData(i,0,0),this._pattern=this.context.createPattern(this.canvas,\"repeat\")}this._clearGrain=!1}_checkDirtyFill(){return!1}_setRectData(e,t,i,r,n,s,a,o,l){for(var h=e*i;h<e*i+i;h++)for(var u=t*i;u<t*i+i;u++){var c=4*(u*r+h);n[c]=s,n[c+1]=a,n[c+2]=o,n[c+3]=l}}}Object.defineProperty(J,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"GrainPattern\"}),Object.defineProperty(J,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Q.c.classNames.concat([J.className])});var ee=i(4680),te=i(1437),ie=i(5071);class re extends te.p{getFill(e){const t=this.getBounds(e);let i=0,r=0,n=t.left||0,s=t.right||0,a=t.top||0;const l=s-n,h=(t.bottom||0)-a;let u=e.get(\"radius\");E.isNumber(u)?(i=0,r=0):(u=Math.min(l,h)/2,i=l/2,r=h/2);let c=this.get(\"x\"),d=this.get(\"y\");null!=c&&(i=o.relativeToValue(c,l)),null!=d&&(r=o.relativeToValue(d,h));const p=this._root._renderer.createRadialGradient(i,r,0,i,r,u),f=this.get(\"stops\");if(f){let e=0;ie.each(f,(t=>{let i=t.offset;E.isNumber(i)||(i=e/(f.length-1));let r=t.opacity;E.isNumber(r)||(r=1);let n=t.color;if(n){const e=t.lighten;e&&(n=k.Il.lighten(n,e));const s=t.brighten;s&&(n=k.Il.brighten(n,s)),p.addColorStop(i,\"rgba(\"+n.r+\",\"+n.g+\",\"+n.b+\",\"+r+\")\")}e++}))}return p}}Object.defineProperty(re,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"RadialGradient\"}),Object.defineProperty(re,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:te.p.classNames.concat([re.className])});var ne=i(751);class se extends Q.c{_beforeChanged(){super._beforeChanged(),this.isDirty(\"gap\")&&(this._clear=!0)}_draw(){super._draw();const e=this.get(\"checkered\",!1),t=this.get(\"centered\",!0),i=this.get(\"gap\",0),r=this.get(\"rotation\",0);let n=this.get(\"width\",100),s=this.get(\"height\",100),a=this.get(\"radius\",3),o=2*a+i,l=2*a+i,h=Math.round(n/o),u=Math.round(s/l);o=n/h,l=s/u,0!=r&&(this._display.x=o*ne.cos(r),this._display.y=l*ne.sin(r));const c=this.get(\"color\"),d=this.get(\"colorOpacity\");(c||d)&&this._display.beginFill(c,d);for(let n=0==r?0:2*-u;n<2*u;n++)for(let s=0==r?0:2*-h;s<2*h;s++)if(!e||1!=(1&n)&&1!=(1&s)||1==(1&n)&&1==(1&s)){let e=s*o,r=n*l;t&&(e+=o+i/2,r+=l+i/2),this._display.drawCircle(e-a,r-a,a)}e?(n=n/2-2*i,s=s/2-2*i):(n-=i,s-=i),(c||d)&&this._display.endFill()}}Object.defineProperty(se,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"CirclePattern\"}),Object.defineProperty(se,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Q.c.classNames.concat([se.className])});class ae extends Q.c{_beforeChanged(){super._beforeChanged(),this.isDirty(\"gap\")&&(this._clear=!0)}_draw(){super._draw();const e=this.get(\"width\",100),t=this.get(\"height\",100),i=this.get(\"gap\",0),r=this.get(\"strokeWidth\",1);if(i){let n=i+r,s=t/n;for(let t=-s;t<2*s;t++){const i=Math.round(t*n-n/2)+.5;this._display.moveTo(-e,i),this._display.lineTo(2*e,i)}}else this._display.moveTo(0,0),this._display.lineTo(e,0);this._display.lineStyle(r,this.get(\"color\"),this.get(\"colorOpacity\"));let n=this.get(\"strokeDasharray\");E.isNumber(n)&&(n=n<.5?[0]:[n]),this._display.setLineDash(n);const s=this.get(\"strokeDashoffset\");s&&this._display.setLineDashOffset(s),this._display.endStroke()}}Object.defineProperty(ae,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"LinePattern\"}),Object.defineProperty(ae,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Q.c.classNames.concat([ae.className])});var oe=i(4429);class le extends Q.c{_beforeChanged(){super._beforeChanged(),this.isDirty(\"gap\")&&(this._clear=!0)}_draw(){super._draw();const e=this.get(\"checkered\",!1),t=this.get(\"centered\",!0),i=this.get(\"gap\",0),r=this.get(\"rotation\",0);let n=this.get(\"width\",100),s=this.get(\"height\",100),a=this.get(\"maxWidth\",5),o=this.get(\"maxHeight\",5);const l=this._display;let h=a+i,u=o+i,c=Math.round(n/h),d=Math.round(s/u);h=n/c,u=s/d,0!=r&&(l.x=h/2*ne.cos(r),l.y=-u/2*ne.sin(r));for(let i=0==r?0:2*-d;i<2*d;i++)for(let n=0==r?0:2*-c;n<2*c;n++)if(!e||1!=(1&i)&&1!=(1&n)||1==(1&i)&&1==(1&n)){let e=n*h,r=i*u;t&&(e+=(h-a)/2,r+=(u-o)/2),l.drawRect(e,r,a,o)}e?(n=n/2-2*i,s=s/2-2*i):(n-=i,s-=i);const p=this.get(\"color\"),f=this.get(\"colorOpacity\");(p||f)&&(l.beginFill(p,f),l.endFill())}}Object.defineProperty(le,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"RectanglePattern\"}),Object.defineProperty(le,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Q.c.classNames.concat([le.className])});class he extends Q.c{_beforeChanged(){super._beforeChanged(),this.isDirty(\"svgPath\")&&(this._clear=!0)}_draw(){super._draw();const e=this.get(\"svgPath\");null!=e&&this._display.svgPath(e);const t=this.get(\"color\"),i=this.get(\"colorOpacity\");(t||i)&&(this._display.beginFill(t,i),this._display.endFill())}}Object.defineProperty(he,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"PathPattern\"}),Object.defineProperty(he,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Q.c.classNames.concat([he.className])});var ue=i(2754),ce=i(9582),de=i(256);class pe{static parse(e,t){t=this._applyDefaults(t);try{if(E.isString(e)){let i=JSON.parse(e);return t.reverse&&E.isArray(i)&&i.reverse(),i}if(E.isArray(e)||E.isObject(e))return e;throw\"Unable to parse JSON data\"}catch(e){return}}static _applyDefaults(e){const t={};return e||(e={}),de.each({reverse:!1},((i,r)=>{t[i]=e[i]||r})),t}}class fe{static parse(e,t){t=this._applyDefaults(t);let i,r,n,s=this.CSVToArray(e,t.delimiter),a=[],o=[];for(r=0;r<t.skipRows;r++)s.shift();if(t.useColumnNames){o=s.shift();for(let e=0;e<o.length;e++)i=null!=o[e]?o[e].replace(/^\\s+|\\s+$/gm,\"\"):\"\",\"\"===i&&(i=\"col\"+e),o[e]=i}for(;n=t.reverse?s.pop():s.shift(),n;){if(t.skipEmpty&&1===n.length&&\"\"===n[0])continue;let e={};for(r=0;r<n.length;r++)i=void 0===o[r]?\"col\"+r:o[r],e[i]=n[r];a.push(e)}return a}static CSVToArray(e,t){t=t||\",\";let i=new RegExp(\"(\\\\\"+t+'|\\\\r?\\\\n|\\\\r|^)(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|([^\"\\\\'+t+\"\\\\r\\\\n]*))\",\"gi\"),r=[[]],n=null;for(;n=i.exec(e),n;){let e,i=n[1];i.length&&i!==t&&r.push([]),e=n[2]?n[2].replace(new RegExp('\"\"',\"g\"),'\"'):n[3],r[r.length-1].push(e)}return r}static _applyDefaults(e){const t={};return e||(e={}),de.each({delimiter:\",\",reverse:!1,skipRows:0,skipEmpty:!0,useColumnNames:!1},((i,r)=>{t[i]=e[i]||r})),t}}class ge extends h.JH{constructor(){super(...arguments),Object.defineProperty(this,\"_checkDates\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_checkNumbers\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_checkColors\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_checkEmpty\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_checkDeep\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_afterNew(){super._afterNew(),this._checkFeatures(),this.on(\"dateFields\",(()=>this._checkFeatures())),this.on(\"dateFormat\",(()=>this._checkFeatures())),this.on(\"numericFields\",(()=>this._checkFeatures())),this.on(\"colorFields\",(()=>this._checkFeatures())),this.on(\"emptyAs\",(()=>this._checkFeatures()))}_checkFeatures(){(this.isDirty(\"dateFields\")||this.isDirty(\"dateFormat\"))&&(this._checkDates=this.get(\"dateFields\")&&this.get(\"dateFields\").length>0),this.isDirty(\"numericFields\")&&(this._checkNumbers=this.get(\"numericFields\")&&this.get(\"numericFields\").length>0),this.isDirty(\"colorFields\")&&(this._checkColors=this.get(\"colorFields\")&&this.get(\"colorFields\").length>0),this.isDirty(\"emptyAs\")&&(this._checkEmpty=null!=this.get(\"emptyAs\")),this._checkDeepFeatures()}_checkDeepFeatures(){const e=[];ie.each([\"dateFields\",\"numericFields\",\"colorFields\"],(t=>{ie.each(this.get(t,[]),(t=>{const i=t.split(\".\");for(i.pop();i.length>0;)e.push(i.join(\".\")),i.pop()}))})),this._checkDeep=e.length>0,this.setPrivate(\"deepFields\",e)}processMany(e){E.isArray(e)&&(this._checkDates||this._checkNumbers||this._checkColors||this._checkEmpty)&&ie.each(e,(e=>{this.processRow(e)}))}processRow(e,t=\"\"){de.each(e,((i,r)=>{const n=t+i;this._checkEmpty&&(e[i]=this._maybeToEmpty(e[i])),this._checkNumbers&&(e[i]=this._maybeToNumber(n,e[i])),this._checkDates&&(e[i]=this._maybeToDate(n,e[i])),this._checkColors&&(e[i]=this._maybeToColor(n,e[i])),this._checkDeep&&-1!==this.getPrivate(\"deepFields\",[]).indexOf(n)&&E.isObject(e[i])&&this.processRow(e[i],n+\".\")}))}_maybeToNumber(e,t){return-1!==this.get(\"numericFields\").indexOf(e)?E.toNumber(t):t}_maybeToDate(e,t){return-1!==this.get(\"dateFields\").indexOf(e)?this._root.dateFormatter.parse(t,this.get(\"dateFormat\",\"\")).getTime():t}_maybeToEmpty(e){return null!=e&&\"\"!=e||null==this.get(\"emptyAs\")?e:this.get(\"emptyAs\")}_maybeToColor(e,t){return-1!==this.get(\"colorFields\").indexOf(e)?k.Il.fromAny(t):t}}var me=i(6460),be=i(798),_e=i(9821),ve=i(780),ye=i(7255),we=i(1195),xe=i(9395);function Oe(e,t,i){return new Promise(((r,n)=>{let s=null!=i&&\"blob\"==i.responseType,a=new XMLHttpRequest;if(a.onload=()=>{if(200===a.status){let e,i;if(s)return i=a.response,void Pe(i).then((e=>{let n={xhr:a,error:!1,response:e,blob:i,type:a.getResponseHeader(\"Content-Type\"),target:t};r(n)}));e=a.responseText||a.response;let n={xhr:a,error:!1,response:e,blob:i,type:a.getResponseHeader(\"Content-Type\"),target:t};r(n)}else n({xhr:a,error:!0,type:a.getResponseHeader(\"Content-Type\"),target:t})},a.onerror=()=>{n({xhr:a,error:!0,type:a.getResponseHeader(\"Content-Type\"),target:t})},a.open(\"GET\",e,!0),i&&i.withCredentials&&(a.withCredentials=!0),null!=i){if(null!=i.requestHeaders)for(let e=0;e<i.requestHeaders.length;e++){let t=i.requestHeaders[e];a.setRequestHeader(t.key,t.value)}null!=i.responseType&&(a.responseType=i.responseType)}a.send()}))}function Pe(e){return new Promise(((t,i)=>{const r=new FileReader;r.onload=e=>{t(r.result)},r.onerror=e=>{i(e)},r.readAsText(e)}))}var De=i(1926)},3100:function(e,t){\"use strict\";t.Z={firstDayOfWeek:1,_decimalSeparator:\".\",_thousandSeparator:\",\",_percentPrefix:null,_percentSuffix:\"%\",_big_number_suffix_3:\"k\",_big_number_suffix_6:\"M\",_big_number_suffix_9:\"G\",_big_number_suffix_12:\"T\",_big_number_suffix_15:\"P\",_big_number_suffix_18:\"E\",_big_number_suffix_21:\"Z\",_big_number_suffix_24:\"Y\",_small_number_suffix_3:\"m\",_small_number_suffix_6:\"\u03bc\",_small_number_suffix_9:\"n\",_small_number_suffix_12:\"p\",_small_number_suffix_15:\"f\",_small_number_suffix_18:\"a\",_small_number_suffix_21:\"z\",_small_number_suffix_24:\"y\",_byte_suffix_B:\"B\",_byte_suffix_KB:\"KB\",_byte_suffix_MB:\"MB\",_byte_suffix_GB:\"GB\",_byte_suffix_TB:\"TB\",_byte_suffix_PB:\"PB\",_date:\"yyyy-MM-dd\",_date_millisecond:\"mm:ss SSS\",_date_millisecond_full:\"HH:mm:ss SSS\",_date_second:\"HH:mm:ss\",_date_second_full:\"HH:mm:ss\",_date_minute:\"HH:mm\",_date_minute_full:\"HH:mm - MMM dd, yyyy\",_date_hour:\"HH:mm\",_date_hour_full:\"HH:mm - MMM dd, yyyy\",_date_day:\"MMM dd\",_date_day_full:\"MMM dd, yyyy\",_date_week:\"ww\",_date_week_full:\"MMM dd, yyyy\",_date_month:\"MMM\",_date_month_full:\"MMM, yyyy\",_date_year:\"yyyy\",_duration_millisecond:\"SSS\",_duration_millisecond_second:\"ss.SSS\",_duration_millisecond_minute:\"mm:ss SSS\",_duration_millisecond_hour:\"hh:mm:ss SSS\",_duration_millisecond_day:\"d'd' mm:ss SSS\",_duration_millisecond_week:\"d'd' mm:ss SSS\",_duration_millisecond_month:\"M'm' dd'd' mm:ss SSS\",_duration_millisecond_year:\"y'y' MM'm' dd'd' mm:ss SSS\",_duration_second:\"ss\",_duration_second_minute:\"mm:ss\",_duration_second_hour:\"hh:mm:ss\",_duration_second_day:\"d'd' hh:mm:ss\",_duration_second_week:\"d'd' hh:mm:ss\",_duration_second_month:\"M'm' dd'd' hh:mm:ss\",_duration_second_year:\"y'y' MM'm' dd'd' hh:mm:ss\",_duration_minute:\"mm\",_duration_minute_hour:\"hh:mm\",_duration_minute_day:\"d'd' hh:mm\",_duration_minute_week:\"d'd' hh:mm\",_duration_minute_month:\"M'm' dd'd' hh:mm\",_duration_minute_year:\"y'y' MM'm' dd'd' hh:mm\",_duration_hour:\"hh'h'\",_duration_hour_day:\"d'd' hh'h'\",_duration_hour_week:\"d'd' hh'h'\",_duration_hour_month:\"M'm' dd'd' hh'h'\",_duration_hour_year:\"y'y' MM'm' dd'd' hh'h'\",_duration_day:\"d'd'\",_duration_day_week:\"d'd'\",_duration_day_month:\"M'm' dd'd'\",_duration_day_year:\"y'y' MM'm' dd'd'\",_duration_week:\"w'w'\",_duration_week_month:\"w'w'\",_duration_week_year:\"w'w'\",_duration_month:\"M'm'\",_duration_month_year:\"y'y' MM'm'\",_duration_year:\"y'y'\",_era_ad:\"AD\",_era_bc:\"BC\",A:\"\",P:\"\",AM:\"\",PM:\"\",\"A.M.\":\"\",\"P.M.\":\"\",January:\"\",February:\"\",March:\"\",April:\"\",May:\"\",June:\"\",July:\"\",August:\"\",September:\"\",October:\"\",November:\"\",December:\"\",Jan:\"\",Feb:\"\",Mar:\"\",Apr:\"\",\"May(short)\":\"May\",Jun:\"\",Jul:\"\",Aug:\"\",Sep:\"\",Oct:\"\",Nov:\"\",Dec:\"\",Sunday:\"\",Monday:\"\",Tuesday:\"\",Wednesday:\"\",Thursday:\"\",Friday:\"\",Saturday:\"\",Sun:\"\",Mon:\"\",Tue:\"\",Wed:\"\",Thu:\"\",Fri:\"\",Sat:\"\",_dateOrd:function(e){let t=\"th\";if(e<11||e>13)switch(e%10){case 1:t=\"st\";break;case 2:t=\"nd\";break;case 3:t=\"rd\"}return t},\"Zoom Out\":\"\",Play:\"\",Stop:\"\",Legend:\"\",\"Press ENTER to toggle\":\"\",Loading:\"\",Home:\"\",Chart:\"\",\"Serial chart\":\"\",\"X/Y chart\":\"\",\"Pie chart\":\"\",\"Gauge chart\":\"\",\"Radar chart\":\"\",\"Sankey diagram\":\"\",\"Flow diagram\":\"\",\"Chord diagram\":\"\",\"TreeMap chart\":\"\",\"Force directed tree\":\"\",\"Sliced chart\":\"\",Series:\"\",\"Candlestick Series\":\"\",\"OHLC Series\":\"\",\"Column Series\":\"\",\"Line Series\":\"\",\"Pie Slice Series\":\"\",\"Funnel Series\":\"\",\"Pyramid Series\":\"\",\"X/Y Series\":\"\",Map:\"\",\"Press ENTER to zoom in\":\"\",\"Press ENTER to zoom out\":\"\",\"Use arrow keys to zoom in and out\":\"\",\"Use plus and minus keys on your keyboard to zoom in and out\":\"\",Export:\"\",Image:\"\",Data:\"\",Print:\"\",\"Press ENTER or use arrow keys to navigate\":\"\",\"Press ENTER to open\":\"\",\"Press ENTER to print.\":\"\",\"Press ENTER to export as %1.\":\"\",\"(Press ESC to close this message)\":\"\",\"Image Export Complete\":\"\",\"Export operation took longer than expected. Something might have gone wrong.\":\"\",\"Saved from\":\"\",PNG:\"\",JPG:\"\",GIF:\"\",SVG:\"\",PDF:\"\",JSON:\"\",CSV:\"\",XLSX:\"\",HTML:\"\",\"Use TAB to select grip buttons or left and right arrows to change selection\":\"\",\"Use left and right arrows to move selection\":\"\",\"Use left and right arrows to move left selection\":\"\",\"Use left and right arrows to move right selection\":\"\",\"Use TAB select grip buttons or up and down arrows to change selection\":\"\",\"Use up and down arrows to move selection\":\"\",\"Use up and down arrows to move lower selection\":\"\",\"Use up and down arrows to move upper selection\":\"\",\"From %1 to %2\":\"\",\"From %1\":\"\",\"To %1\":\"\",\"No parser available for file: %1\":\"\",\"Error parsing file: %1\":\"\",\"Unable to load file: %1\":\"\",\"Invalid date\":\"\",Close:\"\",Minimize:\"\"}},9629:function(e){var t=function(e){\"use strict\";var t,i=Object.prototype,r=i.hasOwnProperty,n=Object.defineProperty||function(e,t,i){e[t]=i.value},s=\"function\"==typeof Symbol?Symbol:{},a=s.iterator||\"@@iterator\",o=s.asyncIterator||\"@@asyncIterator\",l=s.toStringTag||\"@@toStringTag\";function h(e,t,i){return Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{h({},\"\")}catch(e){h=function(e,t,i){return e[t]=i}}function u(e,t,i,r){var s=t&&t.prototype instanceof b?t:b,a=Object.create(s.prototype),o=new S(r||[]);return n(a,\"_invoke\",{value:k(e,i,o)}),a}function c(e,t,i){try{return{type:\"normal\",arg:e.call(t,i)}}catch(e){return{type:\"throw\",arg:e}}}e.wrap=u;var d=\"suspendedStart\",p=\"suspendedYield\",f=\"executing\",g=\"completed\",m={};function b(){}function _(){}function v(){}var y={};h(y,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(N([])));x&&x!==i&&r.call(x,a)&&(y=x);var O=v.prototype=b.prototype=Object.create(y);function P(e){[\"next\",\"throw\",\"return\"].forEach((function(t){h(e,t,(function(e){return this._invoke(t,e)}))}))}function D(e,t){function i(n,s,a,o){var l=c(e[n],e,s);if(\"throw\"!==l.type){var h=l.arg,u=h.value;return u&&\"object\"==typeof u&&r.call(u,\"__await\")?t.resolve(u.__await).then((function(e){i(\"next\",e,a,o)}),(function(e){i(\"throw\",e,a,o)})):t.resolve(u).then((function(e){h.value=e,a(h)}),(function(e){return i(\"throw\",e,a,o)}))}o(l.arg)}var s;n(this,\"_invoke\",{value:function(e,r){function n(){return new t((function(t,n){i(e,r,t,n)}))}return s=s?s.then(n,n):n()}})}function k(e,t,i){var r=d;return function(n,s){if(r===f)throw new Error(\"Generator is already running\");if(r===g){if(\"throw\"===n)throw s;return C()}for(i.method=n,i.arg=s;;){var a=i.delegate;if(a){var o=T(a,i);if(o){if(o===m)continue;return o}}if(\"next\"===i.method)i.sent=i._sent=i.arg;else if(\"throw\"===i.method){if(r===d)throw r=g,i.arg;i.dispatchException(i.arg)}else\"return\"===i.method&&i.abrupt(\"return\",i.arg);r=f;var l=c(e,t,i);if(\"normal\"===l.type){if(r=i.done?g:p,l.arg===m)continue;return{value:l.arg,done:i.done}}\"throw\"===l.type&&(r=g,i.method=\"throw\",i.arg=l.arg)}}}function T(e,i){var r=i.method,n=e.iterator[r];if(n===t)return i.delegate=null,\"throw\"===r&&e.iterator.return&&(i.method=\"return\",i.arg=t,T(e,i),\"throw\"===i.method)||\"return\"!==r&&(i.method=\"throw\",i.arg=new TypeError(\"The iterator does not provide a '\"+r+\"' method\")),m;var s=c(n,e.iterator,i.arg);if(\"throw\"===s.type)return i.method=\"throw\",i.arg=s.arg,i.delegate=null,m;var a=s.arg;return a?a.done?(i[e.resultName]=a.value,i.next=e.nextLoc,\"return\"!==i.method&&(i.method=\"next\",i.arg=t),i.delegate=null,m):a:(i.method=\"throw\",i.arg=new TypeError(\"iterator result is not an object\"),i.delegate=null,m)}function M(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type=\"normal\",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:\"root\"}],e.forEach(M,this),this.reset(!0)}function N(e){if(e){var i=e[a];if(i)return i.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,s=function i(){for(;++n<e.length;)if(r.call(e,n))return i.value=e[n],i.done=!1,i;return i.value=t,i.done=!0,i};return s.next=s}}return{next:C}}function C(){return{value:t,done:!0}}return _.prototype=v,n(O,\"constructor\",{value:v,configurable:!0}),n(v,\"constructor\",{value:_,configurable:!0}),_.displayName=h(v,l,\"GeneratorFunction\"),e.isGeneratorFunction=function(e){var t=\"function\"==typeof e&&e.constructor;return!!t&&(t===_||\"GeneratorFunction\"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,v):(e.__proto__=v,h(e,l,\"GeneratorFunction\")),e.prototype=Object.create(O),e},e.awrap=function(e){return{__await:e}},P(D.prototype),h(D.prototype,o,(function(){return this})),e.AsyncIterator=D,e.async=function(t,i,r,n,s){void 0===s&&(s=Promise);var a=new D(u(t,i,r,n),s);return e.isGeneratorFunction(i)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},P(O),h(O,l,\"Generator\"),h(O,a,(function(){return this})),h(O,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(e){var t=Object(e),i=[];for(var r in t)i.push(r);return i.reverse(),function e(){for(;i.length;){var r=i.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=N,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(E),!e)for(var i in this)\"t\"===i.charAt(0)&&r.call(this,i)&&!isNaN(+i.slice(1))&&(this[i]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if(\"throw\"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var i=this;function n(r,n){return o.type=\"throw\",o.arg=e,i.next=r,n&&(i.method=\"next\",i.arg=t),!!n}for(var s=this.tryEntries.length-1;s>=0;--s){var a=this.tryEntries[s],o=a.completion;if(\"root\"===a.tryLoc)return n(\"end\");if(a.tryLoc<=this.prev){var l=r.call(a,\"catchLoc\"),h=r.call(a,\"finallyLoc\");if(l&&h){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!h)throw new Error(\"try statement without catch or finally\");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(e,t){for(var i=this.tryEntries.length-1;i>=0;--i){var n=this.tryEntries[i];if(n.tryLoc<=this.prev&&r.call(n,\"finallyLoc\")&&this.prev<n.finallyLoc){var s=n;break}}s&&(\"break\"===e||\"continue\"===e)&&s.tryLoc<=t&&t<=s.finallyLoc&&(s=null);var a=s?s.completion:{};return a.type=e,a.arg=t,s?(this.method=\"next\",this.next=s.finallyLoc,m):this.complete(a)},complete:function(e,t){if(\"throw\"===e.type)throw e.arg;return\"break\"===e.type||\"continue\"===e.type?this.next=e.arg:\"return\"===e.type?(this.rval=this.arg=e.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var i=this.tryEntries[t];if(i.finallyLoc===e)return this.complete(i.completion,i.afterLoc),E(i),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var i=this.tryEntries[t];if(i.tryLoc===e){var r=i.completion;if(\"throw\"===r.type){var n=r.arg;E(i)}return n}}throw new Error(\"illegal catch attempt\")},delegateYield:function(e,i,r){return this.delegate={iterator:N(e),resultName:i,nextLoc:r},\"next\"===this.method&&(this.arg=t),m}},e}(e.exports);try{regeneratorRuntime=t}catch(e){\"object\"==typeof globalThis?globalThis.regeneratorRuntime=t:Function(\"r\",\"regeneratorRuntime = r\")(t)}},8494:function(e,t,i){\"use strict\";i.r(t),i.d(t,{am5:function(){return g}});const r=window.Promise,n=r&&r.prototype.then,s=r&&r.prototype.catch,a=r&&r.prototype.finally,o=r&&r.reject,l=r&&r.resolve,h=r&&r.allSettled,u=r&&r.all,c=r&&r.race,d=window.fetch,p=String.prototype.startsWith,f=String.prototype.endsWith;i(9629);const g=i(7314);var m;i.p=(m=function(){if(document.currentScript)return document.currentScript;var e=document.getElementsByTagName(\"script\");return e[e.length-1]}().src,/(.*\\/)[^\\/]*$/.exec(m)[1]),r&&(window.Promise=r,n&&(r.prototype.then=n),s&&(r.prototype.catch=s),a&&(r.prototype.finally=a),o&&(r.reject=o),l&&(r.resolve=l),h&&(r.allSettled=h),u&&(r.all=u),c&&(r.race=c)),d&&(window.fetch=d),p&&(String.prototype.startsWith=p),f&&(String.prototype.endsWith=f)},4138:function(e,t){\"use strict\";var i={value:()=>{}};function r(){for(var e,t=0,i=arguments.length,r={};t<i;++t){if(!(e=arguments[t]+\"\")||e in r||/[\\s.]/.test(e))throw new Error(\"illegal type: \"+e);r[e]=[]}return new n(r)}function n(e){this._=e}function s(e,t){for(var i,r=0,n=e.length;r<n;++r)if((i=e[r]).name===t)return i.value}function a(e,t,r){for(var n=0,s=e.length;n<s;++n)if(e[n].name===t){e[n]=i,e=e.slice(0,n).concat(e.slice(n+1));break}return null!=r&&e.push({name:t,value:r}),e}n.prototype=r.prototype={constructor:n,on:function(e,t){var i,r,n=this._,o=(r=n,(e+\"\").trim().split(/^|\\s+/).map((function(e){var t=\"\",i=e.indexOf(\".\");if(i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),e&&!r.hasOwnProperty(e))throw new Error(\"unknown type: \"+e);return{type:e,name:t}}))),l=-1,h=o.length;if(!(arguments.length<2)){if(null!=t&&\"function\"!=typeof t)throw new Error(\"invalid callback: \"+t);for(;++l<h;)if(i=(e=o[l]).type)n[i]=a(n[i],e.name,t);else if(null==t)for(i in n)n[i]=a(n[i],e.name,null);return this}for(;++l<h;)if((i=(e=o[l]).type)&&(i=s(n[i],e.name)))return i},copy:function(){var e={},t=this._;for(var i in t)e[i]=t[i].slice();return new n(e)},call:function(e,t){if((i=arguments.length-2)>0)for(var i,r,n=new Array(i),s=0;s<i;++s)n[s]=arguments[s+2];if(!this._.hasOwnProperty(e))throw new Error(\"unknown type: \"+e);for(s=0,i=(r=this._[e]).length;s<i;++s)r[s].value.apply(t,n)},apply:function(e,t,i){if(!this._.hasOwnProperty(e))throw new Error(\"unknown type: \"+e);for(var r=this._[e],n=0,s=r.length;n<s;++n)r[n].value.apply(t,i)}},t.Z=r},8433:function(e,t,i){\"use strict\";function r(e){return null==e?null:n(e)}function n(e){if(\"function\"!=typeof e)throw new Error;return e}i.d(t,{C:function(){return n},j:function(){return r}})},7639:function(e,t,i){\"use strict\";function r(){return 0}function n(e){return function(){return e}}i.d(t,{G:function(){return r},Z:function(){return n}})},2156:function(e,t,i){\"use strict\";i.d(t,{Z:function(){return w}});var r=i(8433),n=i(7639);const s=1664525,a=1013904223,o=4294967296;function l(e,t){var i,r;if(c(t,e))return[t];for(i=0;i<e.length;++i)if(h(t,e[i])&&c(p(e[i],t),e))return[e[i],t];for(i=0;i<e.length-1;++i)for(r=i+1;r<e.length;++r)if(h(p(e[i],e[r]),t)&&h(p(e[i],t),e[r])&&h(p(e[r],t),e[i])&&c(f(e[i],e[r],t),e))return[e[i],e[r],t];throw new Error}function h(e,t){var i=e.r-t.r,r=t.x-e.x,n=t.y-e.y;return i<0||i*i<r*r+n*n}function u(e,t){var i=e.r-t.r+1e-9*Math.max(e.r,t.r,1),r=t.x-e.x,n=t.y-e.y;return i>0&&i*i>r*r+n*n}function c(e,t){for(var i=0;i<t.length;++i)if(!u(e,t[i]))return!1;return!0}function d(e){switch(e.length){case 1:return function(e){return{x:e.x,y:e.y,r:e.r}}(e[0]);case 2:return p(e[0],e[1]);case 3:return f(e[0],e[1],e[2])}}function p(e,t){var i=e.x,r=e.y,n=e.r,s=t.x,a=t.y,o=t.r,l=s-i,h=a-r,u=o-n,c=Math.sqrt(l*l+h*h);return{x:(i+s+l/c*u)/2,y:(r+a+h/c*u)/2,r:(c+n+o)/2}}function f(e,t,i){var r=e.x,n=e.y,s=e.r,a=t.x,o=t.y,l=t.r,h=i.x,u=i.y,c=i.r,d=r-a,p=r-h,f=n-o,g=n-u,m=l-s,b=c-s,_=r*r+n*n-s*s,v=_-a*a-o*o+l*l,y=_-h*h-u*u+c*c,w=p*f-d*g,x=(f*y-g*v)/(2*w)-r,O=(g*m-f*b)/w,P=(p*v-d*y)/(2*w)-n,D=(d*b-p*m)/w,k=O*O+D*D-1,T=2*(s+x*O+P*D),M=x*x+P*P-s*s,E=-(Math.abs(k)>1e-6?(T+Math.sqrt(T*T-4*k*M))/(2*k):M/T);return{x:r+x+O*E,y:n+P+D*E,r:E}}function g(e,t,i){var r,n,s,a,o=e.x-t.x,l=e.y-t.y,h=o*o+l*l;h?(n=t.r+i.r,n*=n,a=e.r+i.r,n>(a*=a)?(r=(h+a-n)/(2*h),s=Math.sqrt(Math.max(0,a/h-r*r)),i.x=e.x-r*o-s*l,i.y=e.y-r*l+s*o):(r=(h+n-a)/(2*h),s=Math.sqrt(Math.max(0,n/h-r*r)),i.x=t.x+r*o-s*l,i.y=t.y+r*l+s*o)):(i.x=t.x+i.r,i.y=t.y)}function m(e,t){var i=e.r+t.r-1e-6,r=t.x-e.x,n=t.y-e.y;return i>0&&i*i>r*r+n*n}function b(e){var t=e._,i=e.next._,r=t.r+i.r,n=(t.x*i.r+i.x*t.r)/r,s=(t.y*i.r+i.y*t.r)/r;return n*n+s*s}function _(e){this._=e,this.next=null,this.previous=null}function v(e,t){if(!(a=(i=e,e=\"object\"==typeof i&&\"length\"in i?i:Array.from(i)).length))return 0;var i,r,n,s,a,o,h,c,p,f,v,y;if((r=e[0]).x=0,r.y=0,!(a>1))return r.r;if(n=e[1],r.x=-n.r,n.x=r.r,n.y=0,!(a>2))return r.r+n.r;g(n,r,s=e[2]),r=new _(r),n=new _(n),s=new _(s),r.next=s.previous=n,n.next=r.previous=s,s.next=n.previous=r;e:for(c=3;c<a;++c){g(r._,n._,s=e[c]),s=new _(s),p=n.next,f=r.previous,v=n._.r,y=r._.r;do{if(v<=y){if(m(p._,s._)){n=p,r.next=n,n.previous=r,--c;continue e}v+=p._.r,p=p.next}else{if(m(f._,s._)){(r=f).next=n,n.previous=r,--c;continue e}y+=f._.r,f=f.previous}}while(p!==f.next);for(s.previous=r,s.next=n,r.next=n.previous=n=s,o=b(r);(s=s.next)!==n;)(h=b(s))<o&&(r=s,o=h);n=r.next}for(r=[n._],s=n;(s=s.next)!==n;)r.push(s._);for(s=function(e,t){for(var i,r,n=0,s=(e=function(e,t){let i,r,n=e.length;for(;n;)r=t()*n--|0,i=e[n],e[n]=e[r],e[r]=i;return e}(Array.from(e),t)).length,a=[];n<s;)i=e[n],r&&u(r,i)?++n:(r=d(a=l(a,i)),n=0);return r}(r,t),c=0;c<a;++c)(r=e[c]).x-=s.x,r.y-=s.y;return s.r}function y(e){return Math.sqrt(e.value)}function w(){var e=null,t=1,i=1,l=n.G;function h(r){const h=function(){let e=1;return()=>(e=(s*e+a)%o)/o}();return r.x=t/2,r.y=i/2,e?r.eachBefore(x(e)).eachAfter(O(l,.5,h)).eachBefore(P(1)):r.eachBefore(x(y)).eachAfter(O(n.G,1,h)).eachAfter(O(l,r.r/Math.min(t,i),h)).eachBefore(P(Math.min(t,i)/(2*r.r))),r}return h.radius=function(t){return arguments.length?(e=(0,r.j)(t),h):e},h.size=function(e){return arguments.length?(t=+e[0],i=+e[1],h):[t,i]},h.padding=function(e){return arguments.length?(l=\"function\"==typeof e?e:(0,n.Z)(+e),h):l},h}function x(e){return function(t){t.children||(t.r=Math.max(0,+e(t)||0))}}function O(e,t,i){return function(r){if(n=r.children){var n,s,a,o=n.length,l=e(r)*t||0;if(l)for(s=0;s<o;++s)n[s].r+=l;if(a=v(n,i),l)for(s=0;s<o;++s)n[s].r-=l;r.r=a+l}}}function P(e){return function(t){var i=t.parent;t.r*=e,i&&(t.x=i.x+e*t.x,t.y=i.y+e*t.y)}}},5493:function(e,t,i){\"use strict\";i.d(t,{ET:function(){return h},y$:function(){return l}});const r=Math.PI,n=2*r,s=1e-6,a=n-s;function o(e){this._+=e[0];for(let t=1,i=e.length;t<i;++t)this._+=arguments[t]+e[t]}class l{constructor(e){this._x0=this._y0=this._x1=this._y1=null,this._=\"\",this._append=null==e?o:function(e){let t=Math.floor(e);if(!(t>=0))throw new Error(`invalid digits: ${e}`);if(t>15)return o;const i=10**t;return function(e){this._+=e[0];for(let t=1,r=e.length;t<r;++t)this._+=Math.round(arguments[t]*i)/i+e[t]}}(e)}moveTo(e,t){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(e,t){this._append`L${this._x1=+e},${this._y1=+t}`}quadraticCurveTo(e,t,i,r){this._append`Q${+e},${+t},${this._x1=+i},${this._y1=+r}`}bezierCurveTo(e,t,i,r,n,s){this._append`C${+e},${+t},${+i},${+r},${this._x1=+n},${this._y1=+s}`}arcTo(e,t,i,n,a){if(e=+e,t=+t,i=+i,n=+n,(a=+a)<0)throw new Error(`negative radius: ${a}`);let o=this._x1,l=this._y1,h=i-e,u=n-t,c=o-e,d=l-t,p=c*c+d*d;if(null===this._x1)this._append`M${this._x1=e},${this._y1=t}`;else if(p>s)if(Math.abs(d*h-u*c)>s&&a){let f=i-o,g=n-l,m=h*h+u*u,b=f*f+g*g,_=Math.sqrt(m),v=Math.sqrt(p),y=a*Math.tan((r-Math.acos((m+p-b)/(2*_*v)))/2),w=y/v,x=y/_;Math.abs(w-1)>s&&this._append`L${e+w*c},${t+w*d}`,this._append`A${a},${a},0,0,${+(d*f>c*g)},${this._x1=e+x*h},${this._y1=t+x*u}`}else this._append`L${this._x1=e},${this._y1=t}`}arc(e,t,i,o,l,h){if(e=+e,t=+t,h=!!h,(i=+i)<0)throw new Error(`negative radius: ${i}`);let u=i*Math.cos(o),c=i*Math.sin(o),d=e+u,p=t+c,f=1^h,g=h?o-l:l-o;null===this._x1?this._append`M${d},${p}`:(Math.abs(this._x1-d)>s||Math.abs(this._y1-p)>s)&&this._append`L${d},${p}`,i&&(g<0&&(g=g%n+n),g>a?this._append`A${i},${i},0,1,${f},${e-u},${t-c}A${i},${i},0,1,${f},${this._x1=d},${this._y1=p}`:g>s&&this._append`A${i},${i},0,${+(g>=r)},${f},${this._x1=e+i*Math.cos(l)},${this._y1=t+i*Math.sin(l)}`)}rect(e,t,i,r){this._append`M${this._x0=this._x1=+e},${this._y0=this._y1=+t}h${i=+i}v${+r}h${-i}Z`}toString(){return this._}}function h(){return new l}h.prototype=l.prototype},832:function(e,t,i){\"use strict\";i.d(t,{Z:function(){return O}});var r=i(3141);const n=Math.abs,s=Math.atan2,a=Math.cos,o=Math.max,l=Math.min,h=Math.sin,u=Math.sqrt,c=1e-12,d=Math.PI,p=d/2,f=2*d;function g(e){return e>=1?p:e<=-1?-p:Math.asin(e)}var m=i(5987);function b(e){return e.innerRadius}function _(e){return e.outerRadius}function v(e){return e.startAngle}function y(e){return e.endAngle}function w(e){return e&&e.padAngle}function x(e,t,i,r,n,s,a){var l=e-i,h=t-r,c=(a?s:-s)/u(l*l+h*h),d=c*h,p=-c*l,f=e+d,g=t+p,m=i+d,b=r+p,_=(f+m)/2,v=(g+b)/2,y=m-f,w=b-g,x=y*y+w*w,O=n-s,P=f*b-m*g,D=(w<0?-1:1)*u(o(0,O*O*x-P*P)),k=(P*w-y*D)/x,T=(-P*y-w*D)/x,M=(P*w+y*D)/x,E=(-P*y+w*D)/x,S=k-_,N=T-v,C=M-_,L=E-v;return S*S+N*N>C*C+L*L&&(k=M,T=E),{cx:k,cy:T,x01:-d,y01:-p,x11:k*(n/O-1),y11:T*(n/O-1)}}function O(){var e=b,t=_,i=(0,r.Z)(0),o=null,O=v,P=y,D=w,k=null,T=(0,m.d)(M);function M(){var r,m,b,_=+e.apply(this,arguments),v=+t.apply(this,arguments),y=O.apply(this,arguments)-p,w=P.apply(this,arguments)-p,M=n(w-y),E=w>y;if(k||(k=r=T()),v<_&&(m=v,v=_,_=m),v>c)if(M>f-c)k.moveTo(v*a(y),v*h(y)),k.arc(0,0,v,y,w,!E),_>c&&(k.moveTo(_*a(w),_*h(w)),k.arc(0,0,_,w,y,E));else{var S,N,C=y,L=w,j=y,A=w,R=M,B=M,U=D.apply(this,arguments)/2,F=U>c&&(o?+o.apply(this,arguments):u(_*_+v*v)),I=l(n(v-_)/2,+i.apply(this,arguments)),H=I,z=I;if(F>c){var V=g(F/_*h(U)),G=g(F/v*h(U));(R-=2*V)>c?(j+=V*=E?1:-1,A-=V):(R=0,j=A=(y+w)/2),(B-=2*G)>c?(C+=G*=E?1:-1,L-=G):(B=0,C=L=(y+w)/2)}var Y=v*a(C),W=v*h(C),X=_*a(A),$=_*h(A);if(I>c){var Z,K=v*a(L),q=v*h(L),Q=_*a(j),J=_*h(j);if(M<d)if(Z=function(e,t,i,r,n,s,a,o){var l=i-e,h=r-t,u=a-n,d=o-s,p=d*l-u*h;if(!(p*p<c))return[e+(p=(u*(t-s)-d*(e-n))/p)*l,t+p*h]}(Y,W,Q,J,K,q,X,$)){var ee=Y-Z[0],te=W-Z[1],ie=K-Z[0],re=q-Z[1],ne=1/h(((b=(ee*ie+te*re)/(u(ee*ee+te*te)*u(ie*ie+re*re)))>1?0:b<-1?d:Math.acos(b))/2),se=u(Z[0]*Z[0]+Z[1]*Z[1]);H=l(I,(_-se)/(ne-1)),z=l(I,(v-se)/(ne+1))}else H=z=0}B>c?z>c?(S=x(Q,J,Y,W,v,z,E),N=x(K,q,X,$,v,z,E),k.moveTo(S.cx+S.x01,S.cy+S.y01),z<I?k.arc(S.cx,S.cy,z,s(S.y01,S.x01),s(N.y01,N.x01),!E):(k.arc(S.cx,S.cy,z,s(S.y01,S.x01),s(S.y11,S.x11),!E),k.arc(0,0,v,s(S.cy+S.y11,S.cx+S.x11),s(N.cy+N.y11,N.cx+N.x11),!E),k.arc(N.cx,N.cy,z,s(N.y11,N.x11),s(N.y01,N.x01),!E))):(k.moveTo(Y,W),k.arc(0,0,v,C,L,!E)):k.moveTo(Y,W),_>c&&R>c?H>c?(S=x(X,$,K,q,_,-H,E),N=x(Y,W,Q,J,_,-H,E),k.lineTo(S.cx+S.x01,S.cy+S.y01),H<I?k.arc(S.cx,S.cy,H,s(S.y01,S.x01),s(N.y01,N.x01),!E):(k.arc(S.cx,S.cy,H,s(S.y01,S.x01),s(S.y11,S.x11),!E),k.arc(0,0,_,s(S.cy+S.y11,S.cx+S.x11),s(N.cy+N.y11,N.cx+N.x11),E),k.arc(N.cx,N.cy,H,s(N.y11,N.x11),s(N.y01,N.x01),!E))):k.arc(0,0,_,A,j,E):k.lineTo(X,$)}else k.moveTo(0,0);if(k.closePath(),r)return k=null,r+\"\"||null}return M.centroid=function(){var i=(+e.apply(this,arguments)+ +t.apply(this,arguments))/2,r=(+O.apply(this,arguments)+ +P.apply(this,arguments))/2-d/2;return[a(r)*i,h(r)*i]},M.innerRadius=function(t){return arguments.length?(e=\"function\"==typeof t?t:(0,r.Z)(+t),M):e},M.outerRadius=function(e){return arguments.length?(t=\"function\"==typeof e?e:(0,r.Z)(+e),M):t},M.cornerRadius=function(e){return arguments.length?(i=\"function\"==typeof e?e:(0,r.Z)(+e),M):i},M.padRadius=function(e){return arguments.length?(o=null==e?null:\"function\"==typeof e?e:(0,r.Z)(+e),M):o},M.startAngle=function(e){return arguments.length?(O=\"function\"==typeof e?e:(0,r.Z)(+e),M):O},M.endAngle=function(e){return arguments.length?(P=\"function\"==typeof e?e:(0,r.Z)(+e),M):P},M.padAngle=function(e){return arguments.length?(D=\"function\"==typeof e?e:(0,r.Z)(+e),M):D},M.context=function(e){return arguments.length?(k=null==e?null:e,M):k},M}},3794:function(e,t,i){\"use strict\";i.d(t,{Z:function(){return h}});var r=i(8457),n=i(3141),s=i(964),a=i(774),o=i(5987),l=i(6758);function h(e,t,i){var h=null,u=(0,n.Z)(!0),c=null,d=s.Z,p=null,f=(0,o.d)(g);function g(n){var s,a,o,l,g,m=(n=(0,r.Z)(n)).length,b=!1,_=new Array(m),v=new Array(m);for(null==c&&(p=d(g=f())),s=0;s<=m;++s){if(!(s<m&&u(l=n[s],s,n))===b)if(b=!b)a=s,p.areaStart(),p.lineStart();else{for(p.lineEnd(),p.lineStart(),o=s-1;o>=a;--o)p.point(_[o],v[o]);p.lineEnd(),p.areaEnd()}b&&(_[s]=+e(l,s,n),v[s]=+t(l,s,n),p.point(h?+h(l,s,n):_[s],i?+i(l,s,n):v[s]))}if(g)return p=null,g+\"\"||null}function m(){return(0,a.Z)().defined(u).curve(d).context(c)}return e=\"function\"==typeof e?e:void 0===e?l.x:(0,n.Z)(+e),t=\"function\"==typeof t?t:void 0===t?(0,n.Z)(0):(0,n.Z)(+t),i=\"function\"==typeof i?i:void 0===i?l.y:(0,n.Z)(+i),g.x=function(t){return arguments.length?(e=\"function\"==typeof t?t:(0,n.Z)(+t),h=null,g):e},g.x0=function(t){return arguments.length?(e=\"function\"==typeof t?t:(0,n.Z)(+t),g):e},g.x1=function(e){return arguments.length?(h=null==e?null:\"function\"==typeof e?e:(0,n.Z)(+e),g):h},g.y=function(e){return arguments.length?(t=\"function\"==typeof e?e:(0,n.Z)(+e),i=null,g):t},g.y0=function(e){return arguments.length?(t=\"function\"==typeof e?e:(0,n.Z)(+e),g):t},g.y1=function(e){return arguments.length?(i=null==e?null:\"function\"==typeof e?e:(0,n.Z)(+e),g):i},g.lineX0=g.lineY0=function(){return m().x(e).y(t)},g.lineY1=function(){return m().x(e).y(i)},g.lineX1=function(){return m().x(h).y(t)},g.defined=function(e){return arguments.length?(u=\"function\"==typeof e?e:(0,n.Z)(!!e),g):u},g.curve=function(e){return arguments.length?(d=e,null!=c&&(p=d(c)),g):d},g.context=function(e){return arguments.length?(null==e?c=p=null:p=d(c=e),g):c},g}},8457:function(e,t,i){\"use strict\";function r(e){return\"object\"==typeof e&&\"length\"in e?e:Array.from(e)}i.d(t,{Z:function(){return r}}),Array.prototype.slice},3141:function(e,t,i){\"use strict\";function r(e){return function(){return e}}i.d(t,{Z:function(){return r}})},964:function(e,t,i){\"use strict\";function r(e){this._context=e}function n(e){return new r(e)}i.d(t,{Z:function(){return n}}),r.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(e,t){switch(e=+e,t=+t,this._point){case 0:this._point=1,this._line?this._context.lineTo(e,t):this._context.moveTo(e,t);break;case 1:this._point=2;default:this._context.lineTo(e,t)}}}},774:function(e,t,i){\"use strict\";i.d(t,{Z:function(){return l}});var r=i(8457),n=i(3141),s=i(964),a=i(5987),o=i(6758);function l(e,t){var i=(0,n.Z)(!0),l=null,h=s.Z,u=null,c=(0,a.d)(d);function d(n){var s,a,o,d=(n=(0,r.Z)(n)).length,p=!1;for(null==l&&(u=h(o=c())),s=0;s<=d;++s)!(s<d&&i(a=n[s],s,n))===p&&((p=!p)?u.lineStart():u.lineEnd()),p&&u.point(+e(a,s,n),+t(a,s,n));if(o)return u=null,o+\"\"||null}return e=\"function\"==typeof e?e:void 0===e?o.x:(0,n.Z)(e),t=\"function\"==typeof t?t:void 0===t?o.y:(0,n.Z)(t),d.x=function(t){return arguments.length?(e=\"function\"==typeof t?t:(0,n.Z)(+t),d):e},d.y=function(e){return arguments.length?(t=\"function\"==typeof e?e:(0,n.Z)(+e),d):t},d.defined=function(e){return arguments.length?(i=\"function\"==typeof e?e:(0,n.Z)(!!e),d):i},d.curve=function(e){return arguments.length?(h=e,null!=l&&(u=h(l)),d):h},d.context=function(e){return arguments.length?(null==e?l=u=null:u=h(l=e),d):l},d}},5987:function(e,t,i){\"use strict\";i.d(t,{d:function(){return n}});var r=i(5493);function n(e){let t=3;return e.digits=function(i){if(!arguments.length)return t;if(null==i)t=null;else{const e=Math.floor(i);if(!(e>=0))throw new RangeError(`invalid digits: ${i}`);t=e}return e},()=>new r.y$(t)}},6758:function(e,t,i){\"use strict\";function r(e){return e[0]}function n(e){return e[1]}i.d(t,{x:function(){return r},y:function(){return n}})},7738:function(e,t,i){\"use strict\";i.d(t,{B7:function(){return m},HT:function(){return b},zO:function(){return f}});var r,n,s=0,a=0,o=0,l=1e3,h=0,u=0,c=0,d=\"object\"==typeof performance&&performance.now?performance:Date,p=\"object\"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(e){setTimeout(e,17)};function f(){return u||(p(g),u=d.now()+c)}function g(){u=0}function m(){this._call=this._time=this._next=null}function b(e,t,i){var r=new m;return r.restart(e,t,i),r}function _(){u=(h=d.now())+c,s=a=0;try{!function(){f(),++s;for(var e,t=r;t;)(e=u-t._time)>=0&&t._call.call(void 0,e),t=t._next;--s}()}finally{s=0,function(){for(var e,t,i=r,s=1/0;i;)i._call?(s>i._time&&(s=i._time),e=i,i=i._next):(t=i._next,i._next=null,i=e?e._next=t:r=t);n=e,y(s)}(),u=0}}function v(){var e=d.now(),t=e-h;t>l&&(c-=t,h=e)}function y(e){s||(a&&(a=clearTimeout(a)),e-u>24?(e<1/0&&(a=setTimeout(_,e-d.now()-c)),o&&(o=clearInterval(o))):(o||(h=d.now(),o=setInterval(v,l)),s=1,p(_)))}m.prototype=b.prototype={constructor:m,restart:function(e,t,i){if(\"function\"!=typeof e)throw new TypeError(\"callback is not a function\");i=(null==i?f():+i)+(null==t?0:+t),this._next||n===this||(n?n._next=this:r=this,n=this),this._call=e,this._time=i,y()},stop:function(){this._call&&(this._call=null,this._time=1/0,y())}}},7896:function(e,t,i){\"use strict\";function r(){}function n(e){return null==e?r:function(){return this.querySelector(e)}}function s(){return[]}function a(e){return null==e?s:function(){return this.querySelectorAll(e)}}function o(e){return function(){return this.matches(e)}}function l(e){return function(t){return t.matches(e)}}var h=Array.prototype.find;function u(){return this.firstElementChild}var c=Array.prototype.filter;function d(){return Array.from(this.children)}function p(e){return new Array(e.length)}function f(e,t){this.ownerDocument=e.ownerDocument,this.namespaceURI=e.namespaceURI,this._next=null,this._parent=e,this.__data__=t}function g(e,t,i,r,n,s){for(var a,o=0,l=t.length,h=s.length;o<h;++o)(a=t[o])?(a.__data__=s[o],r[o]=a):i[o]=new f(e,s[o]);for(;o<l;++o)(a=t[o])&&(n[o]=a)}function m(e,t,i,r,n,s,a){var o,l,h,u=new Map,c=t.length,d=s.length,p=new Array(c);for(o=0;o<c;++o)(l=t[o])&&(p[o]=h=a.call(l,l.__data__,o,t)+\"\",u.has(h)?n[o]=l:u.set(h,l));for(o=0;o<d;++o)h=a.call(e,s[o],o,s)+\"\",(l=u.get(h))?(r[o]=l,l.__data__=s[o],u.delete(h)):i[o]=new f(e,s[o]);for(o=0;o<c;++o)(l=t[o])&&u.get(p[o])===l&&(n[o]=l)}function b(e){return e.__data__}function _(e){return\"object\"==typeof e&&\"length\"in e?e:Array.from(e)}function v(e,t){return e<t?-1:e>t?1:e>=t?0:NaN}f.prototype={constructor:f,appendChild:function(e){return this._parent.insertBefore(e,this._next)},insertBefore:function(e,t){return this._parent.insertBefore(e,t)},querySelector:function(e){return this._parent.querySelector(e)},querySelectorAll:function(e){return this._parent.querySelectorAll(e)}};var y=\"http://www.w3.org/1999/xhtml\",w={svg:\"http://www.w3.org/2000/svg\",xhtml:y,xlink:\"http://www.w3.org/1999/xlink\",xml:\"http://www.w3.org/XML/1998/namespace\",xmlns:\"http://www.w3.org/2000/xmlns/\"};function x(e){var t=e+=\"\",i=t.indexOf(\":\");return i>=0&&\"xmlns\"!==(t=e.slice(0,i))&&(e=e.slice(i+1)),w.hasOwnProperty(t)?{space:w[t],local:e}:e}function O(e){return function(){this.removeAttribute(e)}}function P(e){return function(){this.removeAttributeNS(e.space,e.local)}}function D(e,t){return function(){this.setAttribute(e,t)}}function k(e,t){return function(){this.setAttributeNS(e.space,e.local,t)}}function T(e,t){return function(){var i=t.apply(this,arguments);null==i?this.removeAttribute(e):this.setAttribute(e,i)}}function M(e,t){return function(){var i=t.apply(this,arguments);null==i?this.removeAttributeNS(e.space,e.local):this.setAttributeNS(e.space,e.local,i)}}function E(e){return e.ownerDocument&&e.ownerDocument.defaultView||e.document&&e||e.defaultView}function S(e){return function(){this.style.removeProperty(e)}}function N(e,t,i){return function(){this.style.setProperty(e,t,i)}}function C(e,t,i){return function(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(e):this.style.setProperty(e,r,i)}}function L(e,t){return e.style.getPropertyValue(t)||E(e).getComputedStyle(e,null).getPropertyValue(t)}function j(e){return function(){delete this[e]}}function A(e,t){return function(){this[e]=t}}function R(e,t){return function(){var i=t.apply(this,arguments);null==i?delete this[e]:this[e]=i}}function B(e){return e.trim().split(/^|\\s+/)}function U(e){return e.classList||new F(e)}function F(e){this._node=e,this._names=B(e.getAttribute(\"class\")||\"\")}function I(e,t){for(var i=U(e),r=-1,n=t.length;++r<n;)i.add(t[r])}function H(e,t){for(var i=U(e),r=-1,n=t.length;++r<n;)i.remove(t[r])}function z(e){return function(){I(this,e)}}function V(e){return function(){H(this,e)}}function G(e,t){return function(){(t.apply(this,arguments)?I:H)(this,e)}}function Y(){this.textContent=\"\"}function W(e){return function(){this.textContent=e}}function X(e){return function(){var t=e.apply(this,arguments);this.textContent=null==t?\"\":t}}function $(){this.innerHTML=\"\"}function Z(e){return function(){this.innerHTML=e}}function K(e){return function(){var t=e.apply(this,arguments);this.innerHTML=null==t?\"\":t}}function q(){this.nextSibling&&this.parentNode.appendChild(this)}function Q(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function J(e){return function(){var t=this.ownerDocument,i=this.namespaceURI;return i===y&&t.documentElement.namespaceURI===y?t.createElement(e):t.createElementNS(i,e)}}function ee(e){return function(){return this.ownerDocument.createElementNS(e.space,e.local)}}function te(e){var t=x(e);return(t.local?ee:J)(t)}function ie(){return null}function re(){var e=this.parentNode;e&&e.removeChild(this)}function ne(){var e=this.cloneNode(!1),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function se(){var e=this.cloneNode(!0),t=this.parentNode;return t?t.insertBefore(e,this.nextSibling):e}function ae(e){return function(){var t=this.__on;if(t){for(var i,r=0,n=-1,s=t.length;r<s;++r)i=t[r],e.type&&i.type!==e.type||i.name!==e.name?t[++n]=i:this.removeEventListener(i.type,i.listener,i.options);++n?t.length=n:delete this.__on}}}function oe(e,t,i){return function(){var r,n=this.__on,s=function(e){return function(t){e.call(this,t,this.__data__)}}(t);if(n)for(var a=0,o=n.length;a<o;++a)if((r=n[a]).type===e.type&&r.name===e.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=s,r.options=i),void(r.value=t);this.addEventListener(e.type,s,i),r={type:e.type,name:e.name,value:t,listener:s,options:i},n?n.push(r):this.__on=[r]}}function le(e,t,i){var r=E(e),n=r.CustomEvent;\"function\"==typeof n?n=new n(t,i):(n=r.document.createEvent(\"Event\"),i?(n.initEvent(t,i.bubbles,i.cancelable),n.detail=i.detail):n.initEvent(t,!1,!1)),e.dispatchEvent(n)}function he(e,t){return function(){return le(this,e,t)}}function ue(e,t){return function(){return le(this,e,t.apply(this,arguments))}}F.prototype={add:function(e){this._names.indexOf(e)<0&&(this._names.push(e),this._node.setAttribute(\"class\",this._names.join(\" \")))},remove:function(e){var t=this._names.indexOf(e);t>=0&&(this._names.splice(t,1),this._node.setAttribute(\"class\",this._names.join(\" \")))},contains:function(e){return this._names.indexOf(e)>=0}};var ce=[null];function de(e,t){this._groups=e,this._parents=t}function pe(){return new de([[document.documentElement]],ce)}de.prototype=pe.prototype={constructor:de,select:function(e){\"function\"!=typeof e&&(e=n(e));for(var t=this._groups,i=t.length,r=new Array(i),s=0;s<i;++s)for(var a,o,l=t[s],h=l.length,u=r[s]=new Array(h),c=0;c<h;++c)(a=l[c])&&(o=e.call(a,a.__data__,c,l))&&(\"__data__\"in a&&(o.__data__=a.__data__),u[c]=o);return new de(r,this._parents)},selectAll:function(e){e=\"function\"==typeof e?function(e){return function(){return null==(t=e.apply(this,arguments))?[]:Array.isArray(t)?t:Array.from(t);var t}}(e):a(e);for(var t=this._groups,i=t.length,r=[],n=[],s=0;s<i;++s)for(var o,l=t[s],h=l.length,u=0;u<h;++u)(o=l[u])&&(r.push(e.call(o,o.__data__,u,l)),n.push(o));return new de(r,n)},selectChild:function(e){return this.select(null==e?u:function(e){return function(){return h.call(this.children,e)}}(\"function\"==typeof e?e:l(e)))},selectChildren:function(e){return this.selectAll(null==e?d:function(e){return function(){return c.call(this.children,e)}}(\"function\"==typeof e?e:l(e)))},filter:function(e){\"function\"!=typeof e&&(e=o(e));for(var t=this._groups,i=t.length,r=new Array(i),n=0;n<i;++n)for(var s,a=t[n],l=a.length,h=r[n]=[],u=0;u<l;++u)(s=a[u])&&e.call(s,s.__data__,u,a)&&h.push(s);return new de(r,this._parents)},data:function(e,t){if(!arguments.length)return Array.from(this,b);var i,r=t?m:g,n=this._parents,s=this._groups;\"function\"!=typeof e&&(i=e,e=function(){return i});for(var a=s.length,o=new Array(a),l=new Array(a),h=new Array(a),u=0;u<a;++u){var c=n[u],d=s[u],p=d.length,f=_(e.call(c,c&&c.__data__,u,n)),v=f.length,y=l[u]=new Array(v),w=o[u]=new Array(v);r(c,d,y,w,h[u]=new Array(p),f,t);for(var x,O,P=0,D=0;P<v;++P)if(x=y[P]){for(P>=D&&(D=P+1);!(O=w[D])&&++D<v;);x._next=O||null}}return(o=new de(o,n))._enter=l,o._exit=h,o},enter:function(){return new de(this._enter||this._groups.map(p),this._parents)},exit:function(){return new de(this._exit||this._groups.map(p),this._parents)},join:function(e,t,i){var r=this.enter(),n=this,s=this.exit();return\"function\"==typeof e?(r=e(r))&&(r=r.selection()):r=r.append(e+\"\"),null!=t&&(n=t(n))&&(n=n.selection()),null==i?s.remove():i(s),r&&n?r.merge(n).order():n},merge:function(e){for(var t=e.selection?e.selection():e,i=this._groups,r=t._groups,n=i.length,s=r.length,a=Math.min(n,s),o=new Array(n),l=0;l<a;++l)for(var h,u=i[l],c=r[l],d=u.length,p=o[l]=new Array(d),f=0;f<d;++f)(h=u[f]||c[f])&&(p[f]=h);for(;l<n;++l)o[l]=i[l];return new de(o,this._parents)},selection:function(){return this},order:function(){for(var e=this._groups,t=-1,i=e.length;++t<i;)for(var r,n=e[t],s=n.length-1,a=n[s];--s>=0;)(r=n[s])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(e){function t(t,i){return t&&i?e(t.__data__,i.__data__):!t-!i}e||(e=v);for(var i=this._groups,r=i.length,n=new Array(r),s=0;s<r;++s){for(var a,o=i[s],l=o.length,h=n[s]=new Array(l),u=0;u<l;++u)(a=o[u])&&(h[u]=a);h.sort(t)}return new de(n,this._parents).order()},call:function(){var e=arguments[0];return arguments[0]=this,e.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var e=this._groups,t=0,i=e.length;t<i;++t)for(var r=e[t],n=0,s=r.length;n<s;++n){var a=r[n];if(a)return a}return null},size:function(){let e=0;for(const t of this)++e;return e},empty:function(){return!this.node()},each:function(e){for(var t=this._groups,i=0,r=t.length;i<r;++i)for(var n,s=t[i],a=0,o=s.length;a<o;++a)(n=s[a])&&e.call(n,n.__data__,a,s);return this},attr:function(e,t){var i=x(e);if(arguments.length<2){var r=this.node();return i.local?r.getAttributeNS(i.space,i.local):r.getAttribute(i)}return this.each((null==t?i.local?P:O:\"function\"==typeof t?i.local?M:T:i.local?k:D)(i,t))},style:function(e,t,i){return arguments.length>1?this.each((null==t?S:\"function\"==typeof t?C:N)(e,t,null==i?\"\":i)):L(this.node(),e)},property:function(e,t){return arguments.length>1?this.each((null==t?j:\"function\"==typeof t?R:A)(e,t)):this.node()[e]},classed:function(e,t){var i=B(e+\"\");if(arguments.length<2){for(var r=U(this.node()),n=-1,s=i.length;++n<s;)if(!r.contains(i[n]))return!1;return!0}return this.each((\"function\"==typeof t?G:t?z:V)(i,t))},text:function(e){return arguments.length?this.each(null==e?Y:(\"function\"==typeof e?X:W)(e)):this.node().textContent},html:function(e){return arguments.length?this.each(null==e?$:(\"function\"==typeof e?K:Z)(e)):this.node().innerHTML},raise:function(){return this.each(q)},lower:function(){return this.each(Q)},append:function(e){var t=\"function\"==typeof e?e:te(e);return this.select((function(){return this.appendChild(t.apply(this,arguments))}))},insert:function(e,t){var i=\"function\"==typeof e?e:te(e),r=null==t?ie:\"function\"==typeof t?t:n(t);return this.select((function(){return this.insertBefore(i.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(re)},clone:function(e){return this.select(e?se:ne)},datum:function(e){return arguments.length?this.property(\"__data__\",e):this.node().__data__},on:function(e,t,i){var r,n,s=function(e){return e.trim().split(/^|\\s+/).map((function(e){var t=\"\",i=e.indexOf(\".\");return i>=0&&(t=e.slice(i+1),e=e.slice(0,i)),{type:e,name:t}}))}(e+\"\"),a=s.length;if(!(arguments.length<2)){for(o=t?oe:ae,r=0;r<a;++r)this.each(o(s[r],t,i));return this}var o=this.node().__on;if(o)for(var l,h=0,u=o.length;h<u;++h)for(r=0,l=o[h];r<a;++r)if((n=s[r]).type===l.type&&n.name===l.name)return l.value},dispatch:function(e,t){return this.each((\"function\"==typeof t?ue:he)(e,t))},[Symbol.iterator]:function*(){for(var e=this._groups,t=0,i=e.length;t<i;++t)for(var r,n=e[t],s=0,a=n.length;s<a;++s)(r=n[s])&&(yield r)}};var fe=pe,ge=i(4138),me=i(7738);function be(e,t,i){var r=new me.B7;return t=null==t?0:+t,r.restart((i=>{r.stop(),e(i+t)}),t,i),r}var _e=(0,ge.Z)(\"start\",\"end\",\"cancel\",\"interrupt\"),ve=[],ye=0,we=3;function xe(e,t,i,r,n,s){var a=e.__transition;if(a){if(i in a)return}else e.__transition={};!function(e,t,i){var r,n=e.__transition;function s(l){var h,u,c,d;if(1!==i.state)return o();for(h in n)if((d=n[h]).name===i.name){if(d.state===we)return be(s);4===d.state?(d.state=6,d.timer.stop(),d.on.call(\"interrupt\",e,e.__data__,d.index,d.group),delete n[h]):+h<t&&(d.state=6,d.timer.stop(),d.on.call(\"cancel\",e,e.__data__,d.index,d.group),delete n[h])}if(be((function(){i.state===we&&(i.state=4,i.timer.restart(a,i.delay,i.time),a(l))})),i.state=2,i.on.call(\"start\",e,e.__data__,i.index,i.group),2===i.state){for(i.state=we,r=new Array(c=i.tween.length),h=0,u=-1;h<c;++h)(d=i.tween[h].value.call(e,e.__data__,i.index,i.group))&&(r[++u]=d);r.length=u+1}}function a(t){for(var n=t<i.duration?i.ease.call(null,t/i.duration):(i.timer.restart(o),i.state=5,1),s=-1,a=r.length;++s<a;)r[s].call(e,n);5===i.state&&(i.on.call(\"end\",e,e.__data__,i.index,i.group),o())}function o(){for(var r in i.state=6,i.timer.stop(),delete n[t],n)return;delete e.__transition}n[t]=i,i.timer=(0,me.HT)((function(e){i.state=1,i.timer.restart(s,i.delay,i.time),i.delay<=e&&s(e-i.delay)}),0,i.time)}(e,i,{name:t,index:r,group:n,on:_e,tween:ve,time:s.time,delay:s.delay,duration:s.duration,ease:s.ease,timer:null,state:ye})}function Oe(e,t){var i=De(e,t);if(i.state>ye)throw new Error(\"too late; already scheduled\");return i}function Pe(e,t){var i=De(e,t);if(i.state>we)throw new Error(\"too late; already running\");return i}function De(e,t){var i=e.__transition;if(!i||!(i=i[t]))throw new Error(\"transition not found\");return i}function ke(e,t){return e=+e,t=+t,function(i){return e*(1-i)+t*i}}var Te,Me=180/Math.PI,Ee={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Se(e,t,i,r,n,s){var a,o,l;return(a=Math.sqrt(e*e+t*t))&&(e/=a,t/=a),(l=e*i+t*r)&&(i-=e*l,r-=t*l),(o=Math.sqrt(i*i+r*r))&&(i/=o,r/=o,l/=o),e*r<t*i&&(e=-e,t=-t,l=-l,a=-a),{translateX:n,translateY:s,rotate:Math.atan2(t,e)*Me,skewX:Math.atan(l)*Me,scaleX:a,scaleY:o}}function Ne(e,t,i,r){function n(e){return e.length?e.pop()+\" \":\"\"}return function(s,a){var o=[],l=[];return s=e(s),a=e(a),function(e,r,n,s,a,o){if(e!==n||r!==s){var l=a.push(\"translate(\",null,t,null,i);o.push({i:l-4,x:ke(e,n)},{i:l-2,x:ke(r,s)})}else(n||s)&&a.push(\"translate(\"+n+t+s+i)}(s.translateX,s.translateY,a.translateX,a.translateY,o,l),function(e,t,i,s){e!==t?(e-t>180?t+=360:t-e>180&&(e+=360),s.push({i:i.push(n(i)+\"rotate(\",null,r)-2,x:ke(e,t)})):t&&i.push(n(i)+\"rotate(\"+t+r)}(s.rotate,a.rotate,o,l),function(e,t,i,s){e!==t?s.push({i:i.push(n(i)+\"skewX(\",null,r)-2,x:ke(e,t)}):t&&i.push(n(i)+\"skewX(\"+t+r)}(s.skewX,a.skewX,o,l),function(e,t,i,r,s,a){if(e!==i||t!==r){var o=s.push(n(s)+\"scale(\",null,\",\",null,\")\");a.push({i:o-4,x:ke(e,i)},{i:o-2,x:ke(t,r)})}else 1===i&&1===r||s.push(n(s)+\"scale(\"+i+\",\"+r+\")\")}(s.scaleX,s.scaleY,a.scaleX,a.scaleY,o,l),s=a=null,function(e){for(var t,i=-1,r=l.length;++i<r;)o[(t=l[i]).i]=t.x(e);return o.join(\"\")}}}var Ce=Ne((function(e){const t=new(\"function\"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(e+\"\");return t.isIdentity?Ee:Se(t.a,t.b,t.c,t.d,t.e,t.f)}),\"px, \",\"px)\",\"deg)\"),Le=Ne((function(e){return null==e?Ee:(Te||(Te=document.createElementNS(\"http://www.w3.org/2000/svg\",\"g\")),Te.setAttribute(\"transform\",e),(e=Te.transform.baseVal.consolidate())?Se((e=e.matrix).a,e.b,e.c,e.d,e.e,e.f):Ee)}),\", \",\")\",\")\");function je(e,t){var i,r;return function(){var n=Pe(this,e),s=n.tween;if(s!==i)for(var a=0,o=(r=i=s).length;a<o;++a)if(r[a].name===t){(r=r.slice()).splice(a,1);break}n.tween=r}}function Ae(e,t,i){var r,n;if(\"function\"!=typeof i)throw new Error;return function(){var s=Pe(this,e),a=s.tween;if(a!==r){n=(r=a).slice();for(var o={name:t,value:i},l=0,h=n.length;l<h;++l)if(n[l].name===t){n[l]=o;break}l===h&&n.push(o)}s.tween=n}}function Re(e,t,i){var r=e._id;return e.each((function(){var e=Pe(this,r);(e.value||(e.value={}))[t]=i.apply(this,arguments)})),function(e){return De(e,r).value[t]}}function Be(e,t,i){e.prototype=t.prototype=i,i.constructor=e}function Ue(e,t){var i=Object.create(e.prototype);for(var r in t)i[r]=t[r];return i}function Fe(){}var Ie=.7,He=1/Ie,ze=\"\\\\s*([+-]?\\\\d+)\\\\s*\",Ve=\"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",Ge=\"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",Ye=/^#([0-9a-f]{3,8})$/,We=new RegExp(`^rgb\\\\(${ze},${ze},${ze}\\\\)$`),Xe=new RegExp(`^rgb\\\\(${Ge},${Ge},${Ge}\\\\)$`),$e=new RegExp(`^rgba\\\\(${ze},${ze},${ze},${Ve}\\\\)$`),Ze=new RegExp(`^rgba\\\\(${Ge},${Ge},${Ge},${Ve}\\\\)$`),Ke=new RegExp(`^hsl\\\\(${Ve},${Ge},${Ge}\\\\)$`),qe=new RegExp(`^hsla\\\\(${Ve},${Ge},${Ge},${Ve}\\\\)$`),Qe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Je(){return this.rgb().formatHex()}function et(){return this.rgb().formatRgb()}function tt(e){var t,i;return e=(e+\"\").trim().toLowerCase(),(t=Ye.exec(e))?(i=t[1].length,t=parseInt(t[1],16),6===i?it(t):3===i?new st(t>>8&15|t>>4&240,t>>4&15|240&t,(15&t)<<4|15&t,1):8===i?rt(t>>24&255,t>>16&255,t>>8&255,(255&t)/255):4===i?rt(t>>12&15|t>>8&240,t>>8&15|t>>4&240,t>>4&15|240&t,((15&t)<<4|15&t)/255):null):(t=We.exec(e))?new st(t[1],t[2],t[3],1):(t=Xe.exec(e))?new st(255*t[1]/100,255*t[2]/100,255*t[3]/100,1):(t=$e.exec(e))?rt(t[1],t[2],t[3],t[4]):(t=Ze.exec(e))?rt(255*t[1]/100,255*t[2]/100,255*t[3]/100,t[4]):(t=Ke.exec(e))?ct(t[1],t[2]/100,t[3]/100,1):(t=qe.exec(e))?ct(t[1],t[2]/100,t[3]/100,t[4]):Qe.hasOwnProperty(e)?it(Qe[e]):\"transparent\"===e?new st(NaN,NaN,NaN,0):null}function it(e){return new st(e>>16&255,e>>8&255,255&e,1)}function rt(e,t,i,r){return r<=0&&(e=t=i=NaN),new st(e,t,i,r)}function nt(e,t,i,r){return 1===arguments.length?((n=e)instanceof Fe||(n=tt(n)),n?new st((n=n.rgb()).r,n.g,n.b,n.opacity):new st):new st(e,t,i,null==r?1:r);var n}function st(e,t,i,r){this.r=+e,this.g=+t,this.b=+i,this.opacity=+r}function at(){return`#${ut(this.r)}${ut(this.g)}${ut(this.b)}`}function ot(){const e=lt(this.opacity);return`${1===e?\"rgb(\":\"rgba(\"}${ht(this.r)}, ${ht(this.g)}, ${ht(this.b)}${1===e?\")\":`, ${e})`}`}function lt(e){return isNaN(e)?1:Math.max(0,Math.min(1,e))}function ht(e){return Math.max(0,Math.min(255,Math.round(e)||0))}function ut(e){return((e=ht(e))<16?\"0\":\"\")+e.toString(16)}function ct(e,t,i,r){return r<=0?e=t=i=NaN:i<=0||i>=1?e=t=NaN:t<=0&&(e=NaN),new pt(e,t,i,r)}function dt(e){if(e instanceof pt)return new pt(e.h,e.s,e.l,e.opacity);if(e instanceof Fe||(e=tt(e)),!e)return new pt;if(e instanceof pt)return e;var t=(e=e.rgb()).r/255,i=e.g/255,r=e.b/255,n=Math.min(t,i,r),s=Math.max(t,i,r),a=NaN,o=s-n,l=(s+n)/2;return o?(a=t===s?(i-r)/o+6*(i<r):i===s?(r-t)/o+2:(t-i)/o+4,o/=l<.5?s+n:2-s-n,a*=60):o=l>0&&l<1?0:a,new pt(a,o,l,e.opacity)}function pt(e,t,i,r){this.h=+e,this.s=+t,this.l=+i,this.opacity=+r}function ft(e){return(e=(e||0)%360)<0?e+360:e}function gt(e){return Math.max(0,Math.min(1,e||0))}function mt(e,t,i){return 255*(e<60?t+(i-t)*e/60:e<180?i:e<240?t+(i-t)*(240-e)/60:t)}function bt(e,t,i,r,n){var s=e*e,a=s*e;return((1-3*e+3*s-a)*t+(4-6*s+3*a)*i+(1+3*e+3*s-3*a)*r+a*n)/6}Be(Fe,tt,{copy(e){return Object.assign(new this.constructor,this,e)},displayable(){return this.rgb().displayable()},hex:Je,formatHex:Je,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return dt(this).formatHsl()},formatRgb:et,toString:et}),Be(st,nt,Ue(Fe,{brighter(e){return e=null==e?He:Math.pow(He,e),new st(this.r*e,this.g*e,this.b*e,this.opacity)},darker(e){return e=null==e?Ie:Math.pow(Ie,e),new st(this.r*e,this.g*e,this.b*e,this.opacity)},rgb(){return this},clamp(){return new st(ht(this.r),ht(this.g),ht(this.b),lt(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:at,formatHex:at,formatHex8:function(){return`#${ut(this.r)}${ut(this.g)}${ut(this.b)}${ut(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:ot,toString:ot})),Be(pt,(function(e,t,i,r){return 1===arguments.length?dt(e):new pt(e,t,i,null==r?1:r)}),Ue(Fe,{brighter(e){return e=null==e?He:Math.pow(He,e),new pt(this.h,this.s,this.l*e,this.opacity)},darker(e){return e=null==e?Ie:Math.pow(Ie,e),new pt(this.h,this.s,this.l*e,this.opacity)},rgb(){var e=this.h%360+360*(this.h<0),t=isNaN(e)||isNaN(this.s)?0:this.s,i=this.l,r=i+(i<.5?i:1-i)*t,n=2*i-r;return new st(mt(e>=240?e-240:e+120,n,r),mt(e,n,r),mt(e<120?e+240:e-120,n,r),this.opacity)},clamp(){return new pt(ft(this.h),gt(this.s),gt(this.l),lt(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const e=lt(this.opacity);return`${1===e?\"hsl(\":\"hsla(\"}${ft(this.h)}, ${100*gt(this.s)}%, ${100*gt(this.l)}%${1===e?\")\":`, ${e})`}`}}));var _t=e=>()=>e;function vt(e,t){var i=t-e;return i?function(e,t){return function(i){return e+i*t}}(e,i):_t(isNaN(e)?t:e)}var yt=function e(t){var i=function(e){return 1==(e=+e)?vt:function(t,i){return i-t?function(e,t,i){return e=Math.pow(e,i),t=Math.pow(t,i)-e,i=1/i,function(r){return Math.pow(e+r*t,i)}}(t,i,e):_t(isNaN(t)?i:t)}}(t);function r(e,t){var r=i((e=nt(e)).r,(t=nt(t)).r),n=i(e.g,t.g),s=i(e.b,t.b),a=vt(e.opacity,t.opacity);return function(t){return e.r=r(t),e.g=n(t),e.b=s(t),e.opacity=a(t),e+\"\"}}return r.gamma=e,r}(1);function wt(e){return function(t){var i,r,n=t.length,s=new Array(n),a=new Array(n),o=new Array(n);for(i=0;i<n;++i)r=nt(t[i]),s[i]=r.r||0,a[i]=r.g||0,o[i]=r.b||0;return s=e(s),a=e(a),o=e(o),r.opacity=1,function(e){return r.r=s(e),r.g=a(e),r.b=o(e),r+\"\"}}}wt((function(e){var t=e.length-1;return function(i){var r=i<=0?i=0:i>=1?(i=1,t-1):Math.floor(i*t),n=e[r],s=e[r+1],a=r>0?e[r-1]:2*n-s,o=r<t-1?e[r+2]:2*s-n;return bt((i-r/t)*t,a,n,s,o)}})),wt((function(e){var t=e.length;return function(i){var r=Math.floor(((i%=1)<0?++i:i)*t),n=e[(r+t-1)%t],s=e[r%t],a=e[(r+1)%t],o=e[(r+2)%t];return bt((i-r/t)*t,n,s,a,o)}}));var xt=/[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,Ot=new RegExp(xt.source,\"g\");function Pt(e,t){var i,r,n,s=xt.lastIndex=Ot.lastIndex=0,a=-1,o=[],l=[];for(e+=\"\",t+=\"\";(i=xt.exec(e))&&(r=Ot.exec(t));)(n=r.index)>s&&(n=t.slice(s,n),o[a]?o[a]+=n:o[++a]=n),(i=i[0])===(r=r[0])?o[a]?o[a]+=r:o[++a]=r:(o[++a]=null,l.push({i:a,x:ke(i,r)})),s=Ot.lastIndex;return s<t.length&&(n=t.slice(s),o[a]?o[a]+=n:o[++a]=n),o.length<2?l[0]?function(e){return function(t){return e(t)+\"\"}}(l[0].x):function(e){return function(){return e}}(t):(t=l.length,function(e){for(var i,r=0;r<t;++r)o[(i=l[r]).i]=i.x(e);return o.join(\"\")})}function Dt(e,t){var i;return(\"number\"==typeof t?ke:t instanceof tt?yt:(i=tt(t))?(t=i,yt):Pt)(e,t)}function kt(e){return function(){this.removeAttribute(e)}}function Tt(e){return function(){this.removeAttributeNS(e.space,e.local)}}function Mt(e,t,i){var r,n,s=i+\"\";return function(){var a=this.getAttribute(e);return a===s?null:a===r?n:n=t(r=a,i)}}function Et(e,t,i){var r,n,s=i+\"\";return function(){var a=this.getAttributeNS(e.space,e.local);return a===s?null:a===r?n:n=t(r=a,i)}}function St(e,t,i){var r,n,s;return function(){var a,o,l=i(this);if(null!=l)return(a=this.getAttribute(e))===(o=l+\"\")?null:a===r&&o===n?s:(n=o,s=t(r=a,l));this.removeAttribute(e)}}function Nt(e,t,i){var r,n,s;return function(){var a,o,l=i(this);if(null!=l)return(a=this.getAttributeNS(e.space,e.local))===(o=l+\"\")?null:a===r&&o===n?s:(n=o,s=t(r=a,l));this.removeAttributeNS(e.space,e.local)}}function Ct(e,t){var i,r;function n(){var n=t.apply(this,arguments);return n!==r&&(i=(r=n)&&function(e,t){return function(i){this.setAttributeNS(e.space,e.local,t.call(this,i))}}(e,n)),i}return n._value=t,n}function Lt(e,t){var i,r;function n(){var n=t.apply(this,arguments);return n!==r&&(i=(r=n)&&function(e,t){return function(i){this.setAttribute(e,t.call(this,i))}}(e,n)),i}return n._value=t,n}function jt(e,t){return function(){Oe(this,e).delay=+t.apply(this,arguments)}}function At(e,t){return t=+t,function(){Oe(this,e).delay=t}}function Rt(e,t){return function(){Pe(this,e).duration=+t.apply(this,arguments)}}function Bt(e,t){return t=+t,function(){Pe(this,e).duration=t}}var Ut=fe.prototype.constructor;function Ft(e){return function(){this.style.removeProperty(e)}}var It=0;function Ht(e,t,i,r){this._groups=e,this._parents=t,this._name=i,this._id=r}function zt(){return++It}var Vt=fe.prototype;Ht.prototype=function(e){return fe().transition(e)}.prototype={constructor:Ht,select:function(e){var t=this._name,i=this._id;\"function\"!=typeof e&&(e=n(e));for(var r=this._groups,s=r.length,a=new Array(s),o=0;o<s;++o)for(var l,h,u=r[o],c=u.length,d=a[o]=new Array(c),p=0;p<c;++p)(l=u[p])&&(h=e.call(l,l.__data__,p,u))&&(\"__data__\"in l&&(h.__data__=l.__data__),d[p]=h,xe(d[p],t,i,p,d,De(l,i)));return new Ht(a,this._parents,t,i)},selectAll:function(e){var t=this._name,i=this._id;\"function\"!=typeof e&&(e=a(e));for(var r=this._groups,n=r.length,s=[],o=[],l=0;l<n;++l)for(var h,u=r[l],c=u.length,d=0;d<c;++d)if(h=u[d]){for(var p,f=e.call(h,h.__data__,d,u),g=De(h,i),m=0,b=f.length;m<b;++m)(p=f[m])&&xe(p,t,i,m,f,g);s.push(f),o.push(h)}return new Ht(s,o,t,i)},selectChild:Vt.selectChild,selectChildren:Vt.selectChildren,filter:function(e){\"function\"!=typeof e&&(e=o(e));for(var t=this._groups,i=t.length,r=new Array(i),n=0;n<i;++n)for(var s,a=t[n],l=a.length,h=r[n]=[],u=0;u<l;++u)(s=a[u])&&e.call(s,s.__data__,u,a)&&h.push(s);return new Ht(r,this._parents,this._name,this._id)},merge:function(e){if(e._id!==this._id)throw new Error;for(var t=this._groups,i=e._groups,r=t.length,n=i.length,s=Math.min(r,n),a=new Array(r),o=0;o<s;++o)for(var l,h=t[o],u=i[o],c=h.length,d=a[o]=new Array(c),p=0;p<c;++p)(l=h[p]||u[p])&&(d[p]=l);for(;o<r;++o)a[o]=t[o];return new Ht(a,this._parents,this._name,this._id)},selection:function(){return new Ut(this._groups,this._parents)},transition:function(){for(var e=this._name,t=this._id,i=zt(),r=this._groups,n=r.length,s=0;s<n;++s)for(var a,o=r[s],l=o.length,h=0;h<l;++h)if(a=o[h]){var u=De(a,t);xe(a,e,i,h,o,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new Ht(r,this._parents,e,i)},call:Vt.call,nodes:Vt.nodes,node:Vt.node,size:Vt.size,empty:Vt.empty,each:Vt.each,on:function(e,t){var i=this._id;return arguments.length<2?De(this.node(),i).on.on(e):this.each(function(e,t,i){var r,n,s=function(e){return(e+\"\").trim().split(/^|\\s+/).every((function(e){var t=e.indexOf(\".\");return t>=0&&(e=e.slice(0,t)),!e||\"start\"===e}))}(t)?Oe:Pe;return function(){var a=s(this,e),o=a.on;o!==r&&(n=(r=o).copy()).on(t,i),a.on=n}}(i,e,t))},attr:function(e,t){var i=x(e),r=\"transform\"===i?Le:Dt;return this.attrTween(e,\"function\"==typeof t?(i.local?Nt:St)(i,r,Re(this,\"attr.\"+e,t)):null==t?(i.local?Tt:kt)(i):(i.local?Et:Mt)(i,r,t))},attrTween:function(e,t){var i=\"attr.\"+e;if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==t)return this.tween(i,null);if(\"function\"!=typeof t)throw new Error;var r=x(e);return this.tween(i,(r.local?Ct:Lt)(r,t))},style:function(e,t,i){var r=\"transform\"==(e+=\"\")?Ce:Dt;return null==t?this.styleTween(e,function(e,t){var i,r,n;return function(){var s=L(this,e),a=(this.style.removeProperty(e),L(this,e));return s===a?null:s===i&&a===r?n:n=t(i=s,r=a)}}(e,r)).on(\"end.style.\"+e,Ft(e)):\"function\"==typeof t?this.styleTween(e,function(e,t,i){var r,n,s;return function(){var a=L(this,e),o=i(this),l=o+\"\";return null==o&&(this.style.removeProperty(e),l=o=L(this,e)),a===l?null:a===r&&l===n?s:(n=l,s=t(r=a,o))}}(e,r,Re(this,\"style.\"+e,t))).each(function(e,t){var i,r,n,s,a=\"style.\"+t,o=\"end.\"+a;return function(){var l=Pe(this,e),h=l.on,u=null==l.value[a]?s||(s=Ft(t)):void 0;h===i&&n===u||(r=(i=h).copy()).on(o,n=u),l.on=r}}(this._id,e)):this.styleTween(e,function(e,t,i){var r,n,s=i+\"\";return function(){var a=L(this,e);return a===s?null:a===r?n:n=t(r=a,i)}}(e,r,t),i).on(\"end.style.\"+e,null)},styleTween:function(e,t,i){var r=\"style.\"+(e+=\"\");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==t)return this.tween(r,null);if(\"function\"!=typeof t)throw new Error;return this.tween(r,function(e,t,i){var r,n;function s(){var s=t.apply(this,arguments);return s!==n&&(r=(n=s)&&function(e,t,i){return function(r){this.style.setProperty(e,t.call(this,r),i)}}(e,s,i)),r}return s._value=t,s}(e,t,null==i?\"\":i))},text:function(e){return this.tween(\"text\",\"function\"==typeof e?function(e){return function(){var t=e(this);this.textContent=null==t?\"\":t}}(Re(this,\"text\",e)):function(e){return function(){this.textContent=e}}(null==e?\"\":e+\"\"))},textTween:function(e){var t=\"text\";if(arguments.length<1)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if(\"function\"!=typeof e)throw new Error;return this.tween(t,function(e){var t,i;function r(){var r=e.apply(this,arguments);return r!==i&&(t=(i=r)&&function(e){return function(t){this.textContent=e.call(this,t)}}(r)),t}return r._value=e,r}(e))},remove:function(){return this.on(\"end.remove\",function(e){return function(){var t=this.parentNode;for(var i in this.__transition)if(+i!==e)return;t&&t.removeChild(this)}}(this._id))},tween:function(e,t){var i=this._id;if(e+=\"\",arguments.length<2){for(var r,n=De(this.node(),i).tween,s=0,a=n.length;s<a;++s)if((r=n[s]).name===e)return r.value;return null}return this.each((null==t?je:Ae)(i,e,t))},delay:function(e){var t=this._id;return arguments.length?this.each((\"function\"==typeof e?jt:At)(t,e)):De(this.node(),t).delay},duration:function(e){var t=this._id;return arguments.length?this.each((\"function\"==typeof e?Rt:Bt)(t,e)):De(this.node(),t).duration},ease:function(e){var t=this._id;return arguments.length?this.each(function(e,t){if(\"function\"!=typeof t)throw new Error;return function(){Pe(this,e).ease=t}}(t,e)):De(this.node(),t).ease},easeVarying:function(e){if(\"function\"!=typeof e)throw new Error;return this.each(function(e,t){return function(){var i=t.apply(this,arguments);if(\"function\"!=typeof i)throw new Error;Pe(this,e).ease=i}}(this._id,e))},end:function(){var e,t,i=this,r=i._id,n=i.size();return new Promise((function(s,a){var o={value:a},l={value:function(){0==--n&&s()}};i.each((function(){var i=Pe(this,r),n=i.on;n!==e&&((t=(e=n).copy())._.cancel.push(o),t._.interrupt.push(o),t._.end.push(l)),i.on=t})),0===n&&s()}))},[Symbol.iterator]:Vt[Symbol.iterator]};var Gt={time:null,delay:0,duration:250,ease:function(e){return((e*=2)<=1?e*e*e:(e-=2)*e*e+2)/2}};function Yt(e,t){for(var i;!(i=e.__transition)||!(i=i[t]);)if(!(e=e.parentNode))throw new Error(`transition ${t} not found`);return i}fe.prototype.interrupt=function(e){return this.each((function(){!function(e,t){var i,r,n,s=e.__transition,a=!0;if(s){for(n in t=null==t?null:t+\"\",s)(i=s[n]).name===t?(r=i.state>2&&i.state<5,i.state=6,i.timer.stop(),i.on.call(r?\"interrupt\":\"cancel\",e,e.__data__,i.index,i.group),delete s[n]):a=!1;a&&delete e.__transition}}(this,e)}))},fe.prototype.transition=function(e){var t,i;e instanceof Ht?(t=e._id,e=e._name):(t=zt(),(i=Gt).time=(0,me.zO)(),e=null==e?null:e+\"\");for(var r=this._groups,n=r.length,s=0;s<n;++s)for(var a,o=r[s],l=o.length,h=0;h<l;++h)(a=o[h])&&xe(a,e,t,h,o,i||Yt(a,t));return new Ht(r,this._parents,e,t)}},7582:function(e,t,i){\"use strict\";function r(e,t,i,r){return new(i||(i=Promise))((function(n,s){function a(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}l((r=r.apply(e,t||[])).next())}))}i.d(t,{mG:function(){return r}}),Object.create,Object.create,\"function\"==typeof SuppressedError&&SuppressedError}},a={};function o(e){var t=a[e];if(void 0!==t)return t.exports;var i=a[e]={id:e,loaded:!1,exports:{}};return s[e].call(i.exports,i,i.exports,o),i.loaded=!0,i.exports}o.m=s,o.amdD=function(){throw new Error(\"define cannot be used indirect\")},o.amdO={},e=[],o.O=function(t,i,r,n){if(!i){var s=1/0;for(u=0;u<e.length;u++){i=e[u][0],r=e[u][1],n=e[u][2];for(var a=!0,l=0;l<i.length;l++)(!1&n||s>=n)&&Object.keys(o.O).every((function(e){return o.O[e](i[l])}))?i.splice(l--,1):(a=!1,n<s&&(s=n));if(a){e.splice(u--,1);var h=r();void 0!==h&&(t=h)}}return t}n=n||0;for(var u=e.length;u>0&&e[u-1][2]>n;u--)e[u]=e[u-1];e[u]=[i,r,n]},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},i=Object.getPrototypeOf?function(e){return Object.getPrototypeOf(e)}:function(e){return e.__proto__},o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if(\"object\"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&\"function\"==typeof e.then)return e}var n=Object.create(null);o.r(n);var s={};t=t||[null,i({}),i([]),i(i)];for(var a=2&r&&e;\"object\"==typeof a&&!~t.indexOf(a);a=i(a))Object.getOwnPropertyNames(a).forEach((function(t){s[t]=function(){return e[t]}}));return s.default=function(){return e},o.d(n,s),n},o.d=function(e,t){for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.f={},o.e=function(e){return Promise.all(Object.keys(o.f).reduce((function(t,i){return o.f[i](e,t),t}),[]))},o.u=function(e){return\"deps/\"+{643:\"pdfmake\",4297:\"xlsx\",4384:\"markerjs2\"}[e]+\".js\"},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r={},n=\"@amcharts/amcharts5:\",o.l=function(e,t,i,s){if(r[e])r[e].push(t);else{var a,l;if(void 0!==i)for(var h=document.getElementsByTagName(\"script\"),u=0;u<h.length;u++){var c=h[u];if(c.getAttribute(\"src\")==e||c.getAttribute(\"data-webpack\")==n+i){a=c;break}}a||(l=!0,(a=document.createElement(\"script\")).charset=\"utf-8\",a.timeout=120,o.nc&&a.setAttribute(\"nonce\",o.nc),a.setAttribute(\"data-webpack\",n+i),a.src=e),r[e]=[t];var d=function(t,i){a.onerror=a.onload=null,clearTimeout(p);var n=r[e];if(delete r[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((function(e){return e(i)})),t)return t(i)},p=setTimeout(d.bind(null,void 0,{type:\"timeout\",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),l&&document.head.appendChild(a)}},o.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},o.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e},o.p=\"\",function(){var e={4826:0};o.f.j=function(t,i){var r=o.o(e,t)?e[t]:void 0;if(0!==r)if(r)i.push(r[2]);else{var n=new Promise((function(i,n){r=e[t]=[i,n]}));i.push(r[2]=n);var s=o.p+o.u(t),a=new Error;o.l(s,(function(i){if(o.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var n=i&&(\"load\"===i.type?\"missing\":i.type),s=i&&i.target&&i.target.src;a.message=\"Loading chunk \"+t+\" failed.\\n(\"+n+\": \"+s+\")\",a.name=\"ChunkLoadError\",a.type=n,a.request=s,r[1](a)}}),\"chunk-\"+t,t)}},o.O.j=function(t){return 0===e[t]};var t=function(t,i){var r,n,s=i[0],a=i[1],l=i[2],h=0;if(s.some((function(t){return 0!==e[t]}))){for(r in a)o.o(a,r)&&(o.m[r]=a[r]);if(l)var u=l(o)}for(t&&t(i);h<s.length;h++)n=s[h],o.o(e,n)&&e[n]&&e[n][0](),e[n]=0;return o.O(u)},i=self.webpackChunk_am5=self.webpackChunk_am5||[];i.forEach(t.bind(null,0)),i.push=t.bind(null,i.push.bind(i))}();var l=o(8494);l=o.O(l);var h=window;for(var u in l)h[u]=l[u];l.__esModule&&Object.defineProperty(h,\"__esModule\",{value:!0})}();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 2,
        "severity_counts": {
          "critical": 1,
          "low": 1
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\map.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          },
          {
            "type": "jquery_usage",
            "line": 1,
            "content": "\"use strict\";(self.webpackChunk_am5=self.webpackChunk_am5||[]).push([[6842],{7533:function(t,e,n){n.r(e),n.d(e,{ClusteredPointSeries:function(){return Bi},DefaultTheme:function(){return ae},GraticuleSeries:function(){return rt},MapChart:function(){return Ci},MapLine:function(){return q},MapLineSeries:function(){return et},MapPointSeries:function(){return Ni},MapPolygon:function(){return Ti},MapPolygonSeries:function(){return Li},MapSeries:function(){return s},ZoomControl:function(){return Ai},geoAlbersUsa:function(){return Hi},geoEqualEarth:function(){return no},geoEquirectangular:function(){return Vi},geoMercator:function(){return re},geoNaturalEarth1:function(){return oo},geoOrthographic:function(){return Wi},getGeoArea:function(){return xi},getGeoBounds:function(){return Di},getGeoCentroid:function(){return Pi},getGeoCircle:function(){return wi},getGeoRectangle:function(){return Si},normalizeGeoPoint:function(){return Ii}});var i=n(3399),o=n(5071),r=n(256);class s extends i.F{constructor(){super(...arguments),Object.defineProperty(this,\"_types\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_geometries\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_geoJSONparsed\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_excluded\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_notIncluded\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}_afterNew(){this.fields.push(\"geometry\",\"geometryType\"),this._setRawDefault(\"geometryField\",\"geometry\"),this._setRawDefault(\"geometryTypeField\",\"geometryType\"),this._setRawDefault(\"idField\",\"id\"),this.on(\"geoJSON\",(t=>{let e=this._prevSettings.geoJSON;e&&e!=t&&this.data.clear()})),super._afterNew()}_handleDirties(){const t=this.get(\"geoJSON\");let e=this._prevSettings.geoJSON;e&&e!=t&&(this._prevSettings.geoJSON=void 0,this._geoJSONparsed=!1),this._geoJSONparsed||(this._parseGeoJSON(),this._geoJSONparsed=!0)}_prepareChildren(){if(super._prepareChildren(),this._valuesDirty&&this._handleDirties(),this.isDirty(\"geoJSON\")||this.isDirty(\"include\")||this.isDirty(\"exclude\")){this._handleDirties();const t=this.chart,e=this.get(\"exclude\");e&&(t&&(t._centerLocation=null),o.each(e,(t=>{const e=this.getDataItemById(t);e&&this._excludeDataItem(e)}))),e&&0!=e.length||(o.each(this._excluded,(t=>{this._unexcludeDataItem(t)})),this._excluded=[]);const n=this.get(\"include\");n&&(t&&(t._centerLocation=null),o.each(this.dataItems,(t=>{const e=t.get(\"id\");e&&-1==n.indexOf(e)?this._notIncludeDataItem(t):this._unNotIncludeDataItem(t)}))),n||(o.each(this._notIncluded,(t=>{this._unNotIncludeDataItem(t)})),this._notIncluded=[])}}_excludeDataItem(t){this._removeGeometry(t.get(\"geometry\")),o.move(this._excluded,t)}_unexcludeDataItem(t){this._addGeometry(t.get(\"geometry\"),this)}_notIncludeDataItem(t){this._removeGeometry(t.get(\"geometry\")),o.move(this._notIncluded,t)}_unNotIncludeDataItem(t){this._addGeometry(t.get(\"geometry\"),this)}checkInclude(t,e,n){if(e){if(0==e.length)return!1;if(-1==e.indexOf(t))return!1}return!(n&&n.length>0&&-1!=n.indexOf(t))}_parseGeoJSON(){const t=this.get(\"geoJSON\");if(t){let e;\"FeatureCollection\"==t.type?e=t.features:\"Feature\"==t.type?e=[t]:-1!=[\"Point\",\"LineString\",\"Polygon\",\"MultiPoint\",\"MultiLineString\",\"MultiPolygon\"].indexOf(t.type)?e=[{geometry:t}]:console.log(\"nothing found in geoJSON\");const n=this.get(\"geodataNames\");if(e){const t=this.get(\"idField\",\"id\");for(let i=0,s=e.length;i<s;i++){let s=e[i],a=s.geometry;if(a){let e=a.type,i=s[t];if(n&&n[i]&&(s.properties.name=n[i]),-1!=this._types.indexOf(e)){let n,l;null!=i&&(n=o.find(this.dataItems,(t=>t.get(\"id\")==i))),n&&(l=n.dataContext),n?l.geometry||(l.geometry=a,l.geometryType=e,n.set(\"geometry\",a),n.set(\"geometryType\",e),this.processDataItem(n)):(l={geometry:a,geometryType:e,madeFromGeoData:!0},l[t]=i,this.data.push(l)),r.softCopyProperties(s.properties,l)}}}}const i=\"geodataprocessed\";this.events.isEnabled(i)&&this.events.dispatch(i,{type:i,target:this})}}_placeBulletsContainer(t){this.children.moveValue(this.bulletsContainer)}_removeBulletsContainer(){}projection(){const t=this.chart;if(t)return t.get(\"projection\")}geoPath(){const t=this.chart;if(t)return t.getPrivate(\"geoPath\")}_addGeometry(t,e){if(t&&e.get(\"affectsBounds\",!0)){this._geometries.push(t);const e=this.chart;e&&e.markDirtyGeometries()}}_removeGeometry(t){if(t){o.remove(this._geometries,t);const e=this.chart;e&&e.markDirtyGeometries()}}_dispose(){super._dispose();const t=this.chart;t&&t.series.removeValue(this)}_onDataClear(){super._onDataClear(),this._geoJSONparsed=!1,this._markDirtyKey(\"exclude\")}}Object.defineProperty(s,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapSeries\"}),Object.defineProperty(s,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:i.F.classNames.concat([s.className])});var a=n(5040),l=n(6245),u=n(1479);class c{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const e=this._partials;let n=0;for(let i=0;i<this._n&&i<32;i++){const o=e[i],r=t+o,s=Math.abs(t)<Math.abs(o)?t-(r-o):o-(r-t);s&&(e[n++]=s),t=r}return e[n]=t,this._n=n+1,this}valueOf(){const t=this._partials;let e,n,i,o=this._n,r=0;if(o>0){for(r=t[--o];o>0&&(e=r,n=t[--o],r=e+n,i=n-(r-e),!i););o>0&&(i<0&&t[o-1]<0||i>0&&t[o-1]>0)&&(n=2*i,e=r+n,n==e-r&&(r=e))}return r}}var h=1e-6,p=1e-12,f=Math.PI,d=f/2,g=f/4,m=2*f,y=180/f,v=f/180,_=Math.abs,b=Math.atan,w=Math.atan2,P=Math.cos,x=Math.ceil,D=Math.exp,S=(Math.floor,Math.hypot),I=Math.log,M=(Math.pow,Math.sin),j=Math.sign||function(t){return t>0?1:t<0?-1:0},C=Math.sqrt,N=Math.tan;function E(t){return t>1?d:t<-1?-d:Math.asin(t)}function O(t){return(t=M(t/2))*t}function T(){}function L(t,e){t&&Y.hasOwnProperty(t.type)&&Y[t.type](t,e)}var k,R,z,G,B={Feature:function(t,e){L(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,i=-1,o=n.length;++i<o;)L(n[i].geometry,e)}},Y={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,i=-1,o=n.length;++i<o;)t=n[i],e.point(t[0],t[1],t[2])},LineString:function(t,e){X(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,i=-1,o=n.length;++i<o;)X(n[i],e,0)},Polygon:function(t,e){A(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,i=-1,o=n.length;++i<o;)A(n[i],e)},GeometryCollection:function(t,e){for(var n=t.geometries,i=-1,o=n.length;++i<o;)L(n[i],e)}};function X(t,e,n){var i,o=-1,r=t.length-n;for(e.lineStart();++o<r;)i=t[o],e.point(i[0],i[1],i[2]);e.lineEnd()}function A(t,e){var n=-1,i=t.length;for(e.polygonStart();++n<i;)X(t[n],e,1);e.polygonEnd()}function Z(t,e){t&&B.hasOwnProperty(t.type)?B[t.type](t,e):L(t,e)}var W={sphere:T,point:T,lineStart:function(){W.point=V,W.lineEnd=F},lineEnd:T,polygonStart:T,polygonEnd:T};function F(){W.point=W.lineEnd=T}function V(t,e){R=t*=v,z=M(e*=v),G=P(e),W.point=J}function J(t,e){t*=v;var n=M(e*=v),i=P(e),o=_(t-R),r=P(o),s=i*M(o),a=G*n-z*i*r,l=z*n+G*i*r;k.add(w(C(s*s+a*a),l)),R=t,z=n,G=i}function $(t){return k=new c,Z(t,W),+k}var H=[null,null],Q={type:\"LineString\",coordinates:H};function U(t,e){return H[0]=t,H[1]=e,$(Q)}class q extends u.T{constructor(){super(...arguments),Object.defineProperty(this,\"_projectionDirty\",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_beforeChanged(){if(super._beforeChanged(),this._projectionDirty||this.isDirty(\"geometry\")||this.isDirty(\"precision\")){const t=this.get(\"geometry\");if(t){const e=this.getPrivate(\"series\");if(e){const n=e.chart;if(n){const i=n.get(\"projection\");let o=null;i&&i.clipAngle&&(o=i.clipAngle(),i.precision(this.get(\"precision\",.5)));const r=this.dataItem,s=n.getPrivate(\"geoPath\");if(s&&r)if(this._clear=!0,\"straight\"==r.get(\"lineType\",e.get(\"lineType\"))){const t=this.get(\"geometry\");if(t){let e=t.coordinates;if(e){let i;\"LineString\"==t.type?i=[e]:\"MultiLineString\"==t.type&&(i=e),this.set(\"draw\",(t=>{for(let e=0;e<i.length;e++){let o=i[e];if(o.length>0){const e=o[0],i=n.convert({longitude:e[0],latitude:e[1]});t.lineTo(i.x,i.y);for(let e=0;e<o.length;e++){const i=o[e],r=n.convert({longitude:i[0],latitude:i[1]});t.lineTo(r.x,r.y)}}}}))}}}else this.set(\"draw\",(n=>{i&&!1===e.get(\"clipBack\")&&i.clipAngle(180),s.context(this._display),s(t),s.context(null),i&&i.clipAngle&&i.clipAngle(o)}))}}}const e=\"linechanged\";this.events.isEnabled(e)&&this.events.dispatch(e,{type:e,target:this})}}markDirtyProjection(){this.markDirty(),this._projectionDirty=!0}_clearDirty(){super._clearDirty(),this._projectionDirty=!1}_getTooltipPoint(){let t=this.get(\"tooltipX\"),e=this.get(\"tooltipY\"),n=0,i=0;if(a.isNumber(t)&&(n=t),a.isNumber(e)&&(i=e),t instanceof l.gG){const e=this.positionToGeoPoint(t.value),o=this.getPrivate(\"series\");if(o){const t=o.chart;if(t){const o=t.convert(e);n=o.x,i=o.y}}}return{x:n,y:i}}positionToGeoPoint(t){const e=this.get(\"geometry\"),n=this.getPrivate(\"series\"),i=n.chart,o=this.dataItem;if(e&&n&&i&&o){const r=o.get(\"lineType\",n.get(\"lineType\"));let s,a,l,u=$(e),c=0,h=0,p=0,f=e.coordinates;if(f){let n;\"LineString\"==e.type?n=[f]:\"MultiLineString\"==e.type&&(n=f);for(let e=0;e<n.length;e++){let i=n[e];if(i.length>1){for(let o=1;o<i.length;o++)if(a=i[o-1],l=i[o],h=c/u,s=U(a,l),c+=s,p=c/u,h<=t&&p>t){e=n.length;break}}else 1==i.length&&(a=i[0],l=i[0],h=0,p=1)}if(a&&l){let e,n=(t-h)/(p-h);if(\"straight\"==r){let t=i.convert({longitude:a[0],latitude:a[1]}),e=i.convert({longitude:l[0],latitude:l[1]}),o=t.x+(e.x-t.x)*n,r=t.y+(e.y-t.y)*n;return i.invert({x:o,y:r})}return e=function(t,e){var n=t[0]*v,i=t[1]*v,o=e[0]*v,r=e[1]*v,s=P(i),a=M(i),l=P(r),u=M(r),c=s*P(n),h=s*M(n),p=l*P(o),f=l*M(o),d=2*E(C(O(r-i)+s*l*O(o-n))),g=M(d),m=d?function(t){var e=M(t*=d)/g,n=M(d-t)/g,i=n*c+e*p,o=n*h+e*f,r=n*a+e*u;return[w(o,i)*y,w(r,C(i*i+o*o))*y]}:function(){return[n*y,i*y]};return m.distance=d,m}(a,l)(n),{longitude:e[0],latitude:e[1]}}}}return{longitude:0,latitude:0}}}Object.defineProperty(q,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapLine\"}),Object.defineProperty(q,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:u.T.classNames.concat([q.className])});var K=n(7144),tt=n(5769);class et extends s{constructor(){super(...arguments),Object.defineProperty(this,\"mapLines\",{enumerable:!0,configurable:!0,writable:!0,value:new K.o(tt.YS.new({}),(()=>q._new(this._root,{},[this.mapLines.template])))}),Object.defineProperty(this,\"_types\",{enumerable:!0,configurable:!0,writable:!0,value:[\"LineString\",\"MultiLineString\"]})}_afterNew(){this.fields.push(\"lineType\"),this._setRawDefault(\"lineTypeField\",\"lineType\"),super._afterNew()}makeMapLine(t){const e=this.children.push(this.mapLines.make());return e._setDataItem(t),this.mapLines.push(e),e}markDirtyProjection(){o.each(this.dataItems,(t=>{let e=t.get(\"mapLine\");e&&e.markDirtyProjection()}))}_prepareChildren(){super._prepareChildren(),this.isDirty(\"stroke\")&&this.mapLines.template.set(\"stroke\",this.get(\"stroke\"))}processDataItem(t){super.processDataItem(t);let e=t.get(\"mapLine\");e||(e=this.makeMapLine(t)),this._handlePointsToConnect(t),t.on(\"pointsToConnect\",(()=>{this._handlePointsToConnect(t)})),t.set(\"mapLine\",e),this._addGeometry(t.get(\"geometry\"),this),e.setPrivate(\"series\",this)}_handlePointsToConnect(t){const e=t.get(\"pointsToConnect\");e&&(o.each(e,(e=>{e.on(\"geometry\",(()=>{this.markDirtyValues(t)})),e.on(\"longitude\",(()=>{this.markDirtyValues(t)})),e.on(\"latitude\",(()=>{this.markDirtyValues(t)}))})),this.markDirtyValues(t))}markDirtyValues(t){if(super.markDirtyValues(),t){const e=t.get(\"mapLine\");if(e){const n=t.get(\"pointsToConnect\");if(n){let i=[];o.each(n,(t=>{const e=t.get(\"longitude\"),n=t.get(\"latitude\");if(null!=e&&null!=n)i.push([e,n]);else{const e=t.get(\"geometry\");if(e){const t=e.coordinates;t&&i.push([t[0],t[1]])}}}));let r={type:\"LineString\",coordinates:i};t.setRaw(\"geometry\",r),e.set(\"geometry\",r)}else e.set(\"geometry\",t.get(\"geometry\"))}}}disposeDataItem(t){super.disposeDataItem(t);const e=t.get(\"mapLine\");e&&(this.mapLines.removeValue(e),e.dispose())}_excludeDataItem(t){super._excludeDataItem(t);const e=t.get(\"mapLine\");e&&e.setPrivate(\"visible\",!1)}_unexcludeDataItem(t){super._unexcludeDataItem(t);const e=t.get(\"mapLine\");e&&e.setPrivate(\"visible\",!0)}_notIncludeDataItem(t){super._notIncludeDataItem(t);const e=t.get(\"mapLine\");e&&e.setPrivate(\"visible\",!1)}_unNotIncludeDataItem(t){super._unNotIncludeDataItem(t);const e=t.get(\"mapLine\");e&&e.setPrivate(\"visible\",!0)}}function nt(t,e,n){t=+t,e=+e,n=(o=arguments.length)<2?(e=t,t=0,1):o<3?1:+n;for(var i=-1,o=0|Math.max(0,Math.ceil((e-t)/n)),r=new Array(o);++i<o;)r[i]=t+i*n;return r}function it(t,e,n){var i=nt(t,e-h,n).concat(e);return function(t){return i.map((function(e){return[t,e]}))}}function ot(t,e,n){var i=nt(t,e-h,n).concat(e);return function(t){return i.map((function(e){return[e,t]}))}}Object.defineProperty(et,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapLineSeries\"}),Object.defineProperty(et,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:s.classNames.concat([et.className])});class rt extends et{constructor(){super(...arguments),Object.defineProperty(this,\"_dataItem\",{enumerable:!0,configurable:!0,writable:!0,value:this.makeDataItem({})})}_afterNew(){super._afterNew(),this.dataItems.push(this._dataItem),this._generate()}_updateChildren(){if(super._updateChildren(),this.isDirty(\"step\")&&this._generate(),this.isDirty(\"clipExtent\")&&this.get(\"clipExtent\")){const t=this.chart;t&&t.events.on(\"geoboundschanged\",(()=>{this._generate()})),this._generate()}}_generate(){let t=function(){var t,e,n,i,o,r,s,a,l,u,c,p,f=10,d=f,g=90,m=360,y=2.5;function v(){return{type:\"MultiLineString\",coordinates:b()}}function b(){return nt(x(i/g)*g,n,g).map(c).concat(nt(x(a/m)*m,s,m).map(p)).concat(nt(x(e/f)*f,t,f).filter((function(t){return _(t%g)>h})).map(l)).concat(nt(x(r/d)*d,o,d).filter((function(t){return _(t%m)>h})).map(u))}return v.lines=function(){return b().map((function(t){return{type:\"LineString\",coordinates:t}}))},v.outline=function(){return{type:\"Polygon\",coordinates:[c(i).concat(p(s).slice(1),c(n).reverse().slice(1),p(a).reverse().slice(1))]}},v.extent=function(t){return arguments.length?v.extentMajor(t).extentMinor(t):v.extentMinor()},v.extentMajor=function(t){return arguments.length?(i=+t[0][0],n=+t[1][0],a=+t[0][1],s=+t[1][1],i>n&&(t=i,i=n,n=t),a>s&&(t=a,a=s,s=t),v.precision(y)):[[i,a],[n,s]]},v.extentMinor=function(n){return arguments.length?(e=+n[0][0],t=+n[1][0],r=+n[0][1],o=+n[1][1],e>t&&(n=e,e=t,t=n),r>o&&(n=r,r=o,o=n),v.precision(y)):[[e,r],[t,o]]},v.step=function(t){return arguments.length?v.stepMajor(t).stepMinor(t):v.stepMinor()},v.stepMajor=function(t){return arguments.length?(g=+t[0],m=+t[1],v):[g,m]},v.stepMinor=function(t){return arguments.length?(f=+t[0],d=+t[1],v):[f,d]},v.precision=function(h){return arguments.length?(y=+h,l=it(r,o,90),u=ot(e,t,y),c=it(a,s,90),p=ot(i,n,y),v):y},v.extentMajor([[-180,-90+h],[180,90-h]]).extentMinor([[-180,-80-h],[180,80+h]])}();if(t){if(this.get(\"clipExtent\")){const e=this.chart;if(e){const n=e.geoBounds();n&&t.extent([[n.left,n.bottom],[n.right,n.top]])}}const e=this.get(\"step\",10);t.stepMinor([360,360]),t.stepMajor([e,e]),this._dataItem.set(\"geometry\",t())}}}Object.defineProperty(rt,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"GraticuleSeries\"}),Object.defineProperty(rt,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:et.classNames.concat([rt.className])});var st=n(3409),at=n(3783);function lt(t,e){function n(n,i){return n=t(n,i),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,i){return(n=e.invert(n,i))&&t.invert(n[0],n[1])}),n}function ut(t,e){return _(t)>f&&(t-=Math.round(t/m)*m),[t,e]}function ct(t,e,n){return(t%=m)?e||n?lt(pt(t),ft(e,n)):pt(t):e||n?ft(e,n):ut}function ht(t){return function(e,n){return _(e+=t)>f&&(e-=Math.round(e/m)*m),[e,n]}}function pt(t){var e=ht(t);return e.invert=ht(-t),e}function ft(t,e){var n=P(t),i=M(t),o=P(e),r=M(e);function s(t,e){var s=P(e),a=P(t)*s,l=M(t)*s,u=M(e),c=u*n+a*i;return[w(l*o-c*r,a*n-u*i),E(c*o+l*r)]}return s.invert=function(t,e){var s=P(e),a=P(t)*s,l=M(t)*s,u=M(e),c=u*o-l*r;return[w(l*o+u*r,a*n+c*i),E(c*n-a*i)]},s}function dt(){var t,e=[];return{point:function(e,n,i){t.push([e,n,i])},lineStart:function(){e.push(t=[])},lineEnd:T,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function gt(t,e){return _(t[0]-e[0])<h&&_(t[1]-e[1])<h}function mt(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}function yt(t,e,n,i,o){var r,s,a=[],l=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,i=t[0],s=t[e];if(gt(i,s)){if(!i[2]&&!s[2]){for(o.lineStart(),r=0;r<e;++r)o.point((i=t[r])[0],i[1]);return void o.lineEnd()}s[0]+=2*h}a.push(n=new mt(i,t,null,!0)),l.push(n.o=new mt(i,null,n,!1)),a.push(n=new mt(s,t,null,!1)),l.push(n.o=new mt(s,null,n,!0))}})),a.length){for(l.sort(e),vt(a),vt(l),r=0,s=l.length;r<s;++r)l[r].e=n=!n;for(var u,c,p=a[0];;){for(var f=p,d=!0;f.v;)if((f=f.n)===p)return;u=f.z,o.lineStart();do{if(f.v=f.o.v=!0,f.e){if(d)for(r=0,s=u.length;r<s;++r)o.point((c=u[r])[0],c[1]);else i(f.x,f.n.x,1,o);f=f.n}else{if(d)for(u=f.p.z,r=u.length-1;r>=0;--r)o.point((c=u[r])[0],c[1]);else i(f.x,f.p.x,-1,o);f=f.p}u=(f=f.o).z,d=!d}while(!f.v);o.lineEnd()}}}function vt(t){if(e=t.length){for(var e,n,i=0,o=t[0];++i<e;)o.n=n=t[i],n.p=o,o=n;o.n=n=t[0],n.p=o}}function _t(t){return[w(t[1],t[0]),E(t[2])]}function bt(t){var e=t[0],n=t[1],i=P(n);return[i*P(e),i*M(e),M(n)]}function wt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Pt(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function xt(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function Dt(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function St(t){var e=C(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function It(t){return _(t[0])<=f?t[0]:j(t[0])*((_(t[0])+f)%m-f)}function Mt(t){return Array.from(function*(t){for(const e of t)yield*e}(t))}function jt(t,e,n,i){return function(o){var r,s,a,l=e(o),u=dt(),y=e(u),v=!1,_={point:b,lineStart:D,lineEnd:S,polygonStart:function(){_.point=I,_.lineStart=j,_.lineEnd=C,s=[],r=[]},polygonEnd:function(){_.point=b,_.lineStart=D,_.lineEnd=S,s=Mt(s);var t=function(t,e){var n=It(e),i=e[1],o=M(i),r=[M(n),-P(n),0],s=0,a=0,l=new c;1===o?i=d+h:-1===o&&(i=-d-h);for(var u=0,y=t.length;u<y;++u)if(_=(v=t[u]).length)for(var v,_,b=v[_-1],x=It(b),D=b[1]/2+g,S=M(D),I=P(D),j=0;j<_;++j,x=N,S=T,I=L,b=C){var C=v[j],N=It(C),O=C[1]/2+g,T=M(O),L=P(O),k=N-x,R=k>=0?1:-1,z=R*k,G=z>f,B=S*T;if(l.add(w(B*R*M(z),I*L+B*P(z))),s+=G?k+R*m:k,G^x>=n^N>=n){var Y=Pt(bt(b),bt(C));St(Y);var X=Pt(r,Y);St(X);var A=(G^k>=0?-1:1)*E(X[2]);(i>A||i===A&&(Y[0]||Y[1]))&&(a+=G^k>=0?1:-1)}}return(s<-h||s<h&&l<-p)^1&a}(r,i);s.length?(v||(o.polygonStart(),v=!0),yt(s,Nt,t,n,o)):t&&(v||(o.polygonStart(),v=!0),o.lineStart(),n(null,null,1,o),o.lineEnd()),v&&(o.polygonEnd(),v=!1),s=r=null},sphere:function(){o.polygonStart(),o.lineStart(),n(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function b(e,n){t(e,n)&&o.point(e,n)}function x(t,e){l.point(t,e)}function D(){_.point=x,l.lineStart()}function S(){_.point=b,l.lineEnd()}function I(t,e){a.push([t,e]),y.point(t,e)}function j(){y.lineStart(),a=[]}function C(){I(a[0][0],a[0][1]),y.lineEnd();var t,e,n,i,l=y.clean(),c=u.result(),h=c.length;if(a.pop(),r.push(a),a=null,h)if(1&l){if((e=(n=c[0]).length-1)>0){for(v||(o.polygonStart(),v=!0),o.lineStart(),t=0;t<e;++t)o.point((i=n[t])[0],i[1]);o.lineEnd()}}else h>1&&2&l&&c.push(c.pop().concat(c.shift())),s.push(c.filter(Ct))}return _}}function Ct(t){return t.length>1}function Nt(t,e){return((t=t.x)[0]<0?t[1]-d-h:d-t[1])-((e=e.x)[0]<0?e[1]-d-h:d-e[1])}ut.invert=ut;var Et=jt((function(){return!0}),(function(t){var e,n=NaN,i=NaN,o=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(r,s){var a=r>0?f:-f,l=_(r-n);_(l-f)<h?(t.point(n,i=(i+s)/2>0?d:-d),t.point(o,i),t.lineEnd(),t.lineStart(),t.point(a,i),t.point(r,i),e=0):o!==a&&l>=f&&(_(n-o)<h&&(n-=o*h),_(r-a)<h&&(r-=a*h),i=function(t,e,n,i){var o,r,s=M(t-n);return _(s)>h?b((M(e)*(r=P(i))*M(n)-M(i)*(o=P(e))*M(t))/(o*r*s)):(e+i)/2}(n,i,r,s),t.point(o,i),t.lineEnd(),t.lineStart(),t.point(a,i),e=0),t.point(n=r,i=s),o=a},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}}),(function(t,e,n,i){var o;if(null==t)o=n*d,i.point(-f,o),i.point(0,o),i.point(f,o),i.point(f,0),i.point(f,-o),i.point(0,-o),i.point(-f,-o),i.point(-f,0),i.point(-f,o);else if(_(t[0]-e[0])>h){var r=t[0]<e[0]?f:-f;o=n*r/2,i.point(-r,o),i.point(0,o),i.point(r,o)}else i.point(e[0],e[1])}),[-f,-d]);function Ot(t){return function(){return t}}function Tt(t,e,n,i,o,r){if(n){var s=P(e),a=M(e),l=i*n;null==o?(o=e+i*m,r=e-l/2):(o=Lt(s,o),r=Lt(s,r),(i>0?o<r:o>r)&&(o+=i*m));for(var u,c=o;i>0?c>r:c<r;c-=l)u=_t([s,-a*P(c),-a*M(c)]),t.point(u[0],u[1])}}function Lt(t,e){(e=bt(e))[0]-=t,St(e);var n,i=(n=-e[1])>1?0:n<-1?f:Math.acos(n);return((-e[2]<0?-i:i)+m-h)%m}var kt=1e9,Rt=-kt;var zt=t=>t;function Gt(t){return function(e){var n=new Bt;for(var i in t)n[i]=t[i];return n.stream=e,n}}function Bt(){}Bt.prototype={constructor:Bt,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Yt=1/0,Xt=Yt,At=-Yt,Zt=At,Wt={point:function(t,e){t<Yt&&(Yt=t),t>At&&(At=t),e<Xt&&(Xt=e),e>Zt&&(Zt=e)},lineStart:T,lineEnd:T,polygonStart:T,polygonEnd:T,result:function(){var t=[[Yt,Xt],[At,Zt]];return At=Zt=-(Xt=Yt=1/0),t}},Ft=Wt;function Vt(t,e,n){var i=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=i&&t.clipExtent(null),Z(n,t.stream(Ft)),e(Ft.result()),null!=i&&t.clipExtent(i),t}function Jt(t,e,n){return Vt(t,(function(n){var i=e[1][0]-e[0][0],o=e[1][1]-e[0][1],r=Math.min(i/(n[1][0]-n[0][0]),o/(n[1][1]-n[0][1])),s=+e[0][0]+(i-r*(n[1][0]+n[0][0]))/2,a=+e[0][1]+(o-r*(n[1][1]+n[0][1]))/2;t.scale(150*r).translate([s,a])}),n)}function $t(t,e,n){return Jt(t,[[0,0],e],n)}function Ht(t,e,n){return Vt(t,(function(n){var i=+e,o=i/(n[1][0]-n[0][0]),r=(i-o*(n[1][0]+n[0][0]))/2,s=-o*n[0][1];t.scale(150*o).translate([r,s])}),n)}function Qt(t,e,n){return Vt(t,(function(n){var i=+e,o=i/(n[1][1]-n[0][1]),r=-o*n[0][0],s=(i-o*(n[1][1]+n[0][1]))/2;t.scale(150*o).translate([r,s])}),n)}var Ut=16,qt=P(30*v);function Kt(t,e){return+e?function(t,e){function n(i,o,r,s,a,l,u,c,p,f,d,g,m,y){var v=u-i,b=c-o,P=v*v+b*b;if(P>4*e&&m--){var x=s+f,D=a+d,S=l+g,I=C(x*x+D*D+S*S),M=E(S/=I),j=_(_(S)-1)<h||_(r-p)<h?(r+p)/2:w(D,x),N=t(j,M),O=N[0],T=N[1],L=O-i,k=T-o,R=b*L-v*k;(R*R/P>e||_((v*L+b*k)/P-.5)>.3||s*f+a*d+l*g<qt)&&(n(i,o,r,s,a,l,O,T,j,x/=I,D/=I,S,m,y),y.point(O,T),n(O,T,j,x,D,S,u,c,p,f,d,g,m,y))}}return function(e){var i,o,r,s,a,l,u,c,h,p,f,d,g={point:m,lineStart:y,lineEnd:_,polygonStart:function(){e.polygonStart(),g.lineStart=b},polygonEnd:function(){e.polygonEnd(),g.lineStart=y}};function m(n,i){n=t(n,i),e.point(n[0],n[1])}function y(){c=NaN,g.point=v,e.lineStart()}function v(i,o){var r=bt([i,o]),s=t(i,o);n(c,h,u,p,f,d,c=s[0],h=s[1],u=i,p=r[0],f=r[1],d=r[2],Ut,e),e.point(c,h)}function _(){g.point=m,e.lineEnd()}function b(){y(),g.point=w,g.lineEnd=P}function w(t,e){v(i=t,e),o=c,r=h,s=p,a=f,l=d,g.point=v}function P(){n(c,h,u,p,f,d,o,r,i,s,a,l,Ut,e),g.lineEnd=_,_()}return g}}(t,e):function(t){return Gt({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)}var te=Gt({point:function(t,e){this.stream.point(t*v,e*v)}});function ee(t,e,n,i,o,r){if(!r)return function(t,e,n,i,o){function r(r,s){return[e+t*(r*=i),n-t*(s*=o)]}return r.invert=function(r,s){return[(r-e)/t*i,(n-s)/t*o]},r}(t,e,n,i,o);var s=P(r),a=M(r),l=s*t,u=a*t,c=s/t,h=a/t,p=(a*n-s*e)/t,f=(a*e+s*n)/t;function d(t,r){return[l*(t*=i)-u*(r*=o)+e,n-u*t-l*r]}return d.invert=function(t,e){return[i*(c*t-h*e+p),o*(f-h*t-c*e)]},d}function ne(t){return ie((function(){return t}))()}function ie(t){var e,n,i,o,r,s,a,l,u,c,p=150,d=480,g=250,m=0,b=0,w=0,x=0,D=0,S=0,I=1,M=1,j=null,N=Et,E=null,O=zt,T=.5;function L(t){return l(t[0]*v,t[1]*v)}function k(t){return(t=l.invert(t[0],t[1]))&&[t[0]*y,t[1]*y]}function R(){var t=ee(p,0,0,I,M,S).apply(null,e(m,b)),i=ee(p,d-t[0],g-t[1],I,M,S);return n=ct(w,x,D),a=lt(e,i),l=lt(n,a),s=Kt(a,T),z()}function z(){return u=c=null,L}return L.stream=function(t){return u&&c===t?u:u=te(function(t){return Gt({point:function(e,n){var i=t(e,n);return this.stream.point(i[0],i[1])}})}(n)(N(s(O(c=t)))))},L.preclip=function(t){return arguments.length?(N=t,j=void 0,z()):N},L.postclip=function(t){return arguments.length?(O=t,E=i=o=r=null,z()):O},L.clipAngle=function(t){return arguments.length?(N=+t?function(t){var e=P(t),n=6*v,i=e>0,o=_(e)>h;function r(t,n){return P(t)*P(n)>e}function s(t,n,i){var o=[1,0,0],r=Pt(bt(t),bt(n)),s=wt(r,r),a=r[0],l=s-a*a;if(!l)return!i&&t;var u=e*s/l,c=-e*a/l,p=Pt(o,r),d=Dt(o,u);xt(d,Dt(r,c));var g=p,m=wt(d,g),y=wt(g,g),v=m*m-y*(wt(d,d)-1);if(!(v<0)){var b=C(v),w=Dt(g,(-m-b)/y);if(xt(w,d),w=_t(w),!i)return w;var P,x=t[0],D=n[0],S=t[1],I=n[1];D<x&&(P=x,x=D,D=P);var M=D-x,j=_(M-f)<h;if(!j&&I<S&&(P=S,S=I,I=P),j||M<h?j?S+I>0^w[1]<(_(w[0]-x)<h?S:I):S<=w[1]&&w[1]<=I:M>f^(x<=w[0]&&w[0]<=D)){var N=Dt(g,(-m+b)/y);return xt(N,d),[w,_t(N)]}}}function a(e,n){var o=i?t:f-t,r=0;return e<-o?r|=1:e>o&&(r|=2),n<-o?r|=4:n>o&&(r|=8),r}return jt(r,(function(t){var e,n,l,u,c;return{lineStart:function(){u=l=!1,c=1},point:function(h,p){var d,g=[h,p],m=r(h,p),y=i?m?0:a(h,p):m?a(h+(h<0?f:-f),p):0;if(!e&&(u=l=m)&&t.lineStart(),m!==l&&(!(d=s(e,g))||gt(e,d)||gt(g,d))&&(g[2]=1),m!==l)c=0,m?(t.lineStart(),d=s(g,e),t.point(d[0],d[1])):(d=s(e,g),t.point(d[0],d[1],2),t.lineEnd()),e=d;else if(o&&e&&i^m){var v;y&n||!(v=s(g,e,!0))||(c=0,i?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1],3)))}!m||e&&gt(e,g)||t.point(g[0],g[1]),e=g,l=m,n=y},lineEnd:function(){l&&t.lineEnd(),e=null},clean:function(){return c|(u&&l)<<1}}}),(function(e,i,o,r){Tt(r,t,n,o,e,i)}),i?[0,-t]:[-f,t-f])}(j=t*v):(j=null,Et),z()):j*y},L.clipExtent=function(t){return arguments.length?(O=null==t?(E=i=o=r=null,zt):function(t,e,n,i){function o(o,r){return t<=o&&o<=n&&e<=r&&r<=i}function r(o,r,a,u){var c=0,h=0;if(null==o||(c=s(o,a))!==(h=s(r,a))||l(o,r)<0^a>0)do{u.point(0===c||3===c?t:n,c>1?i:e)}while((c=(c+a+4)%4)!==h);else u.point(r[0],r[1])}function s(i,o){return _(i[0]-t)<h?o>0?0:3:_(i[0]-n)<h?o>0?2:1:_(i[1]-e)<h?o>0?1:0:o>0?3:2}function a(t,e){return l(t.x,e.x)}function l(t,e){var n=s(t,1),i=s(e,1);return n!==i?n-i:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(s){var l,u,c,h,p,f,d,g,m,y,v,_=s,b=dt(),w={point:P,lineStart:function(){w.point=x,u&&u.push(c=[]),y=!0,m=!1,d=g=NaN},lineEnd:function(){l&&(x(h,p),f&&m&&b.rejoin(),l.push(b.result())),w.point=P,m&&_.lineEnd()},polygonStart:function(){_=b,l=[],u=[],v=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,o=u.length;n<o;++n)for(var r,s,a=u[n],l=1,c=a.length,h=a[0],p=h[0],f=h[1];l<c;++l)r=p,s=f,p=(h=a[l])[0],f=h[1],s<=i?f>i&&(p-r)*(i-s)>(f-s)*(t-r)&&++e:f<=i&&(p-r)*(i-s)<(f-s)*(t-r)&&--e;return e}(),n=v&&e,o=(l=Mt(l)).length;(n||o)&&(s.polygonStart(),n&&(s.lineStart(),r(null,null,1,s),s.lineEnd()),o&&yt(l,a,e,r,s),s.polygonEnd()),_=s,l=u=c=null}};function P(t,e){o(t,e)&&_.point(t,e)}function x(r,s){var a=o(r,s);if(u&&c.push([r,s]),y)h=r,p=s,f=a,y=!1,a&&(_.lineStart(),_.point(r,s));else if(a&&m)_.point(r,s);else{var l=[d=Math.max(Rt,Math.min(kt,d)),g=Math.max(Rt,Math.min(kt,g))],b=[r=Math.max(Rt,Math.min(kt,r)),s=Math.max(Rt,Math.min(kt,s))];!function(t,e,n,i,o,r){var s,a=t[0],l=t[1],u=0,c=1,h=e[0]-a,p=e[1]-l;if(s=n-a,h||!(s>0)){if(s/=h,h<0){if(s<u)return;s<c&&(c=s)}else if(h>0){if(s>c)return;s>u&&(u=s)}if(s=o-a,h||!(s<0)){if(s/=h,h<0){if(s>c)return;s>u&&(u=s)}else if(h>0){if(s<u)return;s<c&&(c=s)}if(s=i-l,p||!(s>0)){if(s/=p,p<0){if(s<u)return;s<c&&(c=s)}else if(p>0){if(s>c)return;s>u&&(u=s)}if(s=r-l,p||!(s<0)){if(s/=p,p<0){if(s>c)return;s>u&&(u=s)}else if(p>0){if(s<u)return;s<c&&(c=s)}return u>0&&(t[0]=a+u*h,t[1]=l+u*p),c<1&&(e[0]=a+c*h,e[1]=l+c*p),!0}}}}}(l,b,t,e,n,i)?a&&(_.lineStart(),_.point(r,s),v=!1):(m||(_.lineStart(),_.point(l[0],l[1])),_.point(b[0],b[1]),a||_.lineEnd(),v=!1)}d=r,g=s,m=a}return w}}(E=+t[0][0],i=+t[0][1],o=+t[1][0],r=+t[1][1]),z()):null==E?null:[[E,i],[o,r]]},L.scale=function(t){return arguments.length?(p=+t,R()):p},L.translate=function(t){return arguments.length?(d=+t[0],g=+t[1],R()):[d,g]},L.center=function(t){return arguments.length?(m=t[0]%360*v,b=t[1]%360*v,R()):[m*y,b*y]},L.rotate=function(t){return arguments.length?(w=t[0]%360*v,x=t[1]%360*v,D=t.length>2?t[2]%360*v:0,R()):[w*y,x*y,D*y]},L.angle=function(t){return arguments.length?(S=t%360*v,R()):S*y},L.reflectX=function(t){return arguments.length?(I=t?-1:1,R()):I<0},L.reflectY=function(t){return arguments.length?(M=t?-1:1,R()):M<0},L.precision=function(t){return arguments.length?(s=Kt(a,T=t*t),z()):C(T)},L.fitExtent=function(t,e){return Jt(L,t,e)},L.fitSize=function(t,e){return $t(L,t,e)},L.fitWidth=function(t,e){return Ht(L,t,e)},L.fitHeight=function(t,e){return Qt(L,t,e)},function(){return e=t.apply(this,arguments),L.invert=e.invert&&k,R()}}function oe(t,e){return[t,I(N((d+e)/2))]}function re(){return function(t){var e,n,i,o=ne(t),r=o.center,s=o.scale,a=o.translate,l=o.clipExtent,u=null;function c(){var r=f*s(),a=o(function(t){function e(e){return(e=t(e[0]*v,e[1]*v))[0]*=y,e[1]*=y,e}return t=ct(t[0]*v,t[1]*v,t.length>2?t[2]*v:0),e.invert=function(e){return(e=t.invert(e[0]*v,e[1]*v))[0]*=y,e[1]*=y,e},e}(o.rotate()).invert([0,0]));return l(null==u?[[a[0]-r,a[1]-r],[a[0]+r,a[1]+r]]:t===oe?[[Math.max(a[0]-r,u),e],[Math.min(a[0]+r,n),i]]:[[u,Math.max(a[1]-r,e)],[n,Math.min(a[1]+r,i)]])}return o.scale=function(t){return arguments.length?(s(t),c()):s()},o.translate=function(t){return arguments.length?(a(t),c()):a()},o.center=function(t){return arguments.length?(r(t),c()):r()},o.clipExtent=function(t){return arguments.length?(null==t?u=e=n=i=null:(u=+t[0][0],e=+t[0][1],n=+t[1][0],i=+t[1][1]),c()):null==u?null:[[u,e],[n,i]]},c()}(oe).scale(961/m)}oe.invert=function(t,e){return[t,2*b(D(e))-d]};var se=n(9395);class ae extends st.Q{setupDefaultRules(){super.setupDefaultRules();const t=this._root.interfaceColors,e=this.rule.bind(this);e(\"MapChart\").setAll({projection:re(),panX:\"translateX\",panY:\"translateY\",pinchZoom:!0,zoomStep:2,zoomLevel:1,rotationX:0,rotationY:0,rotationZ:0,maxZoomLevel:32,minZoomLevel:1,wheelY:\"zoom\",wheelX:\"none\",animationEasing:se.out(se.cubic),wheelEasing:se.out(se.cubic),wheelDuration:0,wheelSensitivity:1,maxPanOut:.4,centerMapOnZoomOut:!0});{const n=e(\"MapLine\");n.setAll({precision:.5,role:\"figure\"}),(0,at.v)(n,\"stroke\",t,\"grid\")}e(\"MapPolygonSeries\").setAll({affectsBounds:!0}),e(\"MapPointSeries\").setAll({affectsBounds:!1,clipFront:!1,clipBack:!0,autoScale:!1}),e(\"ClusteredPointSeries\").setAll({minDistance:20,scatterDistance:3,scatterRadius:8,stopClusterZoom:.95}),e(\"MapLineSeries\").setAll({affectsBounds:!1});{const n=e(\"MapPolygon\");n.setAll({precision:.5,isMeasured:!1,role:\"figure\",fillOpacity:1,position:\"absolute\",strokeWidth:.2,strokeOpacity:1}),(0,at.v)(n,\"fill\",t,\"primaryButton\"),(0,at.v)(n,\"stroke\",t,\"background\")}e(\"Button\",[\"zoomcontrol\"]).setAll({marginTop:1,marginBottom:1}),e(\"Graphics\",[\"map\",\"button\",\"plus\",\"icon\"]).setAll({x:l.CI,y:l.CI,draw:t=>{t.moveTo(-4,0),t.lineTo(4,0),t.moveTo(0,-4),t.lineTo(0,4)}}),e(\"Graphics\",[\"map\",\"button\",\"minus\",\"icon\"]).setAll({x:l.CI,y:l.CI,draw:t=>{t.moveTo(-4,0),t.lineTo(4,0)}}),e(\"GraticuleSeries\").setAll({step:10}),e(\"ZoomControl\").setAll({x:l.AQ,centerX:l.AQ,y:l.AQ,centerY:l.AQ,paddingRight:10,paddingBottom:10})}}var le,ue,ce,he,pe=n(5829),fe=n(7142),de=new c,ge=new c,me={point:T,lineStart:T,lineEnd:T,polygonStart:function(){me.lineStart=ye,me.lineEnd=be},polygonEnd:function(){me.lineStart=me.lineEnd=me.point=T,de.add(_(ge)),ge=new c},result:function(){var t=de/2;return de=new c,t}};function ye(){me.point=ve}function ve(t,e){me.point=_e,le=ce=t,ue=he=e}function _e(t,e){ge.add(he*t-ce*e),ce=t,he=e}function be(){_e(le,ue)}var we,Pe,xe,De,Se=me,Ie=0,Me=0,je=0,Ce=0,Ne=0,Ee=0,Oe=0,Te=0,Le=0,ke={point:Re,lineStart:ze,lineEnd:Ye,polygonStart:function(){ke.lineStart=Xe,ke.lineEnd=Ae},polygonEnd:function(){ke.point=Re,ke.lineStart=ze,ke.lineEnd=Ye},result:function(){var t=Le?[Oe/Le,Te/Le]:Ee?[Ce/Ee,Ne/Ee]:je?[Ie/je,Me/je]:[NaN,NaN];return Ie=Me=je=Ce=Ne=Ee=Oe=Te=Le=0,t}};function Re(t,e){Ie+=t,Me+=e,++je}function ze(){ke.point=Ge}function Ge(t,e){ke.point=Be,Re(xe=t,De=e)}function Be(t,e){var n=t-xe,i=e-De,o=C(n*n+i*i);Ce+=o*(xe+t)/2,Ne+=o*(De+e)/2,Ee+=o,Re(xe=t,De=e)}function Ye(){ke.point=Re}function Xe(){ke.point=Ze}function Ae(){We(we,Pe)}function Ze(t,e){ke.point=We,Re(we=xe=t,Pe=De=e)}function We(t,e){var n=t-xe,i=e-De,o=C(n*n+i*i);Ce+=o*(xe+t)/2,Ne+=o*(De+e)/2,Ee+=o,Oe+=(o=De*t-xe*e)*(xe+t),Te+=o*(De+e),Le+=3*o,Re(xe=t,De=e)}var Fe=ke;function Ve(t){this._context=t}Ve.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,m)}},result:T};var Je,$e,He,Qe,Ue,qe=new c,Ke={point:T,lineStart:function(){Ke.point=tn},lineEnd:function(){Je&&en($e,He),Ke.point=T},polygonStart:function(){Je=!0},polygonEnd:function(){Je=null},result:function(){var t=+qe;return qe=new c,t}};function tn(t,e){Ke.point=en,$e=Qe=t,He=Ue=e}function en(t,e){Qe-=t,Ue-=e,qe.add(C(Qe*Qe+Ue*Ue)),Qe=t,Ue=e}var nn=Ke;let on,rn,sn,an;class ln{constructor(t){this._append=null==t?un:function(t){const e=Math.floor(t);if(!(e>=0))throw new RangeError(`invalid digits: ${t}`);if(e>15)return un;if(e!==on){const t=10**e;on=e,rn=function(e){let n=1;this._+=e[0];for(const i=e.length;n<i;++n)this._+=Math.round(arguments[n]*t)/t+e[n]}}return rn}(t),this._radius=4.5,this._=\"\"}pointRadius(t){return this._radius=+t,this}polygonStart(){this._line=0}polygonEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){0===this._line&&(this._+=\"Z\"),this._point=NaN}point(t,e){switch(this._point){case 0:this._append`M${t},${e}`,this._point=1;break;case 1:this._append`L${t},${e}`;break;default:if(this._append`M${t},${e}`,this._radius!==sn||this._append!==rn){const t=this._radius,e=this._;this._=\"\",this._append`m0,${t}a${t},${t} 0 1,1 0,${-2*t}a${t},${t} 0 1,1 0,${2*t}z`,sn=t,rn=this._append,an=this._,this._=e}this._+=an}}result(){const t=this._;return this._=\"\",t.length?t:null}}function un(t){let e=1;this._+=t[0];for(const n=t.length;e<n;++e)this._+=arguments[e]+t[e]}var cn,hn,pn,fn,dn,gn,mn,yn,vn,_n,bn,wn,Pn,xn,Dn,Sn,In=n(1112),Mn=n(3145),jn=n(751),Cn={sphere:T,point:Nn,lineStart:On,lineEnd:kn,polygonStart:function(){Cn.lineStart=Rn,Cn.lineEnd=zn},polygonEnd:function(){Cn.lineStart=On,Cn.lineEnd=kn}};function Nn(t,e){t*=v;var n=P(e*=v);En(n*P(t),n*M(t),M(e))}function En(t,e,n){++cn,pn+=(t-pn)/cn,fn+=(e-fn)/cn,dn+=(n-dn)/cn}function On(){Cn.point=Tn}function Tn(t,e){t*=v;var n=P(e*=v);xn=n*P(t),Dn=n*M(t),Sn=M(e),Cn.point=Ln,En(xn,Dn,Sn)}function Ln(t,e){t*=v;var n=P(e*=v),i=n*P(t),o=n*M(t),r=M(e),s=w(C((s=Dn*r-Sn*o)*s+(s=Sn*i-xn*r)*s+(s=xn*o-Dn*i)*s),xn*i+Dn*o+Sn*r);hn+=s,gn+=s*(xn+(xn=i)),mn+=s*(Dn+(Dn=o)),yn+=s*(Sn+(Sn=r)),En(xn,Dn,Sn)}function kn(){Cn.point=Nn}function Rn(){Cn.point=Gn}function zn(){Bn(wn,Pn),Cn.point=Nn}function Gn(t,e){wn=t,Pn=e,t*=v,e*=v,Cn.point=Bn;var n=P(e);xn=n*P(t),Dn=n*M(t),Sn=M(e),En(xn,Dn,Sn)}function Bn(t,e){t*=v;var n=P(e*=v),i=n*P(t),o=n*M(t),r=M(e),s=Dn*r-Sn*o,a=Sn*i-xn*r,l=xn*o-Dn*i,u=S(s,a,l),c=E(u),h=u&&-c/u;vn.add(h*s),_n.add(h*a),bn.add(h*l),hn+=c,gn+=c*(xn+(xn=i)),mn+=c*(Dn+(Dn=o)),yn+=c*(Sn+(Sn=r)),En(xn,Dn,Sn)}var Yn,Xn,An,Zn,Wn,Fn,Vn,Jn,$n,Hn,Qn,Un,qn,Kn,ti,ei,ni=new c,ii=new c,oi={point:T,lineStart:T,lineEnd:T,polygonStart:function(){ni=new c,oi.lineStart=ri,oi.lineEnd=si},polygonEnd:function(){var t=+ni;ii.add(t<0?m+t:t),this.lineStart=this.lineEnd=this.point=T},sphere:function(){ii.add(m)}};function ri(){oi.point=ai}function si(){li(Yn,Xn)}function ai(t,e){oi.point=li,Yn=t,Xn=e,An=t*=v,Zn=P(e=(e*=v)/2+g),Wn=M(e)}function li(t,e){var n=(t*=v)-An,i=n>=0?1:-1,o=i*n,r=P(e=(e*=v)/2+g),s=M(e),a=Wn*s,l=Zn*r+a*P(o),u=a*i*M(o);ni.add(w(u,l)),An=t,Zn=r,Wn=s}function ui(t){return ii=new c,Z(t,oi),2*ii}var ci={point:hi,lineStart:fi,lineEnd:di,polygonStart:function(){ci.point=gi,ci.lineStart=mi,ci.lineEnd=yi,Kn=new c,oi.polygonStart()},polygonEnd:function(){oi.polygonEnd(),ci.point=hi,ci.lineStart=fi,ci.lineEnd=di,ni<0?(Fn=-(Jn=180),Vn=-($n=90)):Kn>h?$n=90:Kn<-h&&(Vn=-90),ei[0]=Fn,ei[1]=Jn},sphere:function(){Fn=-(Jn=180),Vn=-($n=90)}};function hi(t,e){ti.push(ei=[Fn=t,Jn=t]),e<Vn&&(Vn=e),e>$n&&($n=e)}function pi(t,e){var n=bt([t*v,e*v]);if(qn){var i=Pt(qn,n),o=Pt([i[1],-i[0],0],i);St(o),o=_t(o);var r,s=t-Hn,a=s>0?1:-1,l=o[0]*y*a,u=_(s)>180;u^(a*Hn<l&&l<a*t)?(r=o[1]*y)>$n&&($n=r):u^(a*Hn<(l=(l+360)%360-180)&&l<a*t)?(r=-o[1]*y)<Vn&&(Vn=r):(e<Vn&&(Vn=e),e>$n&&($n=e)),u?t<Hn?vi(Fn,t)>vi(Fn,Jn)&&(Jn=t):vi(t,Jn)>vi(Fn,Jn)&&(Fn=t):Jn>=Fn?(t<Fn&&(Fn=t),t>Jn&&(Jn=t)):t>Hn?vi(Fn,t)>vi(Fn,Jn)&&(Jn=t):vi(t,Jn)>vi(Fn,Jn)&&(Fn=t)}else ti.push(ei=[Fn=t,Jn=t]);e<Vn&&(Vn=e),e>$n&&($n=e),qn=n,Hn=t}function fi(){ci.point=pi}function di(){ei[0]=Fn,ei[1]=Jn,ci.point=hi,qn=null}function gi(t,e){if(qn){var n=t-Hn;Kn.add(_(n)>180?n+(n>0?360:-360):n)}else Qn=t,Un=e;oi.point(t,e),pi(t,e)}function mi(){oi.lineStart()}function yi(){gi(Qn,Un),oi.lineEnd(),_(Kn)>h&&(Fn=-(Jn=180)),ei[0]=Fn,ei[1]=Jn,qn=null}function vi(t,e){return(e-=t)<0?e+360:e}function _i(t,e){return t[0]-e[0]}function bi(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}function wi(t,e){return function(){var t,e,n=Ot([0,0]),i=Ot(90),o=Ot(6),r={point:function(n,i){t.push(n=e(n,i)),n[0]*=y,n[1]*=y}};function s(){var s=n.apply(this,arguments),a=i.apply(this,arguments)*v,l=o.apply(this,arguments)*v;return t=[],e=ct(-s[0]*v,-s[1]*v,0).invert,Tt(r,a,l,1),s={type:\"Polygon\",coordinates:[t]},t=e=null,s}return s.center=function(t){return arguments.length?(n=\"function\"==typeof t?t:Ot([+t[0],+t[1]]),s):n},s.radius=function(t){return arguments.length?(i=\"function\"==typeof t?t:Ot(+t),s):i},s.precision=function(t){return arguments.length?(o=\"function\"==typeof t?t:Ot(+t),s):o},s}().center([t.longitude,t.latitude]).radius(e)()}function Pi(t){const e=function(t){cn=hn=pn=fn=dn=gn=mn=yn=0,vn=new c,_n=new c,bn=new c,Z(t,Cn);var e=+vn,n=+_n,i=+bn,o=S(e,n,i);return o<p&&(e=gn,n=mn,i=yn,hn<h&&(e=pn,n=fn,i=dn),(o=S(e,n,i))<p)?[NaN,NaN]:[w(n,e)*y,E(i/o)*y]}(t);return{longitude:e[0],latitude:e[1]}}function xi(t){return ui(t)}function Di(t){const e=function(t){var e,n,i,o,r,s,a;if($n=Jn=-(Fn=Vn=1/0),ti=[],Z(t,ci),n=ti.length){for(ti.sort(_i),e=1,r=[i=ti[0]];e<n;++e)bi(i,(o=ti[e])[0])||bi(i,o[1])?(vi(i[0],o[1])>vi(i[0],i[1])&&(i[1]=o[1]),vi(o[0],i[1])>vi(i[0],i[1])&&(i[0]=o[0])):r.push(i=o);for(s=-1/0,e=0,i=r[n=r.length-1];e<=n;i=o,++e)o=r[e],(a=vi(i[1],o[0]))>s&&(s=a,Fn=o[0],Jn=i[1])}return ti=ei=null,Fn===1/0||Vn===1/0?[[NaN,NaN],[NaN,NaN]]:[[Fn,Vn],[Jn,$n]]}(t);if(e){const t={left:e[0][0],right:e[1][0],top:e[1][1],bottom:e[0][1]};return t.right<t.left&&(t.right=180,t.left=-180),t}return{left:0,right:0,top:0,bottom:0}}function Si(t,e,n,i){let o=[];i<=-180&&(i=-179.9999),n<=-90&&(n=-89.9999),t>=90&&(t=89.9999),e>=180&&(e=179.9999);let r=Math.min(90,(e-i)/Math.ceil((e-i)/90)),s=(t-n)/Math.ceil((t-n)/90);for(let a=i;a<e;a+=r){let i=[];o.push([i]),a+r>e&&(r=e-a);for(let e=a;e<=a+r;e+=5)i.push([e,t]);for(let e=t;e>=n;e-=s)i.push([a+r,e]);for(let t=a+r;t>=a;t-=5)i.push([t,n]);for(let e=n;e<=t;e+=s)i.push([a,e])}return{type:\"MultiPolygon\",coordinates:o}}function Ii(t){let e=Mi(t.longitude),n=Math.asin(Math.sin(t.latitude*jn.RADIANS))*jn.DEGREES,i=Mi(t.latitude);return Math.abs(i)>90&&(e=Mi(e+180)),t.longitude=e,t.latitude=n,t}function Mi(t){return(t%=360)>180&&(t-=360),t<-180&&(t+=360),t}var ji=n(7652);class Ci extends pe.j{constructor(){super(...arguments),Object.defineProperty(this,\"_downTranslateX\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_downTranslateY\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_downRotationX\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_downRotationY\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_downRotationZ\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_pLat\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_pLon\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_movePoints\",{enumerable:!0,configurable:!0,writable:!0,value:{}}),Object.defineProperty(this,\"_downZoomLevel\",{enumerable:!0,configurable:!0,writable:!0,value:1}),Object.defineProperty(this,\"_doubleDownDistance\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_dirtyGeometries\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_geometryColection\",{enumerable:!0,configurable:!0,writable:!0,value:{type:\"GeometryCollection\",geometries:[]}}),Object.defineProperty(this,\"_centerLocation\",{enumerable:!0,configurable:!0,writable:!0,value:null}),Object.defineProperty(this,\"_za\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_rxa\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_rya\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_txa\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_tya\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_mapBounds\",{enumerable:!0,configurable:!0,writable:!0,value:[[0,0],[0,0]]}),Object.defineProperty(this,\"_geoCentroid\",{enumerable:!0,configurable:!0,writable:!0,value:{longitude:0,latitude:0}}),Object.defineProperty(this,\"_geoBounds\",{enumerable:!0,configurable:!0,writable:!0,value:{left:0,right:0,top:0,bottom:0}}),Object.defineProperty(this,\"_prevGeoBounds\",{enumerable:!0,configurable:!0,writable:!0,value:{left:0,right:0,top:0,bottom:0}}),Object.defineProperty(this,\"_dispatchBounds\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_wheelDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_pw\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_ph\",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,\"_mapFitted\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"_centerX\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_centerY\",{enumerable:!0,configurable:!0,writable:!0,value:0})}_makeGeoPath(){const t=this.get(\"projection\"),e=function(t,e){let n,i,o=3,r=4.5;function s(t){return t&&(\"function\"==typeof r&&i.pointRadius(+r.apply(this,arguments)),Z(t,n(i))),i.result()}return s.area=function(t){return Z(t,n(Se)),Se.result()},s.measure=function(t){return Z(t,n(nn)),nn.result()},s.bounds=function(t){return Z(t,n(Ft)),Ft.result()},s.centroid=function(t){return Z(t,n(Fe)),Fe.result()},s.projection=function(e){return arguments.length?(n=null==e?(t=null,zt):(t=e).stream,s):t},s.context=function(t){return arguments.length?(i=null==t?(e=null,new ln(o)):new Ve(e=t),\"function\"!=typeof r&&i.pointRadius(r),s):e},s.pointRadius=function(t){return arguments.length?(r=\"function\"==typeof t?t:(i.pointRadius(+t),+t),s):r},s.digits=function(t){if(!arguments.length)return o;if(null==t)o=null;else{const e=Math.floor(t);if(!(e>=0))throw new RangeError(`invalid digits: ${t}`);o=e}return null===e&&(i=new ln(o)),s},s.projection(t).digits(o).context(e)}();e.projection(t),this.setPrivateRaw(\"geoPath\",e)}geoPoint(){return this.invert(this.seriesContainer.toGlobal({x:this.width()/2,y:this.height()/2}))}geoCentroid(){return this._geoCentroid}geoBounds(){return this._geoBounds}_handleSetWheel(){const t=this.get(\"wheelX\"),e=this.get(\"wheelY\"),n=this.chartContainer;\"none\"!=t||\"none\"!=e?(this._wheelDp&&this._wheelDp.dispose(),this._wheelDp=n.events.on(\"wheel\",(i=>{const o=this.get(\"wheelEasing\"),r=this.get(\"wheelSensitivity\",1),s=this.get(\"wheelDuration\",0),a=i.originalEvent;if(!ji.isLocalEvent(a,this))return;a.preventDefault();const l=n._display.toLocal(i.point);\"zoom\"==e?this._handleWheelZoom(a.deltaY,l):\"rotateY\"==e?this._handleWheelRotateY(a.deltaY/5*r,s,o):\"rotateX\"==e&&this._handleWheelRotateX(a.deltaY/5*r,s,o),\"zoom\"==t?this._handleWheelZoom(a.deltaX,l):\"rotateY\"==t?this._handleWheelRotateY(a.deltaX/5*r,s,o):\"rotateX\"==t&&this._handleWheelRotateX(a.deltaX/5*r,s,o)})),this._disposers.push(this._wheelDp)):this._wheelDp&&this._wheelDp.dispose()}_prepareChildren(){super._prepareChildren();const t=this.get(\"projection\"),e=this.innerWidth(),n=this.innerHeight(),i=this._geometryColection.geometries;if(this.isDirty(\"projection\")){this._makeGeoPath(),this.markDirtyProjection(),this._fitMap(),t.scale(this.getPrivate(\"mapScale\")*this.get(\"zoomLevel\",1)),t.rotate&&t.rotate([this.get(\"rotationX\",0),this.get(\"rotationY\",0),this.get(\"rotationZ\",0)]);let i=this._prevSettings.projection;if(i&&i!=t){let o=e/2,r=n/2;if(i.invert){let e=i.invert([o,r]);if(e){let n=t(e);if(n){let e=t.translate(),i=o-(n[0]-e[0]),s=r-(n[1]-e[1]);t.translate([i,s]),this.setRaw(\"translateX\",i),this.setRaw(\"translateY\",s)}}}}}if((this.isDirty(\"wheelX\")||this.isDirty(\"wheelY\"))&&this._handleSetWheel(),this._dirtyGeometries&&(this._geometryColection.geometries=[],this.series.each((t=>{o.pushAll(this._geometryColection.geometries,t._geometries)})),this._fitMap()),0!=i.length&&(e!=this._pw||n!=this._ph||this._dirtyGeometries)&&e>0&&n>0){let i=e/2,o=n/2;t.fitSize([e,n],this._geometryColection);const r=t.scale();if(this.setPrivateRaw(\"mapScale\",r),t.scale(r*this.get(\"zoomLevel\",1)),this._centerLocation){let e=t(this._centerLocation);if(e){let n=t.translate(),r=i-(e[0]-n[0]),s=o-(e[1]-n[1]);t.translate([r,s]),this.setRaw(\"translateX\",r),this.setRaw(\"translateY\",s),this._centerX=n[0],this._centerY=n[1]}}this.markDirtyProjection();const s=this.getPrivate(\"geoPath\");this._mapBounds=s.bounds(this._geometryColection)}if(this._pw=e,this._ph=n,this.isDirty(\"zoomControl\")){const t=this._prevSettings.zoomControl,e=this.get(\"zoomControl\");e!==t&&(this._disposeProperty(\"zoomControl\"),t&&t.dispose(),e&&(e.setPrivate(\"chart\",this),this.children.push(e)),this.setRaw(\"zoomControl\",e))}this.isDirty(\"zoomLevel\")&&(t.scale(this.getPrivate(\"mapScale\")*this.get(\"zoomLevel\",1)),this.markDirtyProjection(),this.series.each((t=>{t.isType(\"MapPointSeries\")&&t.get(\"autoScale\")&&o.each(t.dataItems,(t=>{const e=t.bullets;e&&o.each(e,(t=>{const e=t.get(\"sprite\");e&&e.set(\"scale\",this.get(\"zoomLevel\"))}))}))}))),(this.isDirty(\"translateX\")||this.isDirty(\"translateY\"))&&(t.translate([this.get(\"translateX\",this.width()/2),this.get(\"translateY\",this.height()/2)]),this.markDirtyProjection()),t.rotate&&(this.isDirty(\"rotationX\")||this.isDirty(\"rotationY\")||this.isDirty(\"rotationZ\"))&&(t.rotate([this.get(\"rotationX\",0),this.get(\"rotationY\",0),this.get(\"rotationZ\",0)]),this.markDirtyProjection()),(this.isDirty(\"pinchZoom\")||this.get(\"panX\")||this.get(\"panY\"))&&this._setUpTouch()}_fitMap(){const t=this.get(\"projection\");let e=this.innerWidth(),n=this.innerHeight();if(e>0&&n>0){t.fitSize([e,n],this._geometryColection),this.setPrivateRaw(\"mapScale\",t.scale());const i=t.translate();this.setRaw(\"translateX\",i[0]),this.setRaw(\"translateY\",i[1]),this._centerX=i[0],this._centerY=i[1];const o=this.getPrivate(\"geoPath\");this._mapBounds=o.bounds(this._geometryColection),this._geoCentroid=Pi(this._geometryColection);const r=Di(this._geometryColection);if(this._geoBounds=r,this._geometryColection.geometries.length>0){r.left=jn.round(this._geoBounds.left,3),r.right=jn.round(this._geoBounds.right,3),r.top=jn.round(this._geoBounds.top,3),r.bottom=jn.round(this._geoBounds.bottom,3);const t=this._prevGeoBounds;t&&!ji.sameBounds(r,t)&&(this._dispatchBounds=!0,this._prevGeoBounds=r)}this._mapFitted=!0}}homeGeoPoint(){let t=this.get(\"homeGeoPoint\");if(!t){const e=this.getPrivate(\"geoPath\").bounds(this._geometryColection),n=e[0][0],i=e[0][1],o=e[1][0],r=e[1][1];t=this.invert({x:n+(o-n)/2,y:i+(r-i)/2})}return t}goHome(t){this.zoomToGeoPoint(this.homeGeoPoint(),this.get(\"homeZoomLevel\",1),!0,t,this.get(\"homeRotationX\"),this.get(\"homeRotationY\"))}_updateChildren(){const t=this.get(\"projection\");if(t.invert){let e=this.innerWidth(),n=this.innerHeight();e>0&&n>0&&(this._centerLocation=t.invert([this.innerWidth()/2,this.innerHeight()/2]))}super._updateChildren()}_afterChanged(){if(super._afterChanged(),this._dispatchBounds){this._dispatchBounds=!1;const t=\"geoboundschanged\";this.events.isEnabled(t)&&this.events.dispatch(t,{type:t,target:this})}}_setUpTouch(){this.chartContainer._display.cancelTouch||(this.chartContainer._display.cancelTouch=!!(this.get(\"pinchZoom\")||this.get(\"panX\")||this.get(\"panY\")))}markDirtyGeometries(){this._dirtyGeometries=!0,this.markDirty()}markDirtyProjection(){this.series.each((t=>{t.markDirtyProjection()}))}_afterNew(){this._defaultThemes.push(ae.new(this._root)),this._settings.themeTags=ji.mergeTags(this._settings.themeTags,[\"map\"]),this.children.push(this.bulletsContainer),super._afterNew(),this._makeGeoPath(),this.chartContainer.children.push(this.seriesContainer),null==this.get(\"translateX\")&&this.set(\"translateX\",this.width()/2),null==this.get(\"translateY\")&&this.set(\"translateY\",this.height()/2),this.chartContainer.set(\"interactive\",!0),this.chartContainer.set(\"interactiveChildren\",!1),this.chartContainer.set(\"background\",fe.A.new(this._root,{themeTags:[\"map\",\"background\"],fill:In.Il.fromHex(0),fillOpacity:0})),this._disposers.push(this.chartContainer.events.on(\"pointerdown\",(t=>{this._handleChartDown(t)}))),this._disposers.push(this.chartContainer.events.on(\"globalpointerup\",(t=>{this._handleChartUp(t)}))),this._disposers.push(this.chartContainer.events.on(\"globalpointermove\",(t=>{this._handleChartMove(t)})));let t=!1;for(let e=0;e<Mn.i_.licenses.length;e++)Mn.i_.licenses[e].match(/^AM5M.{5,}/i)&&(t=!0);t||this._root._showBranding(),this._setUpTouch()}_handleChartDown(t){this._downZoomLevel=this.get(\"zoomLevel\",1);let e=r.keys(this.chartContainer._downPoints).length;if(1==e){const n=this.chartContainer._downPoints[1];n&&n.x==t.point.x&&n.y==t.point.y&&(e=0)}if(e>0){this._downTranslateX=this.get(\"translateX\"),this._downTranslateY=this.get(\"translateY\"),this._downRotationX=this.get(\"rotationX\"),this._downRotationY=this.get(\"rotationY\"),this._downRotationZ=this.get(\"rotationZ\");const t=this.chartContainer._getDownPointId();if(t){let e=this._movePoints[t];e&&(this.chartContainer._downPoints[t]=e)}}else if(0==e){let e=this.chartContainer.get(\"background\");if(e&&e.events.enableType(\"click\"),this.get(\"panX\")||this.get(\"panY\")){this._za&&this._za.stop(),this._txa&&this._txa.stop(),this._tya&&this._tya.stop(),this._rxa&&this._rxa.stop(),this._rya&&this._rya.stop();const e=this.chartContainer._display.toLocal(t.point);this._downTranslateX=this.get(\"translateX\"),this._downTranslateY=this.get(\"translateY\"),this._downRotationX=this.get(\"rotationX\"),this._downRotationY=this.get(\"rotationY\"),this._downRotationZ=this.get(\"rotationZ\");let n=this.get(\"projection\");if(n.invert){let t=n.invert([e.x,e.y]),i=n.invert([e.x+1,e.y+1]);t&&i&&(this._pLon=Math.abs(i[0]-t[0]),this._pLat=Math.abs(i[1]-t[1]))}}}}invert(t){let e=this.get(\"projection\");if(e.invert){const n=e.invert([t.x,t.y]);if(n)return{longitude:n[0],latitude:n[1]}}return{longitude:0,latitude:0}}convert(t,e,n){let i,o=this.get(\"projection\");if(o.rotate||(e=void 0,n=void 0),null!=e||null!=n){null==e&&(e=0),null==n&&(n=0);let r=o.rotate();o.rotate([e,n,0]),i=o([t.longitude,t.latitude]),o.rotate(r)}else i=o([t.longitude,t.latitude]);return i?{x:i[0],y:i[1]}:{x:0,y:0}}_handleChartUp(t){this.chartContainer._downPoints={}}_handlePinch(){const t=this.chartContainer;let e=0,n=[],i=[];if(r.each(t._downPoints,((t,o)=>{n[e]=o;let r=this._movePoints[t];r&&(i[e]=r),e++})),n.length>1&&i.length>1){const e=t._display;let o=n[0],r=n[1],s=i[0],a=i[1];if(o&&r&&s&&a){o=e.toLocal(o),r=e.toLocal(r),s=e.toLocal(s),a=e.toLocal(a);let t=Math.hypot(r.x-o.x,r.y-o.y),n=Math.hypot(a.x-s.x,a.y-s.y)/t*this._downZoomLevel;n=jn.fitToRange(n,this.get(\"minZoomLevel\",1),this.get(\"maxZoomLevel\",32));let i={x:s.x+(a.x-s.x)/2,y:s.y+(a.y-s.y)/2},l={x:o.x+(r.x-o.x)/2,y:o.y+(r.y-o.y)/2},u=this._downTranslateX||0,c=this._downTranslateY||0,h=this._downZoomLevel,p=i.x-(-u+l.x)/h*n,f=i.y-(-c+l.y)/h*n;this.set(\"zoomLevel\",n),this.set(\"translateX\",p),this.set(\"translateY\",f)}}}_handleChartMove(t){const e=this.chartContainer;let n=e._getDownPoint();const i=e._getDownPointId(),o=t.originalEvent.pointerId;if(this.get(\"pinchZoom\")&&o&&(this._movePoints[o]=t.point,r.keys(e._downPoints).length>1))this._handlePinch();else if((!i||!o||o==i)&&n){const i=this.get(\"panX\"),o=this.get(\"panY\");if(\"none\"!=i||\"none\"!=o){const r=e._display;let s=r.toLocal(t.point);n=r.toLocal(n);let l=this._downTranslateX,u=this._downTranslateY;if(Math.hypot(n.x-s.x,n.y-s.y)>5){let t=e.get(\"background\");if(t&&t.events.disableType(\"click\"),a.isNumber(l)&&a.isNumber(u)){let t=this.get(\"projection\");const e=this.get(\"zoomLevel\",1),r=this.get(\"maxPanOut\",.4),a=this._mapBounds,c=this.width(),h=this.height(),p=a[1][0]-a[0][0],f=a[1][1]-a[0][1];if(\"translateX\"==i){l+=s.x-n.x;const t=c/2-(c/2-this._centerX)*e;l=Math.min(l,t+p*r*e),l=Math.max(l,t-p*r*e)}if(\"translateY\"==o){u+=s.y-n.y;const t=h/2-(h/2-this._centerY)*e;u=Math.min(u,t+f*r*e),u=Math.max(u,t-f*r*e)}if(this.set(\"translateX\",l),this.set(\"translateY\",u),t.invert){let e=t.invert([n.x,n.y]);location&&e&&(\"rotateX\"==i&&this.set(\"rotationX\",this._downRotationX-(n.x-s.x)*this._pLon),\"rotateY\"==o&&this.set(\"rotationY\",this._downRotationY+(n.y-s.y)*this._pLat))}}}}}}_handleWheelRotateY(t,e,n){this._rya=this.animate({key:\"rotationY\",to:this.get(\"rotationY\",0)-t,duration:e,easing:n})}_handleWheelRotateX(t,e,n){this._rxa=this.animate({key:\"rotationX\",to:this.get(\"rotationX\",0)-t,duration:e,easing:n})}_handleWheelZoom(t,e){let n=this.get(\"zoomStep\",2),i=this.get(\"zoomLevel\",1),o=i;t>0?o=i/n:t<0&&(o=i*n),o!=i&&this.zoomToPoint(e,o)}zoomToGeoBounds(t,e,n,i){t.right<t.left&&(t.right=180,t.left=-180);const o=this.getPrivate(\"geoPath\").bounds(this._geometryColection);let r=this.convert({longitude:t.left,latitude:t.top},n,i),s=this.convert({longitude:t.right,latitude:t.bottom},n,i);r.y<o[0][1]&&(r.y=o[0][1]),s.y>o[1][1]&&(s.y=o[1][1]);let a=this.get(\"zoomLevel\",1),l=r.x,u=s.x,c=r.y,h=s.y,p=this.seriesContainer,f=.9*Math.min(p.innerWidth()/(u-l)*a,p.innerHeight()/(h-c)*a),d=l+(u-l)/2,g=c+(h-c)/2,m=this.invert({x:d,y:g});return null==n&&null==i||this.rotate(n,i),this.zoomToGeoPoint(m,f,!0,e)}zoomToPoint(t,e,n,i){e&&(e=jn.fitToRange(e,this.get(\"minZoomLevel\",1),this.get(\"maxZoomLevel\",32))),a.isNumber(i)||(i=this.get(\"animationDuration\",0));const o=this.get(\"animationEasing\"),r=this.get(\"zoomLevel\",1);this.get(\"centerMapOnZoomOut\")&&e==this.get(\"homeZoomLevel\",1)&&(t=this.convert(this.homeGeoPoint()),n=!0);let s=t.x,l=t.y,u=this.get(\"translateX\",0),c=this.get(\"translateY\",0),h=s,p=l;n&&(h=this.width()/2,p=this.height()/2);let f=h-(s-u)/r*e,d=p-(l-c)/r*e;return this._txa=this.animate({key:\"translateX\",to:f,duration:i,easing:o}),this._tya=this.animate({key:\"translateY\",to:d,duration:i,easing:o}),this._za=this.animate({key:\"zoomLevel\",to:e,duration:i,easing:o}),r!=e&&this._root.readerAlert(this._t(\"Zoom level changed to %1\",this._root.locale,a.numberToString(e))),this._za}zoomToGeoPoint(t,e,n,i,o,r){let s=this.convert(t,o,r);if(null==o&&null==r||this.rotate(o,r,i),s)return this.zoomToPoint(s,e,n,i)}rotate(t,e,n){if(this.get(\"projection\").rotate){a.isNumber(n)||(n=this.get(\"animationDuration\",0));const i=this.get(\"animationEasing\");null!=t&&this.animate({key:\"rotationX\",to:t,duration:n,easing:i}),null!=e&&this.animate({key:\"rotationY\",to:e,duration:n,easing:i})}}zoomIn(){return this.zoomToPoint({x:this.width()/2,y:this.height()/2},this.get(\"zoomLevel\",1)*this.get(\"zoomStep\",2))}zoomOut(){return this.zoomToPoint({x:this.width()/2,y:this.height()/2},this.get(\"zoomLevel\",1)/this.get(\"zoomStep\",2))}_clearDirty(){super._clearDirty(),this._dirtyGeometries=!1,this._mapFitted=!1}getArea(t){const e=this.getPrivate(\"geoPath\"),n=t.get(\"geometry\");return n?e.area(n):0}}Object.defineProperty(Ci,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapChart\"}),Object.defineProperty(Ci,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:pe.j.classNames.concat([Ci.className])});class Ni extends s{constructor(){super(...arguments),Object.defineProperty(this,\"_types\",{enumerable:!0,configurable:!0,writable:!0,value:[\"Point\",\"MultiPoint\"]}),Object.defineProperty(this,\"_lineChangedDp\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){this.fields.push(\"polygonId\",\"lineId\",\"longitude\",\"latitude\",\"fixed\"),super._afterNew()}markDirtyProjection(){this.markDirty()}markDirtyValues(t){super.markDirtyValues(),t&&this._positionBullets(t)}processDataItem(t){super.processDataItem(t);let e=t.get(\"geometry\");if(e){if(\"Point\"==e.type){const n=e.coordinates;n&&(t.set(\"longitude\",n[0]),t.set(\"latitude\",n[1]))}else if(\"MultiPoint\"==e.type){const n=e.coordinates;n&&n[0]&&(t.set(\"longitude\",n[0][0]),t.set(\"latitude\",n[0][1]))}}else e={type:\"Point\",coordinates:[t.get(\"longitude\",0),t.get(\"latitude\",0)]},t.set(\"geometry\",e);this._addGeometry(e,this)}_makeBullets(t){t.bullets=[],this.bullets.each((e=>{const n=t.get(\"geometry\");if(n)if(\"Point\"==n.type)this._setBulletParent(this._makeBullet(t,e));else if(n.type=\"MultiPoint\"){let i=0;o.each(n.coordinates,(()=>{this._setBulletParent(this._makeBullet(t,e,i)),i++}))}}))}_setBulletParent(t){if(t){const e=t.get(\"sprite\"),n=this.chart;if(e&&n){const t=e.dataItem;t&&(t.get(\"fixed\")?e.parent!=n.bulletsContainer&&n.bulletsContainer.children.moveValue(e):e.parent!=this.bulletsContainer&&this.bulletsContainer.children.moveValue(e))}}}_positionBullet(t){const e=t.get(\"sprite\");if(e){const n=e.dataItem;if(n&&n.get(\"fixed\"))return;const i=n.get(\"latitude\"),o=n.get(\"longitude\"),r=n.get(\"lineDataItem\"),s=n.get(\"fixed\"),l=this.chart;let u;if(r)u=r.get(\"mapLine\");else{const t=n.get(\"lineId\");t&&l&&l.series.each((e=>{if(e.isType(\"MapLineSeries\")){let i=e.getDataItemById(t);i&&(n.set(\"lineDataItem\",i),u=i.get(\"mapLine\"))}}))}this._lineChangedDp&&this._lineChangedDp.dispose(),u&&(this._lineChangedDp=u.events.on(\"linechanged\",(()=>{this._positionBullets(n)})));const c=n.get(\"polygonDataItem\");let h;if(c)h=c.get(\"mapPolygon\");else{const t=n.get(\"polygonId\");t&&l&&l.series.each((e=>{if(e.isType(\"MapPolygonSeries\")){let i=e.getDataItemById(t);i&&(n.set(\"polygonDataItem\",i),h=i.get(\"mapPolygon\"))}}))}const p=n.get(\"positionOnLine\");let f,d;if(h){let t=h.visualCentroid();f=[t.longitude,t.latitude],n.setRaw(\"longitude\",t.longitude),n.setRaw(\"latitude\",t.latitude)}else if(u&&a.isNumber(p)){let e=u.positionToGeoPoint(p);if(f=[e.longitude,e.latitude],n.get(\"autoRotate\",t.get(\"autoRotate\"))&&l){const t=u.positionToGeoPoint(p-.002),e=u.positionToGeoPoint(p+.002),n=l.convert(t),i=l.convert(e);d=jn.getAngle(n,i)}n.setRaw(\"longitude\",e.longitude),n.setRaw(\"latitude\",e.latitude)}else if(a.isNumber(o)&&a.isNumber(i))f=[o,i];else{const e=n.get(\"geometry\");if(e)if(\"Point\"==e.type)this._positionBulletReal(t,e,e.coordinates,d);else if(\"MultiPoint\"==e.type){let n=t._index||0;f=e.coordinates[n]}}!s&&f&&this._positionBulletReal(t,{type:\"Point\",coordinates:f},f,d)}}_positionBulletReal(t,e,n,i){const o=t.get(\"sprite\"),r=this.chart;if(r){const s=r.get(\"projection\"),a=r.getPrivate(\"geoPath\"),l=o.dataItem,u=s(n);if(u){const t={x:u[0],y:u[1]};o.setAll(t),l.setRaw(\"point\",t)}let c=!0;a(e)?this.get(\"clipFront\")&&(c=!1):this.get(\"clipBack\")&&(c=!1),o.setPrivate(\"visible\",c),l.set(\"clipped\",!c),l&&null!=i&&l.get(\"autoRotate\",t.get(\"autoRotate\"))&&o.set(\"rotation\",i+l.get(\"autoRotateAngle\",t.get(\"autoRotateAngle\",0)))}}zoomToDataItem(t,e,n){const i=this.chart;if(i){const o=t.get(\"longitude\",0),r=t.get(\"latitude\",0);return n?i.zoomToGeoPoint({longitude:o,latitude:r},e,!0,void 0,-o,-r):i.zoomToGeoPoint({longitude:o,latitude:r},e,!0)}}zoomToDataItems(t,e){let n=null,i=null,r=null,s=null;if(o.each(t,(t=>{const e=t.get(\"longitude\",0),o=t.get(\"latitude\",0);(null==n||n>e)&&(n=e),(null==i||i<e)&&(i=e),(null==r||r<o)&&(r=o),(null==s||s>o)&&(s=o)})),null!=n&&null!=i&&null!=r&&null!=s){const t=this.chart;if(t)return e?t.zoomToGeoBounds({left:n,right:i,top:r,bottom:s},void 0,-(n+(i-n)/2),-(r+(r-s)/2)):t.zoomToGeoBounds({left:n,right:i,top:r,bottom:s})}}disposeDataItem(t){const e=this.chart;e&&e.series.each((e=>{e.isType(\"MapLineSeries\")&&o.each(e.dataItems,(n=>{const i=n.get(\"pointsToConnect\");i&&o.each(i,(r=>{r==t&&(o.remove(i,r),e.markDirtyValues(n))}))}))})),super.disposeDataItem(t)}_excludeDataItem(t){super._excludeDataItem(t);const e=t.bullets;e&&o.each(e,(t=>{const e=t.get(\"sprite\");e&&e.setPrivate(\"visible\",!1)}))}_unexcludeDataItem(t){super._unexcludeDataItem(t);const e=t.bullets;e&&o.each(e,(t=>{const e=t.get(\"sprite\");e&&e.setPrivate(\"visible\",!0)}))}_notIncludeDataItem(t){super._notIncludeDataItem(t);const e=t.bullets;e&&o.each(e,(t=>{const e=t.get(\"sprite\");e&&e.setPrivate(\"visible\",!1)}))}_unNotIncludeDataItem(t){super._unNotIncludeDataItem(t);const e=t.bullets;e&&o.each(e,(t=>{const e=t.get(\"sprite\");e&&e.setPrivate(\"visible\",!0)}))}}Object.defineProperty(Ni,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapPointSeries\"}),Object.defineProperty(Ni,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:s.classNames.concat([Ni.className])});var Ei=n(5417),Oi=n.n(Ei);class Ti extends u.T{constructor(){super(...arguments),Object.defineProperty(this,\"_projectionDirty\",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,\"series\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_beforeChanged(){if(super._beforeChanged(),this._projectionDirty||this.isDirty(\"geometry\")||this.isDirty(\"precision\")){const t=this.get(\"geometry\");if(t){const e=this.series;if(e){const n=e.projection();n&&n.precision(this.get(\"precision\",.5));const i=e.geoPath();i&&(this._clear=!0,this.set(\"draw\",(e=>{i.context(this._display),i(t),i.context(null)})),this.isHover()&&this.showTooltip())}}}}markDirtyProjection(){this.markDirty(),this._projectionDirty=!0}_clearDirty(){super._clearDirty(),this._projectionDirty=!1}geoCentroid(){const t=this.get(\"geometry\");return t?Pi(t):{latitude:0,longitude:0}}visualCentroid(){let t=0,e=[];const n=this.get(\"geometry\");if(n){if(\"Polygon\"==n.type)e=n.coordinates;else if(\"MultiPolygon\"==n.type)for(let i=0;i<n.coordinates.length;i++){let o=n.coordinates[i],r=ui({type:\"Polygon\",coordinates:o});r>t&&(e=o,t=r)}let i=Oi()(e);return{longitude:i[0],latitude:i[1]}}return{longitude:0,latitude:0}}_getTooltipPoint(){const t=this.series;if(t){const e=t.projection();if(e){const t=this.visualCentroid(),n=e([t.longitude,t.latitude]);if(n)return{x:n[0],y:n[1]}}}return{x:0,y:0}}}Object.defineProperty(Ti,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapPolygon\"}),Object.defineProperty(Ti,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:u.T.classNames.concat([Ti.className])});class Li extends s{constructor(){super(...arguments),Object.defineProperty(this,\"mapPolygons\",{enumerable:!0,configurable:!0,writable:!0,value:new K.o(tt.YS.new({}),(()=>Ti._new(this._root,{},[this.mapPolygons.template])))}),Object.defineProperty(this,\"_types\",{enumerable:!0,configurable:!0,writable:!0,value:[\"Polygon\",\"MultiPolygon\"]})}makeMapPolygon(t){const e=this.children.push(this.mapPolygons.make());return e._setDataItem(t),this.mapPolygons.push(e),e}markDirtyProjection(){o.each(this.dataItems,(t=>{let e=t.get(\"mapPolygon\");e&&e.markDirtyProjection()}))}_prepareChildren(){super._prepareChildren(),this.isDirty(\"fill\")&&this.mapPolygons.template.set(\"fill\",this.get(\"fill\")),this.isDirty(\"stroke\")&&this.mapPolygons.template.set(\"stroke\",this.get(\"stroke\"))}processDataItem(t){super.processDataItem(t);let e=t.get(\"mapPolygon\");e||(e=this.makeMapPolygon(t)),t.set(\"mapPolygon\",e);let n=t.get(\"geometry\");if(n){if(this.get(\"reverseGeodata\")&&n.coordinates)for(let t=0;t<n.coordinates.length;t++)if(\"MultiPolygon\"==n.type)for(let e=0;e<n.coordinates[t].length;e++)n.coordinates[t][e].reverse();else n.coordinates[t].reverse();e.set(\"geometry\",n)}e.series=this,this._addGeometry(t.get(\"geometry\"),this)}disposeDataItem(t){super.disposeDataItem(t);const e=t.get(\"mapPolygon\");e&&(this.mapPolygons.removeValue(e),e.dispose()),this._removeGeometry(t.get(\"geometry\"))}_excludeDataItem(t){super._excludeDataItem(t);const e=t.get(\"mapPolygon\");e&&e.setPrivate(\"visible\",!1)}_unexcludeDataItem(t){super._unexcludeDataItem(t);const e=t.get(\"mapPolygon\");e&&e.setPrivate(\"visible\",!0)}_notIncludeDataItem(t){super._notIncludeDataItem(t);const e=t.get(\"mapPolygon\");e&&e.setPrivate(\"visible\",!1)}_unNotIncludeDataItem(t){super._unNotIncludeDataItem(t);const e=t.get(\"mapPolygon\");e&&e.setPrivate(\"visible\",!0)}markDirtyValues(t){if(super.markDirtyValues(),t){const e=t.get(\"mapPolygon\");e&&e.set(\"geometry\",t.get(\"geometry\"))}}zoomToDataItem(t,e){const n=t.get(\"mapPolygon\");if(n){const t=n.get(\"geometry\"),i=this.chart;if(t&&i){if(e){const e=Pi(t);return i.rotate(-e.longitude,-e.latitude),i.zoomToGeoBounds(Di(t),void 0,-e.longitude,-e.latitude)}return i.zoomToGeoBounds(Di(t))}}}}Object.defineProperty(Li,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"MapPolygonSeries\"}),Object.defineProperty(Li,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:s.classNames.concat([Li.className])});var ki=n(9361),Ri=n(8777),zi=n(962),Gi=n(2156);class Bi extends Ni{constructor(){super(...arguments),Object.defineProperty(this,\"_dataItem\",{enumerable:!0,configurable:!0,writable:!0,value:this.makeDataItem({})}),Object.defineProperty(this,\"_clusterIndex\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_clusters\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"clusteredDataItems\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_scatterIndex\",{enumerable:!0,configurable:!0,writable:!0,value:0}),Object.defineProperty(this,\"_scatters\",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,\"_packLayout\",{enumerable:!0,configurable:!0,writable:!0,value:Gi.Z()}),Object.defineProperty(this,\"_spiral\",{enumerable:!0,configurable:!0,writable:!0,value:[]})}_afterNew(){this.fields.push(\"groupId\"),this._setRawDefault(\"groupIdField\",\"groupId\"),super._afterNew()}_updateChildren(){super._updateChildren(),this.isDirty(\"scatterRadius\")&&(this._spiral=jn.spiralPoints(0,0,300,300,0,3,3,0,0));const t={};o.each(this.dataItems,(e=>{const n=e.get(\"groupId\",\"_default\");t[n]||(t[n]=[]),t[n].push(e)})),this._scatterIndex=-1,this._scatters=[],this._clusterIndex=-1,this._clusters=[],o.each(this.clusteredDataItems,(t=>{t.setRaw(\"children\",void 0)})),o.each(this.dataItems,(t=>{t.setRaw(\"cluster\",void 0)})),r.each(t,((t,e)=>{this._scatterGroup(e)})),r.each(t,((t,e)=>{this._clusterGroup(e)})),o.each(this.dataItems,(t=>{if(!t.get(\"cluster\")){const e=t.bullets;e&&o.each(e,(t=>{const e=t.get(\"sprite\");e&&e.set(\"forceHidden\",!1)}))}}))}zoomToCluster(t,e){this.zoomToDataItems(t.get(\"children\",[]),e)}_clusterGroup(t){const e=this.chart;if(e&&e.get(\"zoomLevel\",1)>=e.get(\"maxZoomLevel\",100)*this.get(\"stopClusterZoom\",.95));else for(;t.length>0;){this._clusterIndex++,this._clusters[this._clusterIndex]=[];const e=this._clusters[this._clusterIndex],n=t[0];e.push(n),o.remove(t,n),this._clusterDataItem(n,t)}let n=0;o.each(this._clusters,(t=>{let e=0,i=0,r=t.length;if(r>1){let s=this.clusteredDataItems[n];if(!s){s=new ki.z(this,void 0,{});const t=this.get(\"clusteredBullet\");if(t){const e=s.set(\"bullet\",t(this._root,this,s));if(e){const t=e.get(\"sprite\");t&&(this.bulletsContainer.children.push(t),t._setDataItem(s))}}this.clusteredDataItems.push(s)}o.each(t,(t=>{t.setRaw(\"cluster\",s);const n=t.get(\"point\");n&&(e+=n.x,i+=n.y);const r=t.bullets;r&&o.each(r,(t=>{const e=t.get(\"sprite\");e&&e.set(\"forceHidden\",!0)}))}));let a=e/r,l=i/r;s.setRaw(\"children\",t);const u=s.get(\"value\");s.setRaw(\"value\",r);const c=s.get(\"bullet\");if(c){const t=c.get(\"sprite\");t&&(t.set(\"forceHidden\",!1),t.setAll({x:a,y:l}),u!=r&&t instanceof Ri.W&&t.walkChildren((t=>{t instanceof zi._&&t.text.markDirtyText()})))}n++}})),o.each(this.clusteredDataItems,(t=>{let e=t.get(\"children\");if(!e||0==e.length){const e=t.get(\"bullet\");if(e){const t=e.get(\"sprite\");t&&t.set(\"forceHidden\",!0)}}}))}_clusterDataItem(t,e){const n=t.get(\"point\");n&&o.each(e,(t=>{if(t&&!t.get(\"clipped\")){const i=t.get(\"point\");i&&Math.hypot(i.x-n.x,i.y-n.y)<this.get(\"minDistance\",20)&&(this._clusters[this._clusterIndex].push(t),o.remove(e,t),this._clusterDataItem(t,e))}}))}_scatterGroup(t){const e=this.chart;if(e&&e.get(\"zoomLevel\",1)>=e.get(\"maxZoomLevel\",100)*this.get(\"stopClusterZoom\",.95)){for(;t.length>0;){this._scatterIndex++,this._scatters[this._scatterIndex]=[];const e=this._scatters[this._scatterIndex],n=t[0];e.push(n),o.remove(t,n),this._scatterDataItem(n,t)}o.each(this._scatters,(t=>{if(t.length>1){let e=[],n=0,i=this.get(\"scatterRadius\",8);o.each(t,(t=>{let r=this._spiral[n],s=!0;if(e.length>0)for(;s;)o.each(e,(t=>{for(s=!1;jn.circlesOverlap({x:r.x,y:r.y,radius:i},t);)n++,null==this._spiral[n]?s=!1:(s=!0,r=this._spiral[n])}));const a=r.x,l=r.y;e.push({x:a,y:l,radius:i}),t.set(\"dx\",a),t.set(\"dy\",l);const u=t.bullets;u&&o.each(u,(t=>{const e=t.get(\"sprite\");e&&e.setAll({dx:a,dy:l})}))}))}}))}}_scatterDataItem(t,e){const n=t.get(\"point\");n&&o.each(e,(t=>{if(t&&!t.get(\"clipped\")){const i=t.get(\"point\");i&&Math.hypot(i.x-n.x,i.y-n.y)<this.get(\"scatterDistance\",5)&&(this._scatters[this._scatterIndex].push(t),o.remove(e,t),this._scatterDataItem(t,e))}}))}}Object.defineProperty(Bi,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"ClusteredPointSeries\"}),Object.defineProperty(Bi,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Ni.classNames.concat([Bi.className])});var Yi=n(8054),Xi=n(7449);class Ai extends Ri.W{constructor(){super(...arguments),Object.defineProperty(this,\"plusButton\",{enumerable:!0,configurable:!0,writable:!0,value:this.children.push(Yi.z.new(this._root,{width:36,height:36,themeTags:[\"plus\"]}))}),Object.defineProperty(this,\"minusButton\",{enumerable:!0,configurable:!0,writable:!0,value:this.children.push(Yi.z.new(this._root,{width:36,height:36,themeTags:[\"minus\"]}))}),Object.defineProperty(this,\"_disposer\",{enumerable:!0,configurable:!0,writable:!0,value:void 0})}_afterNew(){super._afterNew(),this.set(\"position\",\"absolute\"),this.set(\"layout\",this._root.verticalLayout),this.set(\"themeTags\",[\"zoomcontrol\"]),this.plusButton.setAll({icon:u.T.new(this._root,{themeTags:[\"icon\"]}),layout:void 0}),this.minusButton.setAll({icon:u.T.new(this._root,{themeTags:[\"icon\"]}),layout:void 0})}_prepareChildren(){if(super._prepareChildren(),this.isPrivateDirty(\"chart\")){const t=this.getPrivate(\"chart\"),e=this._prevPrivateSettings.chart;t&&(this._disposer=new Xi.FV([this.plusButton.events.on(\"click\",(()=>{t.zoomIn()})),this.minusButton.events.on(\"click\",(()=>{t.zoomOut()}))])),e&&this._disposer&&this._disposer.dispose()}}}function Zi(t,e){return[P(e)*M(t),M(e)]}function Wi(){return ne(Zi).scale(249.5).clipAngle(90+h)}function Fi(t,e){return[t,e]}function Vi(){return ne(Fi).scale(152.63)}function Ji(t,e){var n=M(t),i=(n+M(e))/2;if(_(i)<h)return function(t){var e=P(t);function n(t,n){return[t*e,M(n)/e]}return n.invert=function(t,n){return[t/e,E(n*e)]},n}(t);var o=1+n*(2*i-n),r=C(o)/i;function s(t,e){var n=C(o-2*i*M(e))/i;return[n*M(t*=i),r-n*P(t)]}return s.invert=function(t,e){var n=r-e,s=w(t,_(n))*j(n);return n*i<0&&(s-=f*j(t)*j(n)),[s/i,E((o-(t*t+n*n)*i*i)/(2*i))]},s}function $i(){return function(t){var e=0,n=f/3,i=ie(t),o=i(e,n);return o.parallels=function(t){return arguments.length?i(e=t[0]*v,n=t[1]*v):[e*y,n*y]},o}(Ji).scale(155.424).center([0,33.6442])}function Hi(){var t,e,n,i,o,r,s=$i().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7]),a=$i().rotate([154,0]).center([-2,58.5]).parallels([55,65]),l=$i().rotate([157,0]).center([-3,19.9]).parallels([8,18]),u={point:function(t,e){r=[t,e]}};function c(t){var e=t[0],s=t[1];return r=null,n.point(e,s),r||(i.point(e,s),r)||(o.point(e,s),r)}function p(){return t=e=null,c}return c.invert=function(t){var e=s.scale(),n=s.translate(),i=(t[0]-n[0])/e,o=(t[1]-n[1])/e;return(o>=.12&&o<.234&&i>=-.425&&i<-.214?a:o>=.166&&o<.234&&i>=-.214&&i<-.115?l:s).invert(t)},c.stream=function(n){return t&&e===n?t:(i=[s.stream(e=n),a.stream(n),l.stream(n)],o=i.length,t={point:function(t,e){for(var n=-1;++n<o;)i[n].point(t,e)},sphere:function(){for(var t=-1;++t<o;)i[t].sphere()},lineStart:function(){for(var t=-1;++t<o;)i[t].lineStart()},lineEnd:function(){for(var t=-1;++t<o;)i[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<o;)i[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<o;)i[t].polygonEnd()}});var i,o},c.precision=function(t){return arguments.length?(s.precision(t),a.precision(t),l.precision(t),p()):s.precision()},c.scale=function(t){return arguments.length?(s.scale(t),a.scale(.35*t),l.scale(t),c.translate(s.translate())):s.scale()},c.translate=function(t){if(!arguments.length)return s.translate();var e=s.scale(),r=+t[0],c=+t[1];return n=s.translate(t).clipExtent([[r-.455*e,c-.238*e],[r+.455*e,c+.238*e]]).stream(u),i=a.translate([r-.307*e,c+.201*e]).clipExtent([[r-.425*e+h,c+.12*e+h],[r-.214*e-h,c+.234*e-h]]).stream(u),o=l.translate([r-.205*e,c+.212*e]).clipExtent([[r-.214*e+h,c+.166*e+h],[r-.115*e-h,c+.234*e-h]]).stream(u),p()},c.fitExtent=function(t,e){return Jt(c,t,e)},c.fitSize=function(t,e){return $t(c,t,e)},c.fitWidth=function(t,e){return Ht(c,t,e)},c.fitHeight=function(t,e){return Qt(c,t,e)},c.scale(1070)}Object.defineProperty(Ai,\"className\",{enumerable:!0,configurable:!0,writable:!0,value:\"ZoomControl\"}),Object.defineProperty(Ai,\"classNames\",{enumerable:!0,configurable:!0,writable:!0,value:Ri.W.classNames.concat([Ai.className])}),Zi.invert=function(t){return function(e,n){var i=C(e*e+n*n),o=t(i),r=M(o),s=P(o);return[w(e*r,i*s),E(i&&n*r/i)]}}(E),Fi.invert=Fi;var Qi=1.340264,Ui=-.081106,qi=893e-6,Ki=.003796,to=C(3)/2;function eo(t,e){var n=E(to*M(e)),i=n*n,o=i*i*i;return[t*P(n)/(to*(Qi+3*Ui*i+o*(7*qi+9*Ki*i))),n*(Qi+Ui*i+o*(qi+Ki*i))]}function no(){return ne(eo).scale(177.158)}function io(t,e){var n=e*e,i=n*n;return[t*(.8707-.131979*n+i*(i*(.003971*n-.001529*i)-.013791)),e*(1.007226+n*(.015085+i*(.028874*n-.044475-.005916*i)))]}function oo(){return ne(io).scale(175.295)}eo.invert=function(t,e){for(var n,i=e,o=i*i,r=o*o*o,s=0;s<12&&(r=(o=(i-=n=(i*(Qi+Ui*o+r*(qi+Ki*o))-e)/(Qi+3*Ui*o+r*(7*qi+9*Ki*o)))*i)*o*o,!(_(n)<p));++s);return[to*t*(Qi+3*Ui*o+r*(7*qi+9*Ki*o))/P(i),E(M(i)/to)]},io.invert=function(t,e){var n,i=e,o=25;do{var r=i*i,s=r*r;i-=n=(i*(1.007226+r*(.015085+s*(.028874*r-.044475-.005916*s)))-e)/(1.007226+r*(.045255+s*(.259866*r-.311325-.005916*11*s)))}while(_(n)>h&&--o>0);return[t/(.8707+(r=i*i)*(r*(r*r*r*(.003971-.001529*r)-.013791)-.131979)),i]}},5417:function(t,e,n){var i=n(2640);function o(t,e,n){var o,a,l,u;e=e||1;for(var c=0;c<t[0].length;c++){var h=t[0][c];(!c||h[0]<o)&&(o=h[0]),(!c||h[1]<a)&&(a=h[1]),(!c||h[0]>l)&&(l=h[0]),(!c||h[1]>u)&&(u=h[1])}var p=l-o,f=u-a,d=Math.min(p,f),g=d/2;if(0===d){var m=[o,a];return m.distance=0,m}for(var y=new i(void 0,r),v=o;v<l;v+=d)for(var _=a;_<u;_+=d)y.push(new s(v+g,_+g,g,t));var b=function(t){for(var e=0,n=0,i=0,o=t[0],r=0,a=o.length,l=a-1;r<a;l=r++){var u=o[r],c=o[l],h=u[0]*c[1]-c[0]*u[1];n+=(u[0]+c[0])*h,i+=(u[1]+c[1])*h,e+=3*h}return 0===e?new s(o[0][0],o[0][1],0,t):new s(n/e,i/e,0,t)}(t),w=new s(o+p/2,a+f/2,0,t);w.d>b.d&&(b=w);for(var P=y.length;y.length;){var x=y.pop();x.d>b.d&&(b=x,n&&console.log(\"found best %d after %d probes\",Math.round(1e4*x.d)/1e4,P)),x.max-b.d<=e||(g=x.h/2,y.push(new s(x.x-g,x.y-g,g,t)),y.push(new s(x.x+g,x.y-g,g,t)),y.push(new s(x.x-g,x.y+g,g,t)),y.push(new s(x.x+g,x.y+g,g,t)),P+=4)}n&&(console.log(\"num probes: \"+P),console.log(\"best distance: \"+b.d));var D=[b.x,b.y];return D.distance=b.d,D}function r(t,e){return e.max-t.max}function s(t,e,n,i){this.x=t,this.y=e,this.h=n,this.d=function(t,e,n){for(var i=!1,o=1/0,r=0;r<n.length;r++)for(var s=n[r],l=0,u=s.length,c=u-1;l<u;c=l++){var h=s[l],p=s[c];h[1]>e!=p[1]>e&&t<(p[0]-h[0])*(e-h[1])/(p[1]-h[1])+h[0]&&(i=!i),o=Math.min(o,a(t,e,h,p))}return 0===o?0:(i?1:-1)*Math.sqrt(o)}(t,e,i),this.max=this.d+this.h*Math.SQRT2}function a(t,e,n,i){var o=n[0],r=n[1],s=i[0]-o,a=i[1]-r;if(0!==s||0!==a){var l=((t-o)*s+(e-r)*a)/(s*s+a*a);l>1?(o=i[0],r=i[1]):l>0&&(o+=s*l,r+=a*l)}return(s=t-o)*s+(a=e-r)*a}i.default&&(i=i.default),t.exports=o,t.exports.default=o},2640:function(t,e,n){n.r(e),n.d(e,{default:function(){return i}});class i{constructor(t=[],e=o){if(this.data=t,this.length=this.data.length,this.compare=e,this.length>0)for(let t=(this.length>>1)-1;t>=0;t--)this._down(t)}push(t){this.data.push(t),this.length++,this._up(this.length-1)}pop(){if(0===this.length)return;const t=this.data[0],e=this.data.pop();return this.length--,this.length>0&&(this.data[0]=e,this._down(0)),t}peek(){return this.data[0]}_up(t){const{data:e,compare:n}=this,i=e[t];for(;t>0;){const o=t-1>>1,r=e[o];if(n(i,r)>=0)break;e[t]=r,t=o}e[t]=i}_down(t){const{data:e,compare:n}=this,i=this.length>>1,o=e[t];for(;t<i;){let i=1+(t<<1),r=e[i];const s=i+1;if(s<this.length&&n(e[s],r)<0&&(i=s,r=e[s]),n(r,o)>=0)break;e[t]=r,t=i}e[t]=o}}function o(t,e){return t<e?-1:t>e?1:0}},2872:function(t,e,n){n.r(e),n.d(e,{am5map:function(){return i}});const i=n(7533)}},function(t){var e=(2872,t(t.s=2872)),n=window;for(var i in e)n[i]=e[i];e.__esModule&&Object.defineProperty(n,\"__esModule\",{value:!0})}]);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 2,
        "severity_counts": {
          "critical": 1,
          "low": 1
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\Material.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\worldLow.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\lib\\xy.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "report_pdf_options\\static\\src\\js\\PdfOptionsModal.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "statement_report\\static\\src\\js\\action_manager.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "website_subscription_package\\static\\src\\js\\subscription.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "uae_wps_report-17.0.1.0.0\\uae_wps_report\\static\\src\\js\\action_manager.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "all_in_one_sales_kit-17.0.1.0.0\\all_in_one_sales_kit\\static\\src\\js\\action_manager.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "critical": 1
        }
      },
      {
        "file": "all_in_one_sales_kit-17.0.1.0.0\\all_in_one_sales_kit\\static\\src\\js\\dashboard.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          },
          {
            "type": "var_declarations",
            "line": 108,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'draft'], ['date_order', '>=', this.state.date.start_date], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 111,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'draft'], ['date_order', '>=', this.state.date.start_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 114,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'draft'], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 117,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'draft']]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 131,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sale'], ['date_order', '>=', this.state.date.start_date], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 134,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sale'], ['date_order', '>=', this.state.date.start_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 137,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sale'], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 140,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sale']]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 154,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sent'], ['date_order', '>=', this.state.date.start_date], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 157,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sent'], ['date_order', '>=', this.state.date.start_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 160,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sent'], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 163,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'sent']]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 176,
            "content": "var domain = [['user_id', '=', session.uid], ['state', '=', 'cancel']]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 209,
            "content": "var domain = [['user_id', '=', session.uid], ['invoice_status', '=', 'to invoice'], ['date_order', '>=', this.state.date.start_date], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 212,
            "content": "var domain = [['user_id', '=', session.uid], ['invoice_status', '=', 'to invoice'], ['date_order', '>=', this.state.date.start_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 215,
            "content": "var domain = [['user_id', '=', session.uid], ['invoice_status', '=', 'to invoice'], ['date_order', '<=', this.state.date.end_date]]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 218,
            "content": "var domain = [['user_id', '=', session.uid], ['invoice_status', '=', 'to invoice']]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 18,
        "severity_counts": {
          "critical": 1,
          "low": 17
        }
      },
      {
        "file": "all_in_one_sales_kit-17.0.1.0.0\\all_in_one_sales_kit\\static\\src\\js\\sale_report.js",
        "issues": [
          {
            "type": "missing_module_declaration",
            "line": 1,
            "content": "(Missing @odoo-module declaration)",
            "severity": "critical",
            "description": "Missing modern module declaration"
          },
          {
            "type": "var_declarations",
            "line": 36,
            "content": "var filter_data_selected = {};",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 67,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 67,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 68,
            "content": "var action = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 5,
        "severity_counts": {
          "critical": 1,
          "low": 3,
          "high": 1
        }
      }
    ],
    "high": [
      {
        "file": "form_edit_button_restore\\static\\src\\js\\form_edit_button.js",
        "issues": [
          {
            "type": "var_self_this",
            "line": 12,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 12,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 21,
            "content": "var res = await this.save({ savebtn: true,});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 32,
            "content": "var isDirty = await this.isDirty(false);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 43,
            "content": "var res = await super.isDirty(...arguments);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 5,
        "severity_counts": {
          "high": 1,
          "low": 4
        }
      },
      {
        "file": "mx_elearning_plus\\static\\src\\js\\slides_course_rating_fullscreen.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 8,
            "content": "var FullscreenSlideLikeWidget = publicWidget.Widget.extend({",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 48,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 48,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 52,
            "content": "}).then(function (data) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "jquery_usage",
            "line": 54,
            "content": "const $likesBtn = self.$('span.o_wslides_js_slide_like_up_mx');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 56,
            "content": "const $dislikesBtn = self.$('span.o_wslides_js_slide_like_down_mx');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 91,
            "content": "var slideId = $(ev.currentTarget).data('slide-id');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 91,
            "content": "var slideId = $(ev.currentTarget).data('slide-id');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 96,
            "content": "var slideId = $(ev.currentTarget).data('slide-id');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 96,
            "content": "var slideId = $(ev.currentTarget).data('slide-id');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_self_this",
            "line": 109,
            "content": "var self = this;",
            "severity": "high",
            "description": "Legacy context binding pattern"
          },
          {
            "type": "var_declarations",
            "line": 109,
            "content": "var self = this;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 110,
            "content": "var defs = [this._super.apply(this, arguments)];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 111,
            "content": "$('.o_wslides_js_slide_like_mx').each(function () {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 112,
            "content": "defs.push(new FullscreenSlideLikeWidget(self).attachTo($(this)));",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 15,
        "severity_counts": {
          "low": 12,
          "high": 2,
          "medium": 1
        }
      }
    ],
    "medium": [
      {
        "file": "account_payment_final\\static\\src\\js\\cloudpepper_compatibility_patch.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 71,
            "content": "var notification = document.createElement(\"div\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "low": 1
        }
      },
      {
        "file": "mx_elearning_plus\\static\\src\\js\\slides_course.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 15,
            "content": "var message = ('Commenting is not enabled on this course.');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 24,
            "content": "var message = ('There are no comments for now. Join Course to be the first to leave a comment.');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 33,
            "content": "var message = ('There are no comments for now. Earn more Karma to be the first to leave a comment.');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 42,
            "content": "var message = ('Earn more Karma to leave a comment.');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 52,
            "content": "var slide = this.get('slide');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 55,
            "content": "}).then(function (data) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          },
          {
            "type": "jquery_usage",
            "line": 57,
            "content": "const $likesBtn = self.$('span.o_wslides_js_slide_like_up_mx');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 59,
            "content": "const $dislikesBtn = self.$('span.o_wslides_js_slide_like_down_mx');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 72,
            "content": "$('.o_wslides_js_slide_like_up_mx').data('slide-id', slide.id);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 73,
            "content": "$('.o_wslides_js_slide_like_down_mx').data('slide-id', slide.id);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 74,
            "content": "$('.o_wslides_js_slide_like_up_mx span').text(data.likes);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 75,
            "content": "$('.o_wslides_js_slide_like_down_mx span').text(data.dislikes);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 82,
            "content": "var slideData = ev.data;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "function_callbacks",
            "line": 86,
            "content": "}).then(function (result) {",
            "severity": "medium",
            "description": "Legacy promise callback pattern"
          }
        ],
        "total_issues": 14,
        "severity_counts": {
          "low": 12,
          "medium": 2
        }
      },
      {
        "file": "mx_elearning_plus\\static\\src\\js\\slides_course_extend.js",
        "issues": [
          {
            "type": "jquery_usage",
            "line": 13,
            "content": "$('.o_course_extended').on('click','#collapse_div',function() {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 14,
            "content": "var id = this.dataset.target.split('-')[1]",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 15,
            "content": "if($('#slide-'+id).is(\":visible\")) {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 16,
            "content": "$('#slide-'+id).hide()",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 17,
            "content": "$(this).children().first().children().removeClass('fa-minus');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 18,
            "content": "$(this).children().first().children().addClass('fa-plus');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 20,
            "content": "$('#slide-'+id).show()",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 21,
            "content": "$(this).children().first().children().removeClass('fa-plus');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 22,
            "content": "$(this).children().first().children().addClass('fa-minus');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 9,
        "severity_counts": {
          "low": 9
        }
      },
      {
        "file": "mx_elearning_plus\\static\\src\\js\\slide_comment_composer_fullscreen.js",
        "issues": [
          {
            "type": "jquery_usage",
            "line": 28,
            "content": "var res_id = $('.o_wslides_fs_sidebar_list_item.active').data('id');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 28,
            "content": "var res_id = $('.o_wslides_fs_sidebar_list_item.active').data('id');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 30,
            "content": "'message': this.$('textarea[name=\"message\"]').val(),",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 39,
            "content": "'message': this.$('textarea[name=\"message\"]').val(),",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 96,
            "content": "this.$('.o_comment_popup_composer_modal').html(modal);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 104,
            "content": "return this._composer.appendTo(this.$('.o_comment_popup_composer_modal .o_portal_chatter_composer'))",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 6,
        "severity_counts": {
          "low": 6
        }
      },
      {
        "file": "odoo_dynamic_dashboard\\static\\src\\js\\dynamic_dashboard.js",
        "issues": [
          {
            "type": "jquery_usage",
            "line": 182,
            "content": "const currentMode = $(\".mode\").attr(\"mode\");",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 184,
            "content": "$('.theme').attr('style','display: none;')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 185,
            "content": "$(\".container\").attr('style', 'background-color: #383E45;min-height:-webkit-fill-available; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 186,
            "content": "$(\".mode\").attr(\"mode\", \"dark\")",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 187,
            "content": "$(\".bi-moon-stars-fill\").attr('class', 'bi bi-cloud-sun-fill view-mode-icon')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 188,
            "content": "$(\".bi-cloud-sun-fill\").attr('style', 'color:black;margin-left:10px;')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 189,
            "content": "$(\".mode\").attr('style','display: none !important');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 190,
            "content": "$(\"#search-input-chart\").attr('style', 'background-color: white; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 191,
            "content": "$(\"#search-button\").attr('style', 'background-color: #BB86FC; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 192,
            "content": "$(\"#dropdownMenuButton\").attr('style', 'background-color: #03DAC5;margin-top:-4px; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 193,
            "content": "$(\"#text_add\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 194,
            "content": "$(\".date-label\").attr('style', 'color: black;font-family:monospace; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 195,
            "content": "$(\".block_setting\").attr('style', 'color: white; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 196,
            "content": "$(\".block_delete\").attr('style', 'color: white; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 197,
            "content": "$(\".block_image\").attr('style', 'color: #03DAC5; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 198,
            "content": "$(\".block_pdf\").attr('style', 'color: #03DAC5; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 199,
            "content": "$(\".block_csv\").attr('style', 'color: #03DAC5; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 200,
            "content": "$(\".block_xlsx\").attr('style', 'color: #03DAC5; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 203,
            "content": "$('.theme').attr('style','display: block;')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 204,
            "content": "$(\".container\").attr('style', this.ThemeSelector.el.value + 'min-height:-webkit-fill-available;')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 205,
            "content": "$(\".mode\").attr(\"mode\", \"light\")",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 206,
            "content": "$(\".bi-cloud-sun-fill\").attr('class', 'bi bi-moon-stars-fill view-mode-icon')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 207,
            "content": "$(\".view-mode-icon\").attr('style', 'color:black;margin-left:10px; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 208,
            "content": "$(\".mode\").attr('style','display: none !important');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 209,
            "content": "$(\".mode\").attr('style','color: white !important');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 210,
            "content": "$(\"#search-input-chart\").attr('style', 'background-color: none; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 211,
            "content": "$(\"#search-button\").attr('style', 'background-color: none; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 212,
            "content": "$(\"#dropdownMenuButton\").attr('style', 'background-color: none;margin-top:-4px; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 213,
            "content": "$(\"#text_add\").attr('style', 'color: white; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 214,
            "content": "$(\".date-label\").attr('style', 'color: black; !important;font-family:monospace; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 215,
            "content": "$(\".block_setting\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 216,
            "content": "$(\".block_delete\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 217,
            "content": "$(\".block_image\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 218,
            "content": "$(\".block_pdf\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 219,
            "content": "$(\".block_csv\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 220,
            "content": "$(\".block_xlsx\").attr('style', 'color: black; !important')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 227,
            "content": "$(\".dropdown-addblock\").toggle()",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 337,
            "content": "const currentMode = $(\".mode\").attr(\"mode\");",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 339,
            "content": "$(\".mode\").text(\"Dark Mode\")",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 340,
            "content": "$(\".mode\").attr('style','display: inline-block !important; color: black !important');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 343,
            "content": "$(\".mode\").text(\"Light Mode\")",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 344,
            "content": "$(\".mode\").attr('style','display: inline-block !important; color: black !important');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 349,
            "content": "$(\".mode\").fadeOut(2000);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 394,
            "content": "var elements = $('.items .resize-drag')",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 394,
            "content": "var elements = $('.items .resize-drag')",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 395,
            "content": "var newElement = document.createElement('div');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "jquery_usage",
            "line": 400,
            "content": "for (var x=0; x< $(newElement)[0].children.length; x++){",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 401,
            "content": "$($(newElement)[0].children[x])[0].style.transform = \"\"",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "var_declarations",
            "line": 403,
            "content": "var opt = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 410,
            "content": "var pdf = html2pdf().set(opt).from(newElement).toPdf()",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 411,
            "content": "var pdfOutput = await pdf.output('datauristring');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 419,
            "content": "var created_pdf = await this.createPDF();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 420,
            "content": "var base64code = created_pdf.split(',')[1];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 53,
        "severity_counts": {
          "low": 53
        }
      },
      {
        "file": "odoo_dynamic_dashboard\\static\\src\\js\\dynamic_dashboard_chart.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 37,
            "content": "var bgCanvas = document.createElement(\"canvas\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 40,
            "content": "var bgCtx = bgCanvas.getContext(\"2d\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 44,
            "content": "var imgData = bgCanvas.toDataURL(\"image/png\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 46,
            "content": "var downloadLink = document.createElement('a');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 54,
            "content": "var pdf = new jsPDF();",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 59,
            "content": "var rows = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 97,
            "content": "var rows = [];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 112,
            "content": "var link = document.createElement(\"a\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 124,
            "content": "var id = this.props.widget.id",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 9,
        "severity_counts": {
          "low": 9
        }
      },
      {
        "file": "odoo_dynamic_dashboard\\static\\src\\js\\dynamic_dashboard_tile.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 18,
            "content": "var id = this.props.widget.id",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 45,
            "content": "var model_name = this.props.widget.model_name;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 2,
        "severity_counts": {
          "low": 2
        }
      },
      {
        "file": "rental_management\\static\\src\\js\\rental.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 83,
            "content": "var root = am5.Root.new(div);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 87,
            "content": "var data = [{",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 112,
            "content": "var chart = root.container.children.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 124,
            "content": "var xRenderer = am5xy.AxisRendererX.new(root, {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 129,
            "content": "var xAxis = chart.xAxes.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 136,
            "content": "var yRenderer = am5xy.AxisRendererY.new(root, {});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 139,
            "content": "var yAxis = chart.yAxes.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 145,
            "content": "var series = chart.series.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 171,
            "content": "var currentlyHovered;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 182,
            "content": "var bullet = dataItem.bullets[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 193,
            "content": "var bullet = currentlyHovered.bullets[0];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 202,
            "content": "var circleTemplate = am5.Template.new({});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 204,
            "content": "var bulletContainer = am5.Container.new(root, {});",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 205,
            "content": "var circle = bulletContainer.children.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 214,
            "content": "var maskCircle = bulletContainer.children.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 217,
            "content": "var imageContainer = bulletContainer.children.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 222,
            "content": "var image = imageContainer.children.push(",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 254,
            "content": "var cursor = chart.set(\"cursor\", am5xy.XYCursor.new(root, {}));",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 259,
            "content": "var dataItem = series.get(\"tooltip\").dataItem;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 270,
            "content": "var options = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 305,
            "content": "var options = {",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 21,
        "severity_counts": {
          "low": 21
        }
      },
      {
        "file": "tk_portal_partner_leads\\static\\src\\js\\script.js",
        "issues": [
          {
            "type": "jquery_usage",
            "line": 5,
            "content": "$(document).ready(async function () {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 7,
            "content": "$(\"#country\").on(\"change\", function () {",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 8,
            "content": "let countryId = $(\"#country\").val();",
            "severity": "low",
            "description": "Potential jQuery dependency"
          },
          {
            "type": "jquery_usage",
            "line": 15,
            "content": "$(\"#state\").empty().append(text);",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 4,
        "severity_counts": {
          "low": 4
        }
      },
      {
        "file": "whatsapp_mail_messaging\\static\\src\\js\\whatsapp_modal.js",
        "issues": [
          {
            "type": "var_declarations",
            "line": 31,
            "content": "var selectElement = document.querySelector(\"#myFormControl\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 33,
            "content": "var defaultOption = document.createElement('option');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 40,
            "content": "var option = document.createElement('option');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 50,
            "content": "var selectElement = document.querySelector(\"#myFormControl\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 51,
            "content": "var textareaElement = document.querySelector(\"#exampleFormControlTextarea1\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 52,
            "content": "var selectedOption = selectElement.options[selectElement.selectedIndex];",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 53,
            "content": "var selectedMessage = selectedOption.getAttribute('data-message');",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 62,
            "content": "var textareaElement = document.querySelector(\"#exampleFormControlTextarea1\");",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 63,
            "content": "var messageString = textareaElement.value;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 70,
            "content": "var mobileNumber = mobile_num[0].mobile_number;",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          },
          {
            "type": "var_declarations",
            "line": 72,
            "content": "var whatsappUrl = 'https://api.whatsapp.com/send?phone=' + mobileNumber + '&text=' + encodeURIComponent(messageString);",
            "severity": "low",
            "description": "Legacy var declarations (should use let/const)"
          }
        ],
        "total_issues": 11,
        "severity_counts": {
          "low": 11
        }
      },
      {
        "file": "whatsapp_mail_messaging\\static\\src\\js\\whatsapp_web_icon.js",
        "issues": [
          {
            "type": "jquery_usage",
            "line": 14,
            "content": "$('#ModalWhatsapp').css('display', 'block');",
            "severity": "low",
            "description": "Potential jQuery dependency"
          }
        ],
        "total_issues": 1,
        "severity_counts": {
          "low": 1
        }
      }
    ],
    "low": []
  }
}